// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSysCityArea(db *gorm.DB, opts ...gen.DOOption) sysCityArea {
	_sysCityArea := sysCityArea{}

	_sysCityArea.sysCityAreaDo.UseDB(db, opts...)
	_sysCityArea.sysCityAreaDo.UseModel(&model.SysCityArea{})

	tableName := _sysCityArea.sysCityAreaDo.TableName()
	_sysCityArea.ALL = field.NewAsterisk(tableName)
	_sysCityArea.ID = field.NewInt(tableName, "id")
	_sysCityArea.Path = field.NewString(tableName, "path")
	_sysCityArea.ParentID = field.NewInt64(tableName, "parent_id")
	_sysCityArea.Type = field.NewString(tableName, "type")
	_sysCityArea.Name = field.NewString(tableName, "name")
	_sysCityArea.Level = field.NewBool(tableName, "level")
	_sysCityArea.Code = field.NewString(tableName, "code")
	_sysCityArea.Snum = field.NewInt64(tableName, "snum")

	_sysCityArea.fillFieldMap()

	return _sysCityArea
}

// sysCityArea 省市区县数据
type sysCityArea struct {
	sysCityAreaDo

	ALL      field.Asterisk
	ID       field.Int
	Path     field.String // 省市级别
	ParentID field.Int64  // 父级id
	Type     field.String // 类型
	Name     field.String // 名称
	Level    field.Bool   // 级别
	Code     field.String // 城市编码
	Snum     field.Int64  // 子级个数

	fieldMap map[string]field.Expr
}

func (s sysCityArea) Table(newTableName string) *sysCityArea {
	s.sysCityAreaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCityArea) As(alias string) *sysCityArea {
	s.sysCityAreaDo.DO = *(s.sysCityAreaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCityArea) updateTableName(table string) *sysCityArea {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Path = field.NewString(table, "path")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.Type = field.NewString(table, "type")
	s.Name = field.NewString(table, "name")
	s.Level = field.NewBool(table, "level")
	s.Code = field.NewString(table, "code")
	s.Snum = field.NewInt64(table, "snum")

	s.fillFieldMap()

	return s
}

func (s *sysCityArea) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCityArea) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["path"] = s.Path
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["type"] = s.Type
	s.fieldMap["name"] = s.Name
	s.fieldMap["level"] = s.Level
	s.fieldMap["code"] = s.Code
	s.fieldMap["snum"] = s.Snum
}

func (s sysCityArea) clone(db *gorm.DB) sysCityArea {
	s.sysCityAreaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCityArea) replaceDB(db *gorm.DB) sysCityArea {
	s.sysCityAreaDo.ReplaceDB(db)
	return s
}

type sysCityAreaDo struct{ gen.DO }

type ISysCityAreaDo interface {
	gen.SubQuery
	Debug() ISysCityAreaDo
	WithContext(ctx context.Context) ISysCityAreaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysCityAreaDo
	WriteDB() ISysCityAreaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysCityAreaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysCityAreaDo
	Not(conds ...gen.Condition) ISysCityAreaDo
	Or(conds ...gen.Condition) ISysCityAreaDo
	Select(conds ...field.Expr) ISysCityAreaDo
	Where(conds ...gen.Condition) ISysCityAreaDo
	Order(conds ...field.Expr) ISysCityAreaDo
	Distinct(cols ...field.Expr) ISysCityAreaDo
	Omit(cols ...field.Expr) ISysCityAreaDo
	Join(table schema.Tabler, on ...field.Expr) ISysCityAreaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysCityAreaDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysCityAreaDo
	Group(cols ...field.Expr) ISysCityAreaDo
	Having(conds ...gen.Condition) ISysCityAreaDo
	Limit(limit int) ISysCityAreaDo
	Offset(offset int) ISysCityAreaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCityAreaDo
	Unscoped() ISysCityAreaDo
	Create(values ...*model.SysCityArea) error
	CreateInBatches(values []*model.SysCityArea, batchSize int) error
	Save(values ...*model.SysCityArea) error
	First() (*model.SysCityArea, error)
	Take() (*model.SysCityArea, error)
	Last() (*model.SysCityArea, error)
	Find() ([]*model.SysCityArea, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCityArea, err error)
	FindInBatches(result *[]*model.SysCityArea, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysCityArea) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysCityAreaDo
	Assign(attrs ...field.AssignExpr) ISysCityAreaDo
	Joins(fields ...field.RelationField) ISysCityAreaDo
	Preload(fields ...field.RelationField) ISysCityAreaDo
	FirstOrInit() (*model.SysCityArea, error)
	FirstOrCreate() (*model.SysCityArea, error)
	FindByPage(offset int, limit int) (result []*model.SysCityArea, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysCityAreaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysCityAreaDo) Debug() ISysCityAreaDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCityAreaDo) WithContext(ctx context.Context) ISysCityAreaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCityAreaDo) ReadDB() ISysCityAreaDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCityAreaDo) WriteDB() ISysCityAreaDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCityAreaDo) Session(config *gorm.Session) ISysCityAreaDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCityAreaDo) Clauses(conds ...clause.Expression) ISysCityAreaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCityAreaDo) Returning(value interface{}, columns ...string) ISysCityAreaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCityAreaDo) Not(conds ...gen.Condition) ISysCityAreaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCityAreaDo) Or(conds ...gen.Condition) ISysCityAreaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCityAreaDo) Select(conds ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCityAreaDo) Where(conds ...gen.Condition) ISysCityAreaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCityAreaDo) Order(conds ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCityAreaDo) Distinct(cols ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCityAreaDo) Omit(cols ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCityAreaDo) Join(table schema.Tabler, on ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCityAreaDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCityAreaDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCityAreaDo) Group(cols ...field.Expr) ISysCityAreaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCityAreaDo) Having(conds ...gen.Condition) ISysCityAreaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCityAreaDo) Limit(limit int) ISysCityAreaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCityAreaDo) Offset(offset int) ISysCityAreaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCityAreaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCityAreaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCityAreaDo) Unscoped() ISysCityAreaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCityAreaDo) Create(values ...*model.SysCityArea) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCityAreaDo) CreateInBatches(values []*model.SysCityArea, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCityAreaDo) Save(values ...*model.SysCityArea) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCityAreaDo) First() (*model.SysCityArea, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCityArea), nil
	}
}

func (s sysCityAreaDo) Take() (*model.SysCityArea, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCityArea), nil
	}
}

func (s sysCityAreaDo) Last() (*model.SysCityArea, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCityArea), nil
	}
}

func (s sysCityAreaDo) Find() ([]*model.SysCityArea, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysCityArea), err
}

func (s sysCityAreaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCityArea, err error) {
	buf := make([]*model.SysCityArea, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCityAreaDo) FindInBatches(result *[]*model.SysCityArea, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCityAreaDo) Attrs(attrs ...field.AssignExpr) ISysCityAreaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCityAreaDo) Assign(attrs ...field.AssignExpr) ISysCityAreaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCityAreaDo) Joins(fields ...field.RelationField) ISysCityAreaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCityAreaDo) Preload(fields ...field.RelationField) ISysCityAreaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCityAreaDo) FirstOrInit() (*model.SysCityArea, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCityArea), nil
	}
}

func (s sysCityAreaDo) FirstOrCreate() (*model.SysCityArea, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCityArea), nil
	}
}

func (s sysCityAreaDo) FindByPage(offset int, limit int) (result []*model.SysCityArea, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCityAreaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCityAreaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCityAreaDo) Delete(models ...*model.SysCityArea) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCityAreaDo) withDO(do gen.Dao) *sysCityAreaDo {
	s.DO = *do.(*gen.DO)
	return s
}
