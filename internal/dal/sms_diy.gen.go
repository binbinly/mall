// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsDiy(db *gorm.DB, opts ...gen.DOOption) smsDiy {
	_smsDiy := smsDiy{}

	_smsDiy.smsDiyDo.UseDB(db, opts...)
	_smsDiy.smsDiyDo.UseModel(&model.SmsDiy{})

	tableName := _smsDiy.smsDiyDo.TableName()
	_smsDiy.ALL = field.NewAsterisk(tableName)
	_smsDiy.ID = field.NewInt(tableName, "id")
	_smsDiy.Name = field.NewString(tableName, "name")
	_smsDiy.Title = field.NewString(tableName, "title")
	_smsDiy.CoverImage = field.NewString(tableName, "cover_image")
	_smsDiy.TemplateName = field.NewString(tableName, "template_name")
	_smsDiy.Status = field.NewBool(tableName, "status")
	_smsDiy.Type = field.NewBool(tableName, "type")
	_smsDiy.IsShow = field.NewBool(tableName, "is_show")
	_smsDiy.IsBgColor = field.NewBool(tableName, "is_bg_color")
	_smsDiy.IsBgPic = field.NewBool(tableName, "is_bg_pic")
	_smsDiy.IsDiy = field.NewBool(tableName, "is_diy")
	_smsDiy.ColorPicker = field.NewString(tableName, "color_picker")
	_smsDiy.BgPic = field.NewString(tableName, "bg_pic")
	_smsDiy.BgTabVal = field.NewBool(tableName, "bg_tab_val")
	_smsDiy.IsDefault = field.NewBool(tableName, "is_default")
	_smsDiy.ScopeType = field.NewBool(tableName, "scope_type")
	_smsDiy.Value = field.NewString(tableName, "value")
	_smsDiy.CreatedAt = field.NewInt64(tableName, "created_at")
	_smsDiy.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_smsDiy.DeletedAt = field.NewField(tableName, "deleted_at")

	_smsDiy.fillFieldMap()

	return _smsDiy
}

type smsDiy struct {
	smsDiyDo

	ALL          field.Asterisk
	ID           field.Int
	Name         field.String // 页面名称
	Title        field.String // 网站标题
	CoverImage   field.String // 封面图
	TemplateName field.String // 模板名称
	Status       field.Bool   // 是否使用
	Type         field.Bool   // 页面类型
	IsShow       field.Bool   // 显示首页
	IsBgColor    field.Bool   // 颜色是否选中
	IsBgPic      field.Bool   // 背景图是否选中
	IsDiy        field.Bool   // 是否是diy数据
	ColorPicker  field.String // 背景颜色
	BgPic        field.String // 背景图
	BgTabVal     field.Bool   // 背景图图片样式
	IsDefault    field.Bool   // 是否默认
	ScopeType    field.Bool   // 适用范围类型
	Value        field.String // 页面数据
	CreatedAt    field.Int64  // 创建时间
	UpdatedAt    field.Int64  // 更新时间
	DeletedAt    field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s smsDiy) Table(newTableName string) *smsDiy {
	s.smsDiyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsDiy) As(alias string) *smsDiy {
	s.smsDiyDo.DO = *(s.smsDiyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsDiy) updateTableName(table string) *smsDiy {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Name = field.NewString(table, "name")
	s.Title = field.NewString(table, "title")
	s.CoverImage = field.NewString(table, "cover_image")
	s.TemplateName = field.NewString(table, "template_name")
	s.Status = field.NewBool(table, "status")
	s.Type = field.NewBool(table, "type")
	s.IsShow = field.NewBool(table, "is_show")
	s.IsBgColor = field.NewBool(table, "is_bg_color")
	s.IsBgPic = field.NewBool(table, "is_bg_pic")
	s.IsDiy = field.NewBool(table, "is_diy")
	s.ColorPicker = field.NewString(table, "color_picker")
	s.BgPic = field.NewString(table, "bg_pic")
	s.BgTabVal = field.NewBool(table, "bg_tab_val")
	s.IsDefault = field.NewBool(table, "is_default")
	s.ScopeType = field.NewBool(table, "scope_type")
	s.Value = field.NewString(table, "value")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *smsDiy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsDiy) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 20)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["title"] = s.Title
	s.fieldMap["cover_image"] = s.CoverImage
	s.fieldMap["template_name"] = s.TemplateName
	s.fieldMap["status"] = s.Status
	s.fieldMap["type"] = s.Type
	s.fieldMap["is_show"] = s.IsShow
	s.fieldMap["is_bg_color"] = s.IsBgColor
	s.fieldMap["is_bg_pic"] = s.IsBgPic
	s.fieldMap["is_diy"] = s.IsDiy
	s.fieldMap["color_picker"] = s.ColorPicker
	s.fieldMap["bg_pic"] = s.BgPic
	s.fieldMap["bg_tab_val"] = s.BgTabVal
	s.fieldMap["is_default"] = s.IsDefault
	s.fieldMap["scope_type"] = s.ScopeType
	s.fieldMap["value"] = s.Value
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s smsDiy) clone(db *gorm.DB) smsDiy {
	s.smsDiyDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsDiy) replaceDB(db *gorm.DB) smsDiy {
	s.smsDiyDo.ReplaceDB(db)
	return s
}

type smsDiyDo struct{ gen.DO }

type ISmsDiyDo interface {
	gen.SubQuery
	Debug() ISmsDiyDo
	WithContext(ctx context.Context) ISmsDiyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsDiyDo
	WriteDB() ISmsDiyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsDiyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsDiyDo
	Not(conds ...gen.Condition) ISmsDiyDo
	Or(conds ...gen.Condition) ISmsDiyDo
	Select(conds ...field.Expr) ISmsDiyDo
	Where(conds ...gen.Condition) ISmsDiyDo
	Order(conds ...field.Expr) ISmsDiyDo
	Distinct(cols ...field.Expr) ISmsDiyDo
	Omit(cols ...field.Expr) ISmsDiyDo
	Join(table schema.Tabler, on ...field.Expr) ISmsDiyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsDiyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsDiyDo
	Group(cols ...field.Expr) ISmsDiyDo
	Having(conds ...gen.Condition) ISmsDiyDo
	Limit(limit int) ISmsDiyDo
	Offset(offset int) ISmsDiyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsDiyDo
	Unscoped() ISmsDiyDo
	Create(values ...*model.SmsDiy) error
	CreateInBatches(values []*model.SmsDiy, batchSize int) error
	Save(values ...*model.SmsDiy) error
	First() (*model.SmsDiy, error)
	Take() (*model.SmsDiy, error)
	Last() (*model.SmsDiy, error)
	Find() ([]*model.SmsDiy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsDiy, err error)
	FindInBatches(result *[]*model.SmsDiy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsDiy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsDiyDo
	Assign(attrs ...field.AssignExpr) ISmsDiyDo
	Joins(fields ...field.RelationField) ISmsDiyDo
	Preload(fields ...field.RelationField) ISmsDiyDo
	FirstOrInit() (*model.SmsDiy, error)
	FirstOrCreate() (*model.SmsDiy, error)
	FindByPage(offset int, limit int) (result []*model.SmsDiy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsDiyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsDiyDo) Debug() ISmsDiyDo {
	return s.withDO(s.DO.Debug())
}

func (s smsDiyDo) WithContext(ctx context.Context) ISmsDiyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsDiyDo) ReadDB() ISmsDiyDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsDiyDo) WriteDB() ISmsDiyDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsDiyDo) Session(config *gorm.Session) ISmsDiyDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsDiyDo) Clauses(conds ...clause.Expression) ISmsDiyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsDiyDo) Returning(value interface{}, columns ...string) ISmsDiyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsDiyDo) Not(conds ...gen.Condition) ISmsDiyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsDiyDo) Or(conds ...gen.Condition) ISmsDiyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsDiyDo) Select(conds ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsDiyDo) Where(conds ...gen.Condition) ISmsDiyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsDiyDo) Order(conds ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsDiyDo) Distinct(cols ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsDiyDo) Omit(cols ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsDiyDo) Join(table schema.Tabler, on ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsDiyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsDiyDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsDiyDo) Group(cols ...field.Expr) ISmsDiyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsDiyDo) Having(conds ...gen.Condition) ISmsDiyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsDiyDo) Limit(limit int) ISmsDiyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsDiyDo) Offset(offset int) ISmsDiyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsDiyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsDiyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsDiyDo) Unscoped() ISmsDiyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsDiyDo) Create(values ...*model.SmsDiy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsDiyDo) CreateInBatches(values []*model.SmsDiy, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsDiyDo) Save(values ...*model.SmsDiy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsDiyDo) First() (*model.SmsDiy, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsDiy), nil
	}
}

func (s smsDiyDo) Take() (*model.SmsDiy, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsDiy), nil
	}
}

func (s smsDiyDo) Last() (*model.SmsDiy, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsDiy), nil
	}
}

func (s smsDiyDo) Find() ([]*model.SmsDiy, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsDiy), err
}

func (s smsDiyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsDiy, err error) {
	buf := make([]*model.SmsDiy, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsDiyDo) FindInBatches(result *[]*model.SmsDiy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsDiyDo) Attrs(attrs ...field.AssignExpr) ISmsDiyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsDiyDo) Assign(attrs ...field.AssignExpr) ISmsDiyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsDiyDo) Joins(fields ...field.RelationField) ISmsDiyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsDiyDo) Preload(fields ...field.RelationField) ISmsDiyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsDiyDo) FirstOrInit() (*model.SmsDiy, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsDiy), nil
	}
}

func (s smsDiyDo) FirstOrCreate() (*model.SmsDiy, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsDiy), nil
	}
}

func (s smsDiyDo) FindByPage(offset int, limit int) (result []*model.SmsDiy, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsDiyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsDiyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsDiyDo) Delete(models ...*model.SmsDiy) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsDiyDo) withDO(do gen.Dao) *smsDiyDo {
	s.DO = *do.(*gen.DO)
	return s
}
