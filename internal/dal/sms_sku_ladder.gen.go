// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsSkuLadder(db *gorm.DB, opts ...gen.DOOption) smsSkuLadder {
	_smsSkuLadder := smsSkuLadder{}

	_smsSkuLadder.smsSkuLadderDo.UseDB(db, opts...)
	_smsSkuLadder.smsSkuLadderDo.UseModel(&model.SmsSkuLadder{})

	tableName := _smsSkuLadder.smsSkuLadderDo.TableName()
	_smsSkuLadder.ALL = field.NewAsterisk(tableName)
	_smsSkuLadder.ID = field.NewInt(tableName, "id")
	_smsSkuLadder.SkuID = field.NewInt64(tableName, "sku_id")
	_smsSkuLadder.FullCount = field.NewInt64(tableName, "full_count")
	_smsSkuLadder.Discount = field.NewInt64(tableName, "discount")
	_smsSkuLadder.Price = field.NewInt64(tableName, "price")
	_smsSkuLadder.IsSuper = field.NewInt8(tableName, "is_super")

	_smsSkuLadder.fillFieldMap()

	return _smsSkuLadder
}

type smsSkuLadder struct {
	smsSkuLadderDo

	ALL       field.Asterisk
	ID        field.Int   // ID
	SkuID     field.Int64 // sku_id
	FullCount field.Int64 // 满几件
	Discount  field.Int64 // 打几折
	Price     field.Int64 // 折后价
	IsSuper   field.Int8  // 是否叠加优惠

	fieldMap map[string]field.Expr
}

func (s smsSkuLadder) Table(newTableName string) *smsSkuLadder {
	s.smsSkuLadderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSkuLadder) As(alias string) *smsSkuLadder {
	s.smsSkuLadderDo.DO = *(s.smsSkuLadderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSkuLadder) updateTableName(table string) *smsSkuLadder {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.SkuID = field.NewInt64(table, "sku_id")
	s.FullCount = field.NewInt64(table, "full_count")
	s.Discount = field.NewInt64(table, "discount")
	s.Price = field.NewInt64(table, "price")
	s.IsSuper = field.NewInt8(table, "is_super")

	s.fillFieldMap()

	return s
}

func (s *smsSkuLadder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSkuLadder) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sku_id"] = s.SkuID
	s.fieldMap["full_count"] = s.FullCount
	s.fieldMap["discount"] = s.Discount
	s.fieldMap["price"] = s.Price
	s.fieldMap["is_super"] = s.IsSuper
}

func (s smsSkuLadder) clone(db *gorm.DB) smsSkuLadder {
	s.smsSkuLadderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSkuLadder) replaceDB(db *gorm.DB) smsSkuLadder {
	s.smsSkuLadderDo.ReplaceDB(db)
	return s
}

type smsSkuLadderDo struct{ gen.DO }

type ISmsSkuLadderDo interface {
	gen.SubQuery
	Debug() ISmsSkuLadderDo
	WithContext(ctx context.Context) ISmsSkuLadderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSkuLadderDo
	WriteDB() ISmsSkuLadderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSkuLadderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSkuLadderDo
	Not(conds ...gen.Condition) ISmsSkuLadderDo
	Or(conds ...gen.Condition) ISmsSkuLadderDo
	Select(conds ...field.Expr) ISmsSkuLadderDo
	Where(conds ...gen.Condition) ISmsSkuLadderDo
	Order(conds ...field.Expr) ISmsSkuLadderDo
	Distinct(cols ...field.Expr) ISmsSkuLadderDo
	Omit(cols ...field.Expr) ISmsSkuLadderDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSkuLadderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSkuLadderDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSkuLadderDo
	Group(cols ...field.Expr) ISmsSkuLadderDo
	Having(conds ...gen.Condition) ISmsSkuLadderDo
	Limit(limit int) ISmsSkuLadderDo
	Offset(offset int) ISmsSkuLadderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSkuLadderDo
	Unscoped() ISmsSkuLadderDo
	Create(values ...*model.SmsSkuLadder) error
	CreateInBatches(values []*model.SmsSkuLadder, batchSize int) error
	Save(values ...*model.SmsSkuLadder) error
	First() (*model.SmsSkuLadder, error)
	Take() (*model.SmsSkuLadder, error)
	Last() (*model.SmsSkuLadder, error)
	Find() ([]*model.SmsSkuLadder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSkuLadder, err error)
	FindInBatches(result *[]*model.SmsSkuLadder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSkuLadder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSkuLadderDo
	Assign(attrs ...field.AssignExpr) ISmsSkuLadderDo
	Joins(fields ...field.RelationField) ISmsSkuLadderDo
	Preload(fields ...field.RelationField) ISmsSkuLadderDo
	FirstOrInit() (*model.SmsSkuLadder, error)
	FirstOrCreate() (*model.SmsSkuLadder, error)
	FindByPage(offset int, limit int) (result []*model.SmsSkuLadder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSkuLadderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSkuLadderDo) Debug() ISmsSkuLadderDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSkuLadderDo) WithContext(ctx context.Context) ISmsSkuLadderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSkuLadderDo) ReadDB() ISmsSkuLadderDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSkuLadderDo) WriteDB() ISmsSkuLadderDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSkuLadderDo) Session(config *gorm.Session) ISmsSkuLadderDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSkuLadderDo) Clauses(conds ...clause.Expression) ISmsSkuLadderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSkuLadderDo) Returning(value interface{}, columns ...string) ISmsSkuLadderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSkuLadderDo) Not(conds ...gen.Condition) ISmsSkuLadderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSkuLadderDo) Or(conds ...gen.Condition) ISmsSkuLadderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSkuLadderDo) Select(conds ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSkuLadderDo) Where(conds ...gen.Condition) ISmsSkuLadderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSkuLadderDo) Order(conds ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSkuLadderDo) Distinct(cols ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSkuLadderDo) Omit(cols ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSkuLadderDo) Join(table schema.Tabler, on ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSkuLadderDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSkuLadderDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSkuLadderDo) Group(cols ...field.Expr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSkuLadderDo) Having(conds ...gen.Condition) ISmsSkuLadderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSkuLadderDo) Limit(limit int) ISmsSkuLadderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSkuLadderDo) Offset(offset int) ISmsSkuLadderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSkuLadderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSkuLadderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSkuLadderDo) Unscoped() ISmsSkuLadderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSkuLadderDo) Create(values ...*model.SmsSkuLadder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSkuLadderDo) CreateInBatches(values []*model.SmsSkuLadder, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSkuLadderDo) Save(values ...*model.SmsSkuLadder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSkuLadderDo) First() (*model.SmsSkuLadder, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuLadder), nil
	}
}

func (s smsSkuLadderDo) Take() (*model.SmsSkuLadder, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuLadder), nil
	}
}

func (s smsSkuLadderDo) Last() (*model.SmsSkuLadder, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuLadder), nil
	}
}

func (s smsSkuLadderDo) Find() ([]*model.SmsSkuLadder, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSkuLadder), err
}

func (s smsSkuLadderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSkuLadder, err error) {
	buf := make([]*model.SmsSkuLadder, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSkuLadderDo) FindInBatches(result *[]*model.SmsSkuLadder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSkuLadderDo) Attrs(attrs ...field.AssignExpr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSkuLadderDo) Assign(attrs ...field.AssignExpr) ISmsSkuLadderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSkuLadderDo) Joins(fields ...field.RelationField) ISmsSkuLadderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSkuLadderDo) Preload(fields ...field.RelationField) ISmsSkuLadderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSkuLadderDo) FirstOrInit() (*model.SmsSkuLadder, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuLadder), nil
	}
}

func (s smsSkuLadderDo) FirstOrCreate() (*model.SmsSkuLadder, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuLadder), nil
	}
}

func (s smsSkuLadderDo) FindByPage(offset int, limit int) (result []*model.SmsSkuLadder, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSkuLadderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSkuLadderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSkuLadderDo) Delete(models ...*model.SmsSkuLadder) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSkuLadderDo) withDO(do gen.Dao) *smsSkuLadderDo {
	s.DO = *do.(*gen.DO)
	return s
}
