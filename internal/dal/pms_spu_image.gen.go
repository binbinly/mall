// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsSpuImage(db *gorm.DB, opts ...gen.DOOption) pmsSpuImage {
	_pmsSpuImage := pmsSpuImage{}

	_pmsSpuImage.pmsSpuImageDo.UseDB(db, opts...)
	_pmsSpuImage.pmsSpuImageDo.UseModel(&model.PmsSpuImage{})

	tableName := _pmsSpuImage.pmsSpuImageDo.TableName()
	_pmsSpuImage.ALL = field.NewAsterisk(tableName)
	_pmsSpuImage.ID = field.NewInt64(tableName, "id")
	_pmsSpuImage.SpuID = field.NewInt64(tableName, "spu_id")
	_pmsSpuImage.Name = field.NewString(tableName, "name")
	_pmsSpuImage.Img = field.NewString(tableName, "img")
	_pmsSpuImage.IsDefault = field.NewInt8(tableName, "is_default")
	_pmsSpuImage.Sort = field.NewInt(tableName, "sort")

	_pmsSpuImage.fillFieldMap()

	return _pmsSpuImage
}

type pmsSpuImage struct {
	pmsSpuImageDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	SpuID     field.Int64  // spu_id
	Name      field.String // 图片名
	Img       field.String // 图片地址
	IsDefault field.Int8   // 是否默认
	Sort      field.Int    // 排序

	fieldMap map[string]field.Expr
}

func (p pmsSpuImage) Table(newTableName string) *pmsSpuImage {
	p.pmsSpuImageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSpuImage) As(alias string) *pmsSpuImage {
	p.pmsSpuImageDo.DO = *(p.pmsSpuImageDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSpuImage) updateTableName(table string) *pmsSpuImage {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpuID = field.NewInt64(table, "spu_id")
	p.Name = field.NewString(table, "name")
	p.Img = field.NewString(table, "img")
	p.IsDefault = field.NewInt8(table, "is_default")
	p.Sort = field.NewInt(table, "sort")

	p.fillFieldMap()

	return p
}

func (p *pmsSpuImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSpuImage) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["spu_id"] = p.SpuID
	p.fieldMap["name"] = p.Name
	p.fieldMap["img"] = p.Img
	p.fieldMap["is_default"] = p.IsDefault
	p.fieldMap["sort"] = p.Sort
}

func (p pmsSpuImage) clone(db *gorm.DB) pmsSpuImage {
	p.pmsSpuImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSpuImage) replaceDB(db *gorm.DB) pmsSpuImage {
	p.pmsSpuImageDo.ReplaceDB(db)
	return p
}

type pmsSpuImageDo struct{ gen.DO }

type IPmsSpuImageDo interface {
	gen.SubQuery
	Debug() IPmsSpuImageDo
	WithContext(ctx context.Context) IPmsSpuImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsSpuImageDo
	WriteDB() IPmsSpuImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsSpuImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsSpuImageDo
	Not(conds ...gen.Condition) IPmsSpuImageDo
	Or(conds ...gen.Condition) IPmsSpuImageDo
	Select(conds ...field.Expr) IPmsSpuImageDo
	Where(conds ...gen.Condition) IPmsSpuImageDo
	Order(conds ...field.Expr) IPmsSpuImageDo
	Distinct(cols ...field.Expr) IPmsSpuImageDo
	Omit(cols ...field.Expr) IPmsSpuImageDo
	Join(table schema.Tabler, on ...field.Expr) IPmsSpuImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuImageDo
	Group(cols ...field.Expr) IPmsSpuImageDo
	Having(conds ...gen.Condition) IPmsSpuImageDo
	Limit(limit int) IPmsSpuImageDo
	Offset(offset int) IPmsSpuImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuImageDo
	Unscoped() IPmsSpuImageDo
	Create(values ...*model.PmsSpuImage) error
	CreateInBatches(values []*model.PmsSpuImage, batchSize int) error
	Save(values ...*model.PmsSpuImage) error
	First() (*model.PmsSpuImage, error)
	Take() (*model.PmsSpuImage, error)
	Last() (*model.PmsSpuImage, error)
	Find() ([]*model.PmsSpuImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuImage, err error)
	FindInBatches(result *[]*model.PmsSpuImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsSpuImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsSpuImageDo
	Assign(attrs ...field.AssignExpr) IPmsSpuImageDo
	Joins(fields ...field.RelationField) IPmsSpuImageDo
	Preload(fields ...field.RelationField) IPmsSpuImageDo
	FirstOrInit() (*model.PmsSpuImage, error)
	FirstOrCreate() (*model.PmsSpuImage, error)
	FindByPage(offset int, limit int) (result []*model.PmsSpuImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsSpuImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsSpuImageDo) Debug() IPmsSpuImageDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSpuImageDo) WithContext(ctx context.Context) IPmsSpuImageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSpuImageDo) ReadDB() IPmsSpuImageDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSpuImageDo) WriteDB() IPmsSpuImageDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSpuImageDo) Session(config *gorm.Session) IPmsSpuImageDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSpuImageDo) Clauses(conds ...clause.Expression) IPmsSpuImageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSpuImageDo) Returning(value interface{}, columns ...string) IPmsSpuImageDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSpuImageDo) Not(conds ...gen.Condition) IPmsSpuImageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSpuImageDo) Or(conds ...gen.Condition) IPmsSpuImageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSpuImageDo) Select(conds ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSpuImageDo) Where(conds ...gen.Condition) IPmsSpuImageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSpuImageDo) Order(conds ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSpuImageDo) Distinct(cols ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSpuImageDo) Omit(cols ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSpuImageDo) Join(table schema.Tabler, on ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSpuImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSpuImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSpuImageDo) Group(cols ...field.Expr) IPmsSpuImageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSpuImageDo) Having(conds ...gen.Condition) IPmsSpuImageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSpuImageDo) Limit(limit int) IPmsSpuImageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSpuImageDo) Offset(offset int) IPmsSpuImageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSpuImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuImageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSpuImageDo) Unscoped() IPmsSpuImageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSpuImageDo) Create(values ...*model.PmsSpuImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSpuImageDo) CreateInBatches(values []*model.PmsSpuImage, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSpuImageDo) Save(values ...*model.PmsSpuImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSpuImageDo) First() (*model.PmsSpuImage, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuImage), nil
	}
}

func (p pmsSpuImageDo) Take() (*model.PmsSpuImage, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuImage), nil
	}
}

func (p pmsSpuImageDo) Last() (*model.PmsSpuImage, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuImage), nil
	}
}

func (p pmsSpuImageDo) Find() ([]*model.PmsSpuImage, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSpuImage), err
}

func (p pmsSpuImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuImage, err error) {
	buf := make([]*model.PmsSpuImage, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSpuImageDo) FindInBatches(result *[]*model.PmsSpuImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSpuImageDo) Attrs(attrs ...field.AssignExpr) IPmsSpuImageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSpuImageDo) Assign(attrs ...field.AssignExpr) IPmsSpuImageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSpuImageDo) Joins(fields ...field.RelationField) IPmsSpuImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSpuImageDo) Preload(fields ...field.RelationField) IPmsSpuImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSpuImageDo) FirstOrInit() (*model.PmsSpuImage, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuImage), nil
	}
}

func (p pmsSpuImageDo) FirstOrCreate() (*model.PmsSpuImage, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuImage), nil
	}
}

func (p pmsSpuImageDo) FindByPage(offset int, limit int) (result []*model.PmsSpuImage, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSpuImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSpuImageDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSpuImageDo) Delete(models ...*model.PmsSpuImage) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSpuImageDo) withDO(do gen.Dao) *pmsSpuImageDo {
	p.DO = *do.(*gen.DO)
	return p
}
