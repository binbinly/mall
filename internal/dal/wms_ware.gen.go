// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newWmsWare(db *gorm.DB, opts ...gen.DOOption) wmsWare {
	_wmsWare := wmsWare{}

	_wmsWare.wmsWareDo.UseDB(db, opts...)
	_wmsWare.wmsWareDo.UseModel(&model.WmsWare{})

	tableName := _wmsWare.wmsWareDo.TableName()
	_wmsWare.ALL = field.NewAsterisk(tableName)
	_wmsWare.ID = field.NewInt(tableName, "id")
	_wmsWare.Name = field.NewString(tableName, "name")
	_wmsWare.Address = field.NewString(tableName, "address")
	_wmsWare.AreaCode = field.NewInt(tableName, "area_code")
	_wmsWare.CreatedAt = field.NewInt(tableName, "created_at")
	_wmsWare.UpdatedAt = field.NewInt(tableName, "updated_at")

	_wmsWare.fillFieldMap()

	return _wmsWare
}

type wmsWare struct {
	wmsWareDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	Name      field.String // 仓库名
	Address   field.String // 仓库地址
	AreaCode  field.Int    // 最后一级地区编码
	CreatedAt field.Int    // 创建时间
	UpdatedAt field.Int    // 更新时间

	fieldMap map[string]field.Expr
}

func (w wmsWare) Table(newTableName string) *wmsWare {
	w.wmsWareDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wmsWare) As(alias string) *wmsWare {
	w.wmsWareDo.DO = *(w.wmsWareDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wmsWare) updateTableName(table string) *wmsWare {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt(table, "id")
	w.Name = field.NewString(table, "name")
	w.Address = field.NewString(table, "address")
	w.AreaCode = field.NewInt(table, "area_code")
	w.CreatedAt = field.NewInt(table, "created_at")
	w.UpdatedAt = field.NewInt(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *wmsWare) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wmsWare) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["name"] = w.Name
	w.fieldMap["address"] = w.Address
	w.fieldMap["area_code"] = w.AreaCode
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w wmsWare) clone(db *gorm.DB) wmsWare {
	w.wmsWareDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wmsWare) replaceDB(db *gorm.DB) wmsWare {
	w.wmsWareDo.ReplaceDB(db)
	return w
}

type wmsWareDo struct{ gen.DO }

type IWmsWareDo interface {
	gen.SubQuery
	Debug() IWmsWareDo
	WithContext(ctx context.Context) IWmsWareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWmsWareDo
	WriteDB() IWmsWareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWmsWareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWmsWareDo
	Not(conds ...gen.Condition) IWmsWareDo
	Or(conds ...gen.Condition) IWmsWareDo
	Select(conds ...field.Expr) IWmsWareDo
	Where(conds ...gen.Condition) IWmsWareDo
	Order(conds ...field.Expr) IWmsWareDo
	Distinct(cols ...field.Expr) IWmsWareDo
	Omit(cols ...field.Expr) IWmsWareDo
	Join(table schema.Tabler, on ...field.Expr) IWmsWareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareDo
	Group(cols ...field.Expr) IWmsWareDo
	Having(conds ...gen.Condition) IWmsWareDo
	Limit(limit int) IWmsWareDo
	Offset(offset int) IWmsWareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareDo
	Unscoped() IWmsWareDo
	Create(values ...*model.WmsWare) error
	CreateInBatches(values []*model.WmsWare, batchSize int) error
	Save(values ...*model.WmsWare) error
	First() (*model.WmsWare, error)
	Take() (*model.WmsWare, error)
	Last() (*model.WmsWare, error)
	Find() ([]*model.WmsWare, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWare, err error)
	FindInBatches(result *[]*model.WmsWare, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WmsWare) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWmsWareDo
	Assign(attrs ...field.AssignExpr) IWmsWareDo
	Joins(fields ...field.RelationField) IWmsWareDo
	Preload(fields ...field.RelationField) IWmsWareDo
	FirstOrInit() (*model.WmsWare, error)
	FirstOrCreate() (*model.WmsWare, error)
	FindByPage(offset int, limit int) (result []*model.WmsWare, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWmsWareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wmsWareDo) Debug() IWmsWareDo {
	return w.withDO(w.DO.Debug())
}

func (w wmsWareDo) WithContext(ctx context.Context) IWmsWareDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wmsWareDo) ReadDB() IWmsWareDo {
	return w.Clauses(dbresolver.Read)
}

func (w wmsWareDo) WriteDB() IWmsWareDo {
	return w.Clauses(dbresolver.Write)
}

func (w wmsWareDo) Session(config *gorm.Session) IWmsWareDo {
	return w.withDO(w.DO.Session(config))
}

func (w wmsWareDo) Clauses(conds ...clause.Expression) IWmsWareDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wmsWareDo) Returning(value interface{}, columns ...string) IWmsWareDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wmsWareDo) Not(conds ...gen.Condition) IWmsWareDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wmsWareDo) Or(conds ...gen.Condition) IWmsWareDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wmsWareDo) Select(conds ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wmsWareDo) Where(conds ...gen.Condition) IWmsWareDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wmsWareDo) Order(conds ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wmsWareDo) Distinct(cols ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wmsWareDo) Omit(cols ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wmsWareDo) Join(table schema.Tabler, on ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wmsWareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wmsWareDo) RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wmsWareDo) Group(cols ...field.Expr) IWmsWareDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wmsWareDo) Having(conds ...gen.Condition) IWmsWareDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wmsWareDo) Limit(limit int) IWmsWareDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wmsWareDo) Offset(offset int) IWmsWareDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wmsWareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wmsWareDo) Unscoped() IWmsWareDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wmsWareDo) Create(values ...*model.WmsWare) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wmsWareDo) CreateInBatches(values []*model.WmsWare, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wmsWareDo) Save(values ...*model.WmsWare) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wmsWareDo) First() (*model.WmsWare, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWare), nil
	}
}

func (w wmsWareDo) Take() (*model.WmsWare, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWare), nil
	}
}

func (w wmsWareDo) Last() (*model.WmsWare, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWare), nil
	}
}

func (w wmsWareDo) Find() ([]*model.WmsWare, error) {
	result, err := w.DO.Find()
	return result.([]*model.WmsWare), err
}

func (w wmsWareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWare, err error) {
	buf := make([]*model.WmsWare, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wmsWareDo) FindInBatches(result *[]*model.WmsWare, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wmsWareDo) Attrs(attrs ...field.AssignExpr) IWmsWareDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wmsWareDo) Assign(attrs ...field.AssignExpr) IWmsWareDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wmsWareDo) Joins(fields ...field.RelationField) IWmsWareDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wmsWareDo) Preload(fields ...field.RelationField) IWmsWareDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wmsWareDo) FirstOrInit() (*model.WmsWare, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWare), nil
	}
}

func (w wmsWareDo) FirstOrCreate() (*model.WmsWare, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWare), nil
	}
}

func (w wmsWareDo) FindByPage(offset int, limit int) (result []*model.WmsWare, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wmsWareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wmsWareDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wmsWareDo) Delete(models ...*model.WmsWare) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wmsWareDo) withDO(do gen.Dao) *wmsWareDo {
	w.DO = *do.(*gen.DO)
	return w
}
