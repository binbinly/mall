// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsSkuImage(db *gorm.DB, opts ...gen.DOOption) pmsSkuImage {
	_pmsSkuImage := pmsSkuImage{}

	_pmsSkuImage.pmsSkuImageDo.UseDB(db, opts...)
	_pmsSkuImage.pmsSkuImageDo.UseModel(&model.PmsSkuImage{})

	tableName := _pmsSkuImage.pmsSkuImageDo.TableName()
	_pmsSkuImage.ALL = field.NewAsterisk(tableName)
	_pmsSkuImage.ID = field.NewInt64(tableName, "id")
	_pmsSkuImage.SkuID = field.NewInt64(tableName, "sku_id")
	_pmsSkuImage.Img = field.NewString(tableName, "img")
	_pmsSkuImage.IsDefault = field.NewInt8(tableName, "is_default")
	_pmsSkuImage.Sort = field.NewInt(tableName, "sort")

	_pmsSkuImage.fillFieldMap()

	return _pmsSkuImage
}

type pmsSkuImage struct {
	pmsSkuImageDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	SkuID     field.Int64  // sku_id
	Img       field.String // 图片地址
	IsDefault field.Int8   // 是否默认
	Sort      field.Int    // 排序

	fieldMap map[string]field.Expr
}

func (p pmsSkuImage) Table(newTableName string) *pmsSkuImage {
	p.pmsSkuImageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSkuImage) As(alias string) *pmsSkuImage {
	p.pmsSkuImageDo.DO = *(p.pmsSkuImageDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSkuImage) updateTableName(table string) *pmsSkuImage {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SkuID = field.NewInt64(table, "sku_id")
	p.Img = field.NewString(table, "img")
	p.IsDefault = field.NewInt8(table, "is_default")
	p.Sort = field.NewInt(table, "sort")

	p.fillFieldMap()

	return p
}

func (p *pmsSkuImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSkuImage) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["sku_id"] = p.SkuID
	p.fieldMap["img"] = p.Img
	p.fieldMap["is_default"] = p.IsDefault
	p.fieldMap["sort"] = p.Sort
}

func (p pmsSkuImage) clone(db *gorm.DB) pmsSkuImage {
	p.pmsSkuImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSkuImage) replaceDB(db *gorm.DB) pmsSkuImage {
	p.pmsSkuImageDo.ReplaceDB(db)
	return p
}

type pmsSkuImageDo struct{ gen.DO }

type IPmsSkuImageDo interface {
	gen.SubQuery
	Debug() IPmsSkuImageDo
	WithContext(ctx context.Context) IPmsSkuImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsSkuImageDo
	WriteDB() IPmsSkuImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsSkuImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsSkuImageDo
	Not(conds ...gen.Condition) IPmsSkuImageDo
	Or(conds ...gen.Condition) IPmsSkuImageDo
	Select(conds ...field.Expr) IPmsSkuImageDo
	Where(conds ...gen.Condition) IPmsSkuImageDo
	Order(conds ...field.Expr) IPmsSkuImageDo
	Distinct(cols ...field.Expr) IPmsSkuImageDo
	Omit(cols ...field.Expr) IPmsSkuImageDo
	Join(table schema.Tabler, on ...field.Expr) IPmsSkuImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSkuImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsSkuImageDo
	Group(cols ...field.Expr) IPmsSkuImageDo
	Having(conds ...gen.Condition) IPmsSkuImageDo
	Limit(limit int) IPmsSkuImageDo
	Offset(offset int) IPmsSkuImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSkuImageDo
	Unscoped() IPmsSkuImageDo
	Create(values ...*model.PmsSkuImage) error
	CreateInBatches(values []*model.PmsSkuImage, batchSize int) error
	Save(values ...*model.PmsSkuImage) error
	First() (*model.PmsSkuImage, error)
	Take() (*model.PmsSkuImage, error)
	Last() (*model.PmsSkuImage, error)
	Find() ([]*model.PmsSkuImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSkuImage, err error)
	FindInBatches(result *[]*model.PmsSkuImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsSkuImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsSkuImageDo
	Assign(attrs ...field.AssignExpr) IPmsSkuImageDo
	Joins(fields ...field.RelationField) IPmsSkuImageDo
	Preload(fields ...field.RelationField) IPmsSkuImageDo
	FirstOrInit() (*model.PmsSkuImage, error)
	FirstOrCreate() (*model.PmsSkuImage, error)
	FindByPage(offset int, limit int) (result []*model.PmsSkuImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsSkuImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsSkuImageDo) Debug() IPmsSkuImageDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSkuImageDo) WithContext(ctx context.Context) IPmsSkuImageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSkuImageDo) ReadDB() IPmsSkuImageDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSkuImageDo) WriteDB() IPmsSkuImageDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSkuImageDo) Session(config *gorm.Session) IPmsSkuImageDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSkuImageDo) Clauses(conds ...clause.Expression) IPmsSkuImageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSkuImageDo) Returning(value interface{}, columns ...string) IPmsSkuImageDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSkuImageDo) Not(conds ...gen.Condition) IPmsSkuImageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSkuImageDo) Or(conds ...gen.Condition) IPmsSkuImageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSkuImageDo) Select(conds ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSkuImageDo) Where(conds ...gen.Condition) IPmsSkuImageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSkuImageDo) Order(conds ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSkuImageDo) Distinct(cols ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSkuImageDo) Omit(cols ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSkuImageDo) Join(table schema.Tabler, on ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSkuImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSkuImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSkuImageDo) Group(cols ...field.Expr) IPmsSkuImageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSkuImageDo) Having(conds ...gen.Condition) IPmsSkuImageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSkuImageDo) Limit(limit int) IPmsSkuImageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSkuImageDo) Offset(offset int) IPmsSkuImageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSkuImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSkuImageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSkuImageDo) Unscoped() IPmsSkuImageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSkuImageDo) Create(values ...*model.PmsSkuImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSkuImageDo) CreateInBatches(values []*model.PmsSkuImage, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSkuImageDo) Save(values ...*model.PmsSkuImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSkuImageDo) First() (*model.PmsSkuImage, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) Take() (*model.PmsSkuImage, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) Last() (*model.PmsSkuImage, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) Find() ([]*model.PmsSkuImage, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSkuImage), err
}

func (p pmsSkuImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSkuImage, err error) {
	buf := make([]*model.PmsSkuImage, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSkuImageDo) FindInBatches(result *[]*model.PmsSkuImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSkuImageDo) Attrs(attrs ...field.AssignExpr) IPmsSkuImageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSkuImageDo) Assign(attrs ...field.AssignExpr) IPmsSkuImageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSkuImageDo) Joins(fields ...field.RelationField) IPmsSkuImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSkuImageDo) Preload(fields ...field.RelationField) IPmsSkuImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSkuImageDo) FirstOrInit() (*model.PmsSkuImage, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) FirstOrCreate() (*model.PmsSkuImage, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) FindByPage(offset int, limit int) (result []*model.PmsSkuImage, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSkuImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSkuImageDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSkuImageDo) Delete(models ...*model.PmsSkuImage) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSkuImageDo) withDO(do gen.Dao) *pmsSkuImageDo {
	p.DO = *do.(*gen.DO)
	return p
}
