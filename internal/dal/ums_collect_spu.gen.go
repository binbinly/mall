// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newUmsCollectSpu(db *gorm.DB, opts ...gen.DOOption) umsCollectSpu {
	_umsCollectSpu := umsCollectSpu{}

	_umsCollectSpu.umsCollectSpuDo.UseDB(db, opts...)
	_umsCollectSpu.umsCollectSpuDo.UseModel(&model.UmsCollectSpu{})

	tableName := _umsCollectSpu.umsCollectSpuDo.TableName()
	_umsCollectSpu.ALL = field.NewAsterisk(tableName)
	_umsCollectSpu.ID = field.NewInt(tableName, "id")
	_umsCollectSpu.MemberID = field.NewInt(tableName, "member_id")
	_umsCollectSpu.SpuID = field.NewInt64(tableName, "spu_id")
	_umsCollectSpu.SpuName = field.NewString(tableName, "spu_name")
	_umsCollectSpu.SpuImg = field.NewString(tableName, "spu_img")
	_umsCollectSpu.CreatedAt = field.NewInt(tableName, "created_at")
	_umsCollectSpu.DeletedAt = field.NewField(tableName, "deleted_at")

	_umsCollectSpu.fillFieldMap()

	return _umsCollectSpu
}

type umsCollectSpu struct {
	umsCollectSpuDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	MemberID  field.Int    // 用户id
	SpuID     field.Int64  // spu_id
	SpuName   field.String // spu_name
	SpuImg    field.String // spu_img
	CreatedAt field.Int    // 创建时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u umsCollectSpu) Table(newTableName string) *umsCollectSpu {
	u.umsCollectSpuDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsCollectSpu) As(alias string) *umsCollectSpu {
	u.umsCollectSpuDo.DO = *(u.umsCollectSpuDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsCollectSpu) updateTableName(table string) *umsCollectSpu {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.MemberID = field.NewInt(table, "member_id")
	u.SpuID = field.NewInt64(table, "spu_id")
	u.SpuName = field.NewString(table, "spu_name")
	u.SpuImg = field.NewString(table, "spu_img")
	u.CreatedAt = field.NewInt(table, "created_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *umsCollectSpu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsCollectSpu) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["spu_id"] = u.SpuID
	u.fieldMap["spu_name"] = u.SpuName
	u.fieldMap["spu_img"] = u.SpuImg
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u umsCollectSpu) clone(db *gorm.DB) umsCollectSpu {
	u.umsCollectSpuDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsCollectSpu) replaceDB(db *gorm.DB) umsCollectSpu {
	u.umsCollectSpuDo.ReplaceDB(db)
	return u
}

type umsCollectSpuDo struct{ gen.DO }

type IUmsCollectSpuDo interface {
	gen.SubQuery
	Debug() IUmsCollectSpuDo
	WithContext(ctx context.Context) IUmsCollectSpuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsCollectSpuDo
	WriteDB() IUmsCollectSpuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsCollectSpuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsCollectSpuDo
	Not(conds ...gen.Condition) IUmsCollectSpuDo
	Or(conds ...gen.Condition) IUmsCollectSpuDo
	Select(conds ...field.Expr) IUmsCollectSpuDo
	Where(conds ...gen.Condition) IUmsCollectSpuDo
	Order(conds ...field.Expr) IUmsCollectSpuDo
	Distinct(cols ...field.Expr) IUmsCollectSpuDo
	Omit(cols ...field.Expr) IUmsCollectSpuDo
	Join(table schema.Tabler, on ...field.Expr) IUmsCollectSpuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSpuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSpuDo
	Group(cols ...field.Expr) IUmsCollectSpuDo
	Having(conds ...gen.Condition) IUmsCollectSpuDo
	Limit(limit int) IUmsCollectSpuDo
	Offset(offset int) IUmsCollectSpuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsCollectSpuDo
	Unscoped() IUmsCollectSpuDo
	Create(values ...*model.UmsCollectSpu) error
	CreateInBatches(values []*model.UmsCollectSpu, batchSize int) error
	Save(values ...*model.UmsCollectSpu) error
	First() (*model.UmsCollectSpu, error)
	Take() (*model.UmsCollectSpu, error)
	Last() (*model.UmsCollectSpu, error)
	Find() ([]*model.UmsCollectSpu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsCollectSpu, err error)
	FindInBatches(result *[]*model.UmsCollectSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsCollectSpu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsCollectSpuDo
	Assign(attrs ...field.AssignExpr) IUmsCollectSpuDo
	Joins(fields ...field.RelationField) IUmsCollectSpuDo
	Preload(fields ...field.RelationField) IUmsCollectSpuDo
	FirstOrInit() (*model.UmsCollectSpu, error)
	FirstOrCreate() (*model.UmsCollectSpu, error)
	FindByPage(offset int, limit int) (result []*model.UmsCollectSpu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsCollectSpuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsCollectSpuDo) Debug() IUmsCollectSpuDo {
	return u.withDO(u.DO.Debug())
}

func (u umsCollectSpuDo) WithContext(ctx context.Context) IUmsCollectSpuDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsCollectSpuDo) ReadDB() IUmsCollectSpuDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsCollectSpuDo) WriteDB() IUmsCollectSpuDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsCollectSpuDo) Session(config *gorm.Session) IUmsCollectSpuDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsCollectSpuDo) Clauses(conds ...clause.Expression) IUmsCollectSpuDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsCollectSpuDo) Returning(value interface{}, columns ...string) IUmsCollectSpuDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsCollectSpuDo) Not(conds ...gen.Condition) IUmsCollectSpuDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsCollectSpuDo) Or(conds ...gen.Condition) IUmsCollectSpuDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsCollectSpuDo) Select(conds ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsCollectSpuDo) Where(conds ...gen.Condition) IUmsCollectSpuDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsCollectSpuDo) Order(conds ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsCollectSpuDo) Distinct(cols ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsCollectSpuDo) Omit(cols ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsCollectSpuDo) Join(table schema.Tabler, on ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsCollectSpuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsCollectSpuDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsCollectSpuDo) Group(cols ...field.Expr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsCollectSpuDo) Having(conds ...gen.Condition) IUmsCollectSpuDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsCollectSpuDo) Limit(limit int) IUmsCollectSpuDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsCollectSpuDo) Offset(offset int) IUmsCollectSpuDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsCollectSpuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsCollectSpuDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsCollectSpuDo) Unscoped() IUmsCollectSpuDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsCollectSpuDo) Create(values ...*model.UmsCollectSpu) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsCollectSpuDo) CreateInBatches(values []*model.UmsCollectSpu, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsCollectSpuDo) Save(values ...*model.UmsCollectSpu) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsCollectSpuDo) First() (*model.UmsCollectSpu, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSpu), nil
	}
}

func (u umsCollectSpuDo) Take() (*model.UmsCollectSpu, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSpu), nil
	}
}

func (u umsCollectSpuDo) Last() (*model.UmsCollectSpu, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSpu), nil
	}
}

func (u umsCollectSpuDo) Find() ([]*model.UmsCollectSpu, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsCollectSpu), err
}

func (u umsCollectSpuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsCollectSpu, err error) {
	buf := make([]*model.UmsCollectSpu, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsCollectSpuDo) FindInBatches(result *[]*model.UmsCollectSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsCollectSpuDo) Attrs(attrs ...field.AssignExpr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsCollectSpuDo) Assign(attrs ...field.AssignExpr) IUmsCollectSpuDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsCollectSpuDo) Joins(fields ...field.RelationField) IUmsCollectSpuDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsCollectSpuDo) Preload(fields ...field.RelationField) IUmsCollectSpuDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsCollectSpuDo) FirstOrInit() (*model.UmsCollectSpu, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSpu), nil
	}
}

func (u umsCollectSpuDo) FirstOrCreate() (*model.UmsCollectSpu, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSpu), nil
	}
}

func (u umsCollectSpuDo) FindByPage(offset int, limit int) (result []*model.UmsCollectSpu, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsCollectSpuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsCollectSpuDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsCollectSpuDo) Delete(models ...*model.UmsCollectSpu) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsCollectSpuDo) withDO(do gen.Dao) *umsCollectSpuDo {
	u.DO = *do.(*gen.DO)
	return u
}
