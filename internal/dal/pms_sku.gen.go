// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsSku(db *gorm.DB, opts ...gen.DOOption) pmsSku {
	_pmsSku := pmsSku{}

	_pmsSku.pmsSkuDo.UseDB(db, opts...)
	_pmsSku.pmsSkuDo.UseModel(&model.PmsSku{})

	tableName := _pmsSku.pmsSkuDo.TableName()
	_pmsSku.ALL = field.NewAsterisk(tableName)
	_pmsSku.ID = field.NewInt(tableName, "id")
	_pmsSku.SpuID = field.NewInt(tableName, "spu_id")
	_pmsSku.CatID = field.NewInt(tableName, "cat_id")
	_pmsSku.BrandID = field.NewInt(tableName, "brand_id")
	_pmsSku.Name = field.NewString(tableName, "name")
	_pmsSku.AttrValue = field.NewString(tableName, "attr_value")
	_pmsSku.Cover = field.NewString(tableName, "cover")
	_pmsSku.Price = field.NewInt(tableName, "price")
	_pmsSku.OtPrice = field.NewInt(tableName, "ot_price")
	_pmsSku.SaleCount = field.NewInt(tableName, "sale_count")
	_pmsSku.CostPrice = field.NewInt(tableName, "cost_price")
	_pmsSku.ReviewCount = field.NewInt(tableName, "review_count")
	_pmsSku.BarCode = field.NewString(tableName, "bar_code")
	_pmsSku.Stock = field.NewInt(tableName, "stock")

	_pmsSku.fillFieldMap()

	return _pmsSku
}

type pmsSku struct {
	pmsSkuDo

	ALL         field.Asterisk
	ID          field.Int    // ID
	SpuID       field.Int    // spu_id
	CatID       field.Int    // 产品分类
	BrandID     field.Int    // 品牌id
	Name        field.String // sku名称
	AttrValue   field.String // 销售属性值
	Cover       field.String // 默认图片
	Price       field.Int    // 价格
	OtPrice     field.Int    // 市场价
	SaleCount   field.Int    // 销量
	CostPrice   field.Int    // 成本价
	ReviewCount field.Int    // 评论数
	BarCode     field.String // sku条码
	Stock       field.Int    // 库存

	fieldMap map[string]field.Expr
}

func (p pmsSku) Table(newTableName string) *pmsSku {
	p.pmsSkuDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSku) As(alias string) *pmsSku {
	p.pmsSkuDo.DO = *(p.pmsSkuDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSku) updateTableName(table string) *pmsSku {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.SpuID = field.NewInt(table, "spu_id")
	p.CatID = field.NewInt(table, "cat_id")
	p.BrandID = field.NewInt(table, "brand_id")
	p.Name = field.NewString(table, "name")
	p.AttrValue = field.NewString(table, "attr_value")
	p.Cover = field.NewString(table, "cover")
	p.Price = field.NewInt(table, "price")
	p.OtPrice = field.NewInt(table, "ot_price")
	p.SaleCount = field.NewInt(table, "sale_count")
	p.CostPrice = field.NewInt(table, "cost_price")
	p.ReviewCount = field.NewInt(table, "review_count")
	p.BarCode = field.NewString(table, "bar_code")
	p.Stock = field.NewInt(table, "stock")

	p.fillFieldMap()

	return p
}

func (p *pmsSku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSku) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["spu_id"] = p.SpuID
	p.fieldMap["cat_id"] = p.CatID
	p.fieldMap["brand_id"] = p.BrandID
	p.fieldMap["name"] = p.Name
	p.fieldMap["attr_value"] = p.AttrValue
	p.fieldMap["cover"] = p.Cover
	p.fieldMap["price"] = p.Price
	p.fieldMap["ot_price"] = p.OtPrice
	p.fieldMap["sale_count"] = p.SaleCount
	p.fieldMap["cost_price"] = p.CostPrice
	p.fieldMap["review_count"] = p.ReviewCount
	p.fieldMap["bar_code"] = p.BarCode
	p.fieldMap["stock"] = p.Stock
}

func (p pmsSku) clone(db *gorm.DB) pmsSku {
	p.pmsSkuDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSku) replaceDB(db *gorm.DB) pmsSku {
	p.pmsSkuDo.ReplaceDB(db)
	return p
}

type pmsSkuDo struct{ gen.DO }

type IPmsSkuDo interface {
	gen.SubQuery
	Debug() IPmsSkuDo
	WithContext(ctx context.Context) IPmsSkuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsSkuDo
	WriteDB() IPmsSkuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsSkuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsSkuDo
	Not(conds ...gen.Condition) IPmsSkuDo
	Or(conds ...gen.Condition) IPmsSkuDo
	Select(conds ...field.Expr) IPmsSkuDo
	Where(conds ...gen.Condition) IPmsSkuDo
	Order(conds ...field.Expr) IPmsSkuDo
	Distinct(cols ...field.Expr) IPmsSkuDo
	Omit(cols ...field.Expr) IPmsSkuDo
	Join(table schema.Tabler, on ...field.Expr) IPmsSkuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSkuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsSkuDo
	Group(cols ...field.Expr) IPmsSkuDo
	Having(conds ...gen.Condition) IPmsSkuDo
	Limit(limit int) IPmsSkuDo
	Offset(offset int) IPmsSkuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSkuDo
	Unscoped() IPmsSkuDo
	Create(values ...*model.PmsSku) error
	CreateInBatches(values []*model.PmsSku, batchSize int) error
	Save(values ...*model.PmsSku) error
	First() (*model.PmsSku, error)
	Take() (*model.PmsSku, error)
	Last() (*model.PmsSku, error)
	Find() ([]*model.PmsSku, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSku, err error)
	FindInBatches(result *[]*model.PmsSku, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsSku) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsSkuDo
	Assign(attrs ...field.AssignExpr) IPmsSkuDo
	Joins(fields ...field.RelationField) IPmsSkuDo
	Preload(fields ...field.RelationField) IPmsSkuDo
	FirstOrInit() (*model.PmsSku, error)
	FirstOrCreate() (*model.PmsSku, error)
	FindByPage(offset int, limit int) (result []*model.PmsSku, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsSkuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsSkuDo) Debug() IPmsSkuDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSkuDo) WithContext(ctx context.Context) IPmsSkuDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSkuDo) ReadDB() IPmsSkuDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSkuDo) WriteDB() IPmsSkuDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSkuDo) Session(config *gorm.Session) IPmsSkuDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSkuDo) Clauses(conds ...clause.Expression) IPmsSkuDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSkuDo) Returning(value interface{}, columns ...string) IPmsSkuDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSkuDo) Not(conds ...gen.Condition) IPmsSkuDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSkuDo) Or(conds ...gen.Condition) IPmsSkuDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSkuDo) Select(conds ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSkuDo) Where(conds ...gen.Condition) IPmsSkuDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSkuDo) Order(conds ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSkuDo) Distinct(cols ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSkuDo) Omit(cols ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSkuDo) Join(table schema.Tabler, on ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSkuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSkuDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSkuDo) Group(cols ...field.Expr) IPmsSkuDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSkuDo) Having(conds ...gen.Condition) IPmsSkuDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSkuDo) Limit(limit int) IPmsSkuDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSkuDo) Offset(offset int) IPmsSkuDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSkuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSkuDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSkuDo) Unscoped() IPmsSkuDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSkuDo) Create(values ...*model.PmsSku) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSkuDo) CreateInBatches(values []*model.PmsSku, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSkuDo) Save(values ...*model.PmsSku) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSkuDo) First() (*model.PmsSku, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSku), nil
	}
}

func (p pmsSkuDo) Take() (*model.PmsSku, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSku), nil
	}
}

func (p pmsSkuDo) Last() (*model.PmsSku, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSku), nil
	}
}

func (p pmsSkuDo) Find() ([]*model.PmsSku, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSku), err
}

func (p pmsSkuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSku, err error) {
	buf := make([]*model.PmsSku, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSkuDo) FindInBatches(result *[]*model.PmsSku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSkuDo) Attrs(attrs ...field.AssignExpr) IPmsSkuDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSkuDo) Assign(attrs ...field.AssignExpr) IPmsSkuDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSkuDo) Joins(fields ...field.RelationField) IPmsSkuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSkuDo) Preload(fields ...field.RelationField) IPmsSkuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSkuDo) FirstOrInit() (*model.PmsSku, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSku), nil
	}
}

func (p pmsSkuDo) FirstOrCreate() (*model.PmsSku, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSku), nil
	}
}

func (p pmsSkuDo) FindByPage(offset int, limit int) (result []*model.PmsSku, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSkuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSkuDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSkuDo) Delete(models ...*model.PmsSku) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSkuDo) withDO(do gen.Dao) *pmsSkuDo {
	p.DO = *do.(*gen.DO)
	return p
}
