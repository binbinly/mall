// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsSkuFullReduction(db *gorm.DB, opts ...gen.DOOption) smsSkuFullReduction {
	_smsSkuFullReduction := smsSkuFullReduction{}

	_smsSkuFullReduction.smsSkuFullReductionDo.UseDB(db, opts...)
	_smsSkuFullReduction.smsSkuFullReductionDo.UseModel(&model.SmsSkuFullReduction{})

	tableName := _smsSkuFullReduction.smsSkuFullReductionDo.TableName()
	_smsSkuFullReduction.ALL = field.NewAsterisk(tableName)
	_smsSkuFullReduction.ID = field.NewInt(tableName, "id")
	_smsSkuFullReduction.SkuID = field.NewInt64(tableName, "sku_id")
	_smsSkuFullReduction.FullPrice = field.NewInt64(tableName, "full_price")
	_smsSkuFullReduction.ReducePrice = field.NewInt64(tableName, "reduce_price")
	_smsSkuFullReduction.IsSuper = field.NewInt8(tableName, "is_super")

	_smsSkuFullReduction.fillFieldMap()

	return _smsSkuFullReduction
}

type smsSkuFullReduction struct {
	smsSkuFullReductionDo

	ALL         field.Asterisk
	ID          field.Int   // ID
	SkuID       field.Int64 // sku_id
	FullPrice   field.Int64 // 满多少
	ReducePrice field.Int64 // 减多少
	IsSuper     field.Int8  // 是否叠加优惠

	fieldMap map[string]field.Expr
}

func (s smsSkuFullReduction) Table(newTableName string) *smsSkuFullReduction {
	s.smsSkuFullReductionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSkuFullReduction) As(alias string) *smsSkuFullReduction {
	s.smsSkuFullReductionDo.DO = *(s.smsSkuFullReductionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSkuFullReduction) updateTableName(table string) *smsSkuFullReduction {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.SkuID = field.NewInt64(table, "sku_id")
	s.FullPrice = field.NewInt64(table, "full_price")
	s.ReducePrice = field.NewInt64(table, "reduce_price")
	s.IsSuper = field.NewInt8(table, "is_super")

	s.fillFieldMap()

	return s
}

func (s *smsSkuFullReduction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSkuFullReduction) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sku_id"] = s.SkuID
	s.fieldMap["full_price"] = s.FullPrice
	s.fieldMap["reduce_price"] = s.ReducePrice
	s.fieldMap["is_super"] = s.IsSuper
}

func (s smsSkuFullReduction) clone(db *gorm.DB) smsSkuFullReduction {
	s.smsSkuFullReductionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSkuFullReduction) replaceDB(db *gorm.DB) smsSkuFullReduction {
	s.smsSkuFullReductionDo.ReplaceDB(db)
	return s
}

type smsSkuFullReductionDo struct{ gen.DO }

type ISmsSkuFullReductionDo interface {
	gen.SubQuery
	Debug() ISmsSkuFullReductionDo
	WithContext(ctx context.Context) ISmsSkuFullReductionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSkuFullReductionDo
	WriteDB() ISmsSkuFullReductionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSkuFullReductionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSkuFullReductionDo
	Not(conds ...gen.Condition) ISmsSkuFullReductionDo
	Or(conds ...gen.Condition) ISmsSkuFullReductionDo
	Select(conds ...field.Expr) ISmsSkuFullReductionDo
	Where(conds ...gen.Condition) ISmsSkuFullReductionDo
	Order(conds ...field.Expr) ISmsSkuFullReductionDo
	Distinct(cols ...field.Expr) ISmsSkuFullReductionDo
	Omit(cols ...field.Expr) ISmsSkuFullReductionDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSkuFullReductionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSkuFullReductionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSkuFullReductionDo
	Group(cols ...field.Expr) ISmsSkuFullReductionDo
	Having(conds ...gen.Condition) ISmsSkuFullReductionDo
	Limit(limit int) ISmsSkuFullReductionDo
	Offset(offset int) ISmsSkuFullReductionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSkuFullReductionDo
	Unscoped() ISmsSkuFullReductionDo
	Create(values ...*model.SmsSkuFullReduction) error
	CreateInBatches(values []*model.SmsSkuFullReduction, batchSize int) error
	Save(values ...*model.SmsSkuFullReduction) error
	First() (*model.SmsSkuFullReduction, error)
	Take() (*model.SmsSkuFullReduction, error)
	Last() (*model.SmsSkuFullReduction, error)
	Find() ([]*model.SmsSkuFullReduction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSkuFullReduction, err error)
	FindInBatches(result *[]*model.SmsSkuFullReduction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSkuFullReduction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSkuFullReductionDo
	Assign(attrs ...field.AssignExpr) ISmsSkuFullReductionDo
	Joins(fields ...field.RelationField) ISmsSkuFullReductionDo
	Preload(fields ...field.RelationField) ISmsSkuFullReductionDo
	FirstOrInit() (*model.SmsSkuFullReduction, error)
	FirstOrCreate() (*model.SmsSkuFullReduction, error)
	FindByPage(offset int, limit int) (result []*model.SmsSkuFullReduction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSkuFullReductionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSkuFullReductionDo) Debug() ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSkuFullReductionDo) WithContext(ctx context.Context) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSkuFullReductionDo) ReadDB() ISmsSkuFullReductionDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSkuFullReductionDo) WriteDB() ISmsSkuFullReductionDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSkuFullReductionDo) Session(config *gorm.Session) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSkuFullReductionDo) Clauses(conds ...clause.Expression) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSkuFullReductionDo) Returning(value interface{}, columns ...string) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSkuFullReductionDo) Not(conds ...gen.Condition) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSkuFullReductionDo) Or(conds ...gen.Condition) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSkuFullReductionDo) Select(conds ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSkuFullReductionDo) Where(conds ...gen.Condition) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSkuFullReductionDo) Order(conds ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSkuFullReductionDo) Distinct(cols ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSkuFullReductionDo) Omit(cols ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSkuFullReductionDo) Join(table schema.Tabler, on ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSkuFullReductionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSkuFullReductionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSkuFullReductionDo) Group(cols ...field.Expr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSkuFullReductionDo) Having(conds ...gen.Condition) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSkuFullReductionDo) Limit(limit int) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSkuFullReductionDo) Offset(offset int) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSkuFullReductionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSkuFullReductionDo) Unscoped() ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSkuFullReductionDo) Create(values ...*model.SmsSkuFullReduction) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSkuFullReductionDo) CreateInBatches(values []*model.SmsSkuFullReduction, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSkuFullReductionDo) Save(values ...*model.SmsSkuFullReduction) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSkuFullReductionDo) First() (*model.SmsSkuFullReduction, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuFullReduction), nil
	}
}

func (s smsSkuFullReductionDo) Take() (*model.SmsSkuFullReduction, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuFullReduction), nil
	}
}

func (s smsSkuFullReductionDo) Last() (*model.SmsSkuFullReduction, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuFullReduction), nil
	}
}

func (s smsSkuFullReductionDo) Find() ([]*model.SmsSkuFullReduction, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSkuFullReduction), err
}

func (s smsSkuFullReductionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSkuFullReduction, err error) {
	buf := make([]*model.SmsSkuFullReduction, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSkuFullReductionDo) FindInBatches(result *[]*model.SmsSkuFullReduction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSkuFullReductionDo) Attrs(attrs ...field.AssignExpr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSkuFullReductionDo) Assign(attrs ...field.AssignExpr) ISmsSkuFullReductionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSkuFullReductionDo) Joins(fields ...field.RelationField) ISmsSkuFullReductionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSkuFullReductionDo) Preload(fields ...field.RelationField) ISmsSkuFullReductionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSkuFullReductionDo) FirstOrInit() (*model.SmsSkuFullReduction, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuFullReduction), nil
	}
}

func (s smsSkuFullReductionDo) FirstOrCreate() (*model.SmsSkuFullReduction, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSkuFullReduction), nil
	}
}

func (s smsSkuFullReductionDo) FindByPage(offset int, limit int) (result []*model.SmsSkuFullReduction, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSkuFullReductionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSkuFullReductionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSkuFullReductionDo) Delete(models ...*model.SmsSkuFullReduction) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSkuFullReductionDo) withDO(do gen.Dao) *smsSkuFullReductionDo {
	s.DO = *do.(*gen.DO)
	return s
}
