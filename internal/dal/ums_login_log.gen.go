// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newUmsLoginLog(db *gorm.DB, opts ...gen.DOOption) umsLoginLog {
	_umsLoginLog := umsLoginLog{}

	_umsLoginLog.umsLoginLogDo.UseDB(db, opts...)
	_umsLoginLog.umsLoginLogDo.UseModel(&model.UmsLoginLog{})

	tableName := _umsLoginLog.umsLoginLogDo.TableName()
	_umsLoginLog.ALL = field.NewAsterisk(tableName)
	_umsLoginLog.ID = field.NewInt(tableName, "id")
	_umsLoginLog.MemberID = field.NewInt(tableName, "member_id")
	_umsLoginLog.IP = field.NewString(tableName, "ip")
	_umsLoginLog.City = field.NewString(tableName, "city")
	_umsLoginLog.Type = field.NewInt8(tableName, "type")
	_umsLoginLog.CreatedAt = field.NewInt(tableName, "created_at")

	_umsLoginLog.fillFieldMap()

	return _umsLoginLog
}

type umsLoginLog struct {
	umsLoginLogDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	MemberID  field.Int    // 用户id
	IP        field.String // ip地址
	City      field.String // 城市
	Type      field.Int8   // 登录类型[1-web，2-app]
	CreatedAt field.Int    // 创建时间

	fieldMap map[string]field.Expr
}

func (u umsLoginLog) Table(newTableName string) *umsLoginLog {
	u.umsLoginLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsLoginLog) As(alias string) *umsLoginLog {
	u.umsLoginLogDo.DO = *(u.umsLoginLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsLoginLog) updateTableName(table string) *umsLoginLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.MemberID = field.NewInt(table, "member_id")
	u.IP = field.NewString(table, "ip")
	u.City = field.NewString(table, "city")
	u.Type = field.NewInt8(table, "type")
	u.CreatedAt = field.NewInt(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *umsLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsLoginLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["ip"] = u.IP
	u.fieldMap["city"] = u.City
	u.fieldMap["type"] = u.Type
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u umsLoginLog) clone(db *gorm.DB) umsLoginLog {
	u.umsLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsLoginLog) replaceDB(db *gorm.DB) umsLoginLog {
	u.umsLoginLogDo.ReplaceDB(db)
	return u
}

type umsLoginLogDo struct{ gen.DO }

type IUmsLoginLogDo interface {
	gen.SubQuery
	Debug() IUmsLoginLogDo
	WithContext(ctx context.Context) IUmsLoginLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsLoginLogDo
	WriteDB() IUmsLoginLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsLoginLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsLoginLogDo
	Not(conds ...gen.Condition) IUmsLoginLogDo
	Or(conds ...gen.Condition) IUmsLoginLogDo
	Select(conds ...field.Expr) IUmsLoginLogDo
	Where(conds ...gen.Condition) IUmsLoginLogDo
	Order(conds ...field.Expr) IUmsLoginLogDo
	Distinct(cols ...field.Expr) IUmsLoginLogDo
	Omit(cols ...field.Expr) IUmsLoginLogDo
	Join(table schema.Tabler, on ...field.Expr) IUmsLoginLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsLoginLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsLoginLogDo
	Group(cols ...field.Expr) IUmsLoginLogDo
	Having(conds ...gen.Condition) IUmsLoginLogDo
	Limit(limit int) IUmsLoginLogDo
	Offset(offset int) IUmsLoginLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsLoginLogDo
	Unscoped() IUmsLoginLogDo
	Create(values ...*model.UmsLoginLog) error
	CreateInBatches(values []*model.UmsLoginLog, batchSize int) error
	Save(values ...*model.UmsLoginLog) error
	First() (*model.UmsLoginLog, error)
	Take() (*model.UmsLoginLog, error)
	Last() (*model.UmsLoginLog, error)
	Find() ([]*model.UmsLoginLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsLoginLog, err error)
	FindInBatches(result *[]*model.UmsLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsLoginLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsLoginLogDo
	Assign(attrs ...field.AssignExpr) IUmsLoginLogDo
	Joins(fields ...field.RelationField) IUmsLoginLogDo
	Preload(fields ...field.RelationField) IUmsLoginLogDo
	FirstOrInit() (*model.UmsLoginLog, error)
	FirstOrCreate() (*model.UmsLoginLog, error)
	FindByPage(offset int, limit int) (result []*model.UmsLoginLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsLoginLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsLoginLogDo) Debug() IUmsLoginLogDo {
	return u.withDO(u.DO.Debug())
}

func (u umsLoginLogDo) WithContext(ctx context.Context) IUmsLoginLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsLoginLogDo) ReadDB() IUmsLoginLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsLoginLogDo) WriteDB() IUmsLoginLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsLoginLogDo) Session(config *gorm.Session) IUmsLoginLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsLoginLogDo) Clauses(conds ...clause.Expression) IUmsLoginLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsLoginLogDo) Returning(value interface{}, columns ...string) IUmsLoginLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsLoginLogDo) Not(conds ...gen.Condition) IUmsLoginLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsLoginLogDo) Or(conds ...gen.Condition) IUmsLoginLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsLoginLogDo) Select(conds ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsLoginLogDo) Where(conds ...gen.Condition) IUmsLoginLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsLoginLogDo) Order(conds ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsLoginLogDo) Distinct(cols ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsLoginLogDo) Omit(cols ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsLoginLogDo) Join(table schema.Tabler, on ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsLoginLogDo) Group(cols ...field.Expr) IUmsLoginLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsLoginLogDo) Having(conds ...gen.Condition) IUmsLoginLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsLoginLogDo) Limit(limit int) IUmsLoginLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsLoginLogDo) Offset(offset int) IUmsLoginLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsLoginLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsLoginLogDo) Unscoped() IUmsLoginLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsLoginLogDo) Create(values ...*model.UmsLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsLoginLogDo) CreateInBatches(values []*model.UmsLoginLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsLoginLogDo) Save(values ...*model.UmsLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsLoginLogDo) First() (*model.UmsLoginLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsLoginLog), nil
	}
}

func (u umsLoginLogDo) Take() (*model.UmsLoginLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsLoginLog), nil
	}
}

func (u umsLoginLogDo) Last() (*model.UmsLoginLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsLoginLog), nil
	}
}

func (u umsLoginLogDo) Find() ([]*model.UmsLoginLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsLoginLog), err
}

func (u umsLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsLoginLog, err error) {
	buf := make([]*model.UmsLoginLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsLoginLogDo) FindInBatches(result *[]*model.UmsLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsLoginLogDo) Attrs(attrs ...field.AssignExpr) IUmsLoginLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsLoginLogDo) Assign(attrs ...field.AssignExpr) IUmsLoginLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsLoginLogDo) Joins(fields ...field.RelationField) IUmsLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsLoginLogDo) Preload(fields ...field.RelationField) IUmsLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsLoginLogDo) FirstOrInit() (*model.UmsLoginLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsLoginLog), nil
	}
}

func (u umsLoginLogDo) FirstOrCreate() (*model.UmsLoginLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsLoginLog), nil
	}
}

func (u umsLoginLogDo) FindByPage(offset int, limit int) (result []*model.UmsLoginLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsLoginLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsLoginLogDo) Delete(models ...*model.UmsLoginLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsLoginLogDo) withDO(do gen.Dao) *umsLoginLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
