// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminPermissionMenu(db *gorm.DB, opts ...gen.DOOption) adminPermissionMenu {
	_adminPermissionMenu := adminPermissionMenu{}

	_adminPermissionMenu.adminPermissionMenuDo.UseDB(db, opts...)
	_adminPermissionMenu.adminPermissionMenuDo.UseModel(&model.AdminPermissionMenu{})

	tableName := _adminPermissionMenu.adminPermissionMenuDo.TableName()
	_adminPermissionMenu.ALL = field.NewAsterisk(tableName)
	_adminPermissionMenu.PermissionID = field.NewInt64(tableName, "permission_id")
	_adminPermissionMenu.MenuID = field.NewInt64(tableName, "menu_id")
	_adminPermissionMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_adminPermissionMenu.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminPermissionMenu.fillFieldMap()

	return _adminPermissionMenu
}

type adminPermissionMenu struct {
	adminPermissionMenuDo

	ALL          field.Asterisk
	PermissionID field.Int64
	MenuID       field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (a adminPermissionMenu) Table(newTableName string) *adminPermissionMenu {
	a.adminPermissionMenuDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminPermissionMenu) As(alias string) *adminPermissionMenu {
	a.adminPermissionMenuDo.DO = *(a.adminPermissionMenuDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminPermissionMenu) updateTableName(table string) *adminPermissionMenu {
	a.ALL = field.NewAsterisk(table)
	a.PermissionID = field.NewInt64(table, "permission_id")
	a.MenuID = field.NewInt64(table, "menu_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminPermissionMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminPermissionMenu) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["permission_id"] = a.PermissionID
	a.fieldMap["menu_id"] = a.MenuID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminPermissionMenu) clone(db *gorm.DB) adminPermissionMenu {
	a.adminPermissionMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminPermissionMenu) replaceDB(db *gorm.DB) adminPermissionMenu {
	a.adminPermissionMenuDo.ReplaceDB(db)
	return a
}

type adminPermissionMenuDo struct{ gen.DO }

type IAdminPermissionMenuDo interface {
	gen.SubQuery
	Debug() IAdminPermissionMenuDo
	WithContext(ctx context.Context) IAdminPermissionMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminPermissionMenuDo
	WriteDB() IAdminPermissionMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminPermissionMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminPermissionMenuDo
	Not(conds ...gen.Condition) IAdminPermissionMenuDo
	Or(conds ...gen.Condition) IAdminPermissionMenuDo
	Select(conds ...field.Expr) IAdminPermissionMenuDo
	Where(conds ...gen.Condition) IAdminPermissionMenuDo
	Order(conds ...field.Expr) IAdminPermissionMenuDo
	Distinct(cols ...field.Expr) IAdminPermissionMenuDo
	Omit(cols ...field.Expr) IAdminPermissionMenuDo
	Join(table schema.Tabler, on ...field.Expr) IAdminPermissionMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionMenuDo
	Group(cols ...field.Expr) IAdminPermissionMenuDo
	Having(conds ...gen.Condition) IAdminPermissionMenuDo
	Limit(limit int) IAdminPermissionMenuDo
	Offset(offset int) IAdminPermissionMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminPermissionMenuDo
	Unscoped() IAdminPermissionMenuDo
	Create(values ...*model.AdminPermissionMenu) error
	CreateInBatches(values []*model.AdminPermissionMenu, batchSize int) error
	Save(values ...*model.AdminPermissionMenu) error
	First() (*model.AdminPermissionMenu, error)
	Take() (*model.AdminPermissionMenu, error)
	Last() (*model.AdminPermissionMenu, error)
	Find() ([]*model.AdminPermissionMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminPermissionMenu, err error)
	FindInBatches(result *[]*model.AdminPermissionMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminPermissionMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminPermissionMenuDo
	Assign(attrs ...field.AssignExpr) IAdminPermissionMenuDo
	Joins(fields ...field.RelationField) IAdminPermissionMenuDo
	Preload(fields ...field.RelationField) IAdminPermissionMenuDo
	FirstOrInit() (*model.AdminPermissionMenu, error)
	FirstOrCreate() (*model.AdminPermissionMenu, error)
	FindByPage(offset int, limit int) (result []*model.AdminPermissionMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminPermissionMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminPermissionMenuDo) Debug() IAdminPermissionMenuDo {
	return a.withDO(a.DO.Debug())
}

func (a adminPermissionMenuDo) WithContext(ctx context.Context) IAdminPermissionMenuDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminPermissionMenuDo) ReadDB() IAdminPermissionMenuDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminPermissionMenuDo) WriteDB() IAdminPermissionMenuDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminPermissionMenuDo) Session(config *gorm.Session) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminPermissionMenuDo) Clauses(conds ...clause.Expression) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminPermissionMenuDo) Returning(value interface{}, columns ...string) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminPermissionMenuDo) Not(conds ...gen.Condition) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminPermissionMenuDo) Or(conds ...gen.Condition) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminPermissionMenuDo) Select(conds ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminPermissionMenuDo) Where(conds ...gen.Condition) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminPermissionMenuDo) Order(conds ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminPermissionMenuDo) Distinct(cols ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminPermissionMenuDo) Omit(cols ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminPermissionMenuDo) Join(table schema.Tabler, on ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminPermissionMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminPermissionMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminPermissionMenuDo) Group(cols ...field.Expr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminPermissionMenuDo) Having(conds ...gen.Condition) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminPermissionMenuDo) Limit(limit int) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminPermissionMenuDo) Offset(offset int) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminPermissionMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminPermissionMenuDo) Unscoped() IAdminPermissionMenuDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminPermissionMenuDo) Create(values ...*model.AdminPermissionMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminPermissionMenuDo) CreateInBatches(values []*model.AdminPermissionMenu, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminPermissionMenuDo) Save(values ...*model.AdminPermissionMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminPermissionMenuDo) First() (*model.AdminPermissionMenu, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionMenu), nil
	}
}

func (a adminPermissionMenuDo) Take() (*model.AdminPermissionMenu, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionMenu), nil
	}
}

func (a adminPermissionMenuDo) Last() (*model.AdminPermissionMenu, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionMenu), nil
	}
}

func (a adminPermissionMenuDo) Find() ([]*model.AdminPermissionMenu, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminPermissionMenu), err
}

func (a adminPermissionMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminPermissionMenu, err error) {
	buf := make([]*model.AdminPermissionMenu, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminPermissionMenuDo) FindInBatches(result *[]*model.AdminPermissionMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminPermissionMenuDo) Attrs(attrs ...field.AssignExpr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminPermissionMenuDo) Assign(attrs ...field.AssignExpr) IAdminPermissionMenuDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminPermissionMenuDo) Joins(fields ...field.RelationField) IAdminPermissionMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminPermissionMenuDo) Preload(fields ...field.RelationField) IAdminPermissionMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminPermissionMenuDo) FirstOrInit() (*model.AdminPermissionMenu, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionMenu), nil
	}
}

func (a adminPermissionMenuDo) FirstOrCreate() (*model.AdminPermissionMenu, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminPermissionMenu), nil
	}
}

func (a adminPermissionMenuDo) FindByPage(offset int, limit int) (result []*model.AdminPermissionMenu, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminPermissionMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminPermissionMenuDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminPermissionMenuDo) Delete(models ...*model.AdminPermissionMenu) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminPermissionMenuDo) withDO(do gen.Dao) *adminPermissionMenuDo {
	a.DO = *do.(*gen.DO)
	return a
}
