// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSysCity(db *gorm.DB, opts ...gen.DOOption) sysCity {
	_sysCity := sysCity{}

	_sysCity.sysCityDo.UseDB(db, opts...)
	_sysCity.sysCityDo.UseModel(&model.SysCity{})

	tableName := _sysCity.sysCityDo.TableName()
	_sysCity.ALL = field.NewAsterisk(tableName)
	_sysCity.ID = field.NewInt(tableName, "id")
	_sysCity.CityID = field.NewInt64(tableName, "city_id")
	_sysCity.Level = field.NewInt64(tableName, "level")
	_sysCity.ParentID = field.NewInt64(tableName, "parent_id")
	_sysCity.AreaCode = field.NewString(tableName, "area_code")
	_sysCity.Name = field.NewString(tableName, "name")
	_sysCity.MergerName = field.NewString(tableName, "merger_name")
	_sysCity.Lng = field.NewString(tableName, "lng")
	_sysCity.Lat = field.NewString(tableName, "lat")
	_sysCity.IsShow = field.NewBool(tableName, "is_show")

	_sysCity.fillFieldMap()

	return _sysCity
}

// sysCity 城市表
type sysCity struct {
	sysCityDo

	ALL        field.Asterisk
	ID         field.Int    // 自增ID
	CityID     field.Int64  // 城市id
	Level      field.Int64  // 省市级别
	ParentID   field.Int64  // 父级id
	AreaCode   field.String // 区号
	Name       field.String // 名称
	MergerName field.String // 合并名称
	Lng        field.String // 经度
	Lat        field.String // 纬度
	IsShow     field.Bool   // 是否展示

	fieldMap map[string]field.Expr
}

func (s sysCity) Table(newTableName string) *sysCity {
	s.sysCityDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCity) As(alias string) *sysCity {
	s.sysCityDo.DO = *(s.sysCityDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCity) updateTableName(table string) *sysCity {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.CityID = field.NewInt64(table, "city_id")
	s.Level = field.NewInt64(table, "level")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.AreaCode = field.NewString(table, "area_code")
	s.Name = field.NewString(table, "name")
	s.MergerName = field.NewString(table, "merger_name")
	s.Lng = field.NewString(table, "lng")
	s.Lat = field.NewString(table, "lat")
	s.IsShow = field.NewBool(table, "is_show")

	s.fillFieldMap()

	return s
}

func (s *sysCity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCity) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["city_id"] = s.CityID
	s.fieldMap["level"] = s.Level
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["area_code"] = s.AreaCode
	s.fieldMap["name"] = s.Name
	s.fieldMap["merger_name"] = s.MergerName
	s.fieldMap["lng"] = s.Lng
	s.fieldMap["lat"] = s.Lat
	s.fieldMap["is_show"] = s.IsShow
}

func (s sysCity) clone(db *gorm.DB) sysCity {
	s.sysCityDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCity) replaceDB(db *gorm.DB) sysCity {
	s.sysCityDo.ReplaceDB(db)
	return s
}

type sysCityDo struct{ gen.DO }

type ISysCityDo interface {
	gen.SubQuery
	Debug() ISysCityDo
	WithContext(ctx context.Context) ISysCityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysCityDo
	WriteDB() ISysCityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysCityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysCityDo
	Not(conds ...gen.Condition) ISysCityDo
	Or(conds ...gen.Condition) ISysCityDo
	Select(conds ...field.Expr) ISysCityDo
	Where(conds ...gen.Condition) ISysCityDo
	Order(conds ...field.Expr) ISysCityDo
	Distinct(cols ...field.Expr) ISysCityDo
	Omit(cols ...field.Expr) ISysCityDo
	Join(table schema.Tabler, on ...field.Expr) ISysCityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysCityDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysCityDo
	Group(cols ...field.Expr) ISysCityDo
	Having(conds ...gen.Condition) ISysCityDo
	Limit(limit int) ISysCityDo
	Offset(offset int) ISysCityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCityDo
	Unscoped() ISysCityDo
	Create(values ...*model.SysCity) error
	CreateInBatches(values []*model.SysCity, batchSize int) error
	Save(values ...*model.SysCity) error
	First() (*model.SysCity, error)
	Take() (*model.SysCity, error)
	Last() (*model.SysCity, error)
	Find() ([]*model.SysCity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCity, err error)
	FindInBatches(result *[]*model.SysCity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysCity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysCityDo
	Assign(attrs ...field.AssignExpr) ISysCityDo
	Joins(fields ...field.RelationField) ISysCityDo
	Preload(fields ...field.RelationField) ISysCityDo
	FirstOrInit() (*model.SysCity, error)
	FirstOrCreate() (*model.SysCity, error)
	FindByPage(offset int, limit int) (result []*model.SysCity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysCityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysCityDo) Debug() ISysCityDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCityDo) WithContext(ctx context.Context) ISysCityDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCityDo) ReadDB() ISysCityDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCityDo) WriteDB() ISysCityDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCityDo) Session(config *gorm.Session) ISysCityDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCityDo) Clauses(conds ...clause.Expression) ISysCityDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCityDo) Returning(value interface{}, columns ...string) ISysCityDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCityDo) Not(conds ...gen.Condition) ISysCityDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCityDo) Or(conds ...gen.Condition) ISysCityDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCityDo) Select(conds ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCityDo) Where(conds ...gen.Condition) ISysCityDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCityDo) Order(conds ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCityDo) Distinct(cols ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCityDo) Omit(cols ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCityDo) Join(table schema.Tabler, on ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCityDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCityDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCityDo) Group(cols ...field.Expr) ISysCityDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCityDo) Having(conds ...gen.Condition) ISysCityDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCityDo) Limit(limit int) ISysCityDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCityDo) Offset(offset int) ISysCityDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCityDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCityDo) Unscoped() ISysCityDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCityDo) Create(values ...*model.SysCity) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCityDo) CreateInBatches(values []*model.SysCity, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCityDo) Save(values ...*model.SysCity) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCityDo) First() (*model.SysCity, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCity), nil
	}
}

func (s sysCityDo) Take() (*model.SysCity, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCity), nil
	}
}

func (s sysCityDo) Last() (*model.SysCity, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCity), nil
	}
}

func (s sysCityDo) Find() ([]*model.SysCity, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysCity), err
}

func (s sysCityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCity, err error) {
	buf := make([]*model.SysCity, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCityDo) FindInBatches(result *[]*model.SysCity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCityDo) Attrs(attrs ...field.AssignExpr) ISysCityDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCityDo) Assign(attrs ...field.AssignExpr) ISysCityDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCityDo) Joins(fields ...field.RelationField) ISysCityDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCityDo) Preload(fields ...field.RelationField) ISysCityDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCityDo) FirstOrInit() (*model.SysCity, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCity), nil
	}
}

func (s sysCityDo) FirstOrCreate() (*model.SysCity, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCity), nil
	}
}

func (s sysCityDo) FindByPage(offset int, limit int) (result []*model.SysCity, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCityDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCityDo) Delete(models ...*model.SysCity) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCityDo) withDO(do gen.Dao) *sysCityDo {
	s.DO = *do.(*gen.DO)
	return s
}
