// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsAgreement(db *gorm.DB, opts ...gen.DOOption) smsAgreement {
	_smsAgreement := smsAgreement{}

	_smsAgreement.smsAgreementDo.UseDB(db, opts...)
	_smsAgreement.smsAgreementDo.UseModel(&model.SmsAgreement{})

	tableName := _smsAgreement.smsAgreementDo.TableName()
	_smsAgreement.ALL = field.NewAsterisk(tableName)
	_smsAgreement.ID = field.NewInt(tableName, "id")
	_smsAgreement.Title = field.NewString(tableName, "title")
	_smsAgreement.Content = field.NewString(tableName, "content")
	_smsAgreement.Status = field.NewBool(tableName, "status")
	_smsAgreement.CreatedAt = field.NewInt64(tableName, "created_at")

	_smsAgreement.fillFieldMap()

	return _smsAgreement
}

// smsAgreement 平台协议
type smsAgreement struct {
	smsAgreementDo

	ALL       field.Asterisk
	ID        field.Int    // 自增ID
	Title     field.String // 协议名称
	Content   field.String // 协议内容
	Status    field.Bool   // 1：显示：0：不显示
	CreatedAt field.Int64  // 添加时间

	fieldMap map[string]field.Expr
}

func (s smsAgreement) Table(newTableName string) *smsAgreement {
	s.smsAgreementDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsAgreement) As(alias string) *smsAgreement {
	s.smsAgreementDo.DO = *(s.smsAgreementDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsAgreement) updateTableName(table string) *smsAgreement {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Title = field.NewString(table, "title")
	s.Content = field.NewString(table, "content")
	s.Status = field.NewBool(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *smsAgreement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsAgreement) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["content"] = s.Content
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s smsAgreement) clone(db *gorm.DB) smsAgreement {
	s.smsAgreementDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsAgreement) replaceDB(db *gorm.DB) smsAgreement {
	s.smsAgreementDo.ReplaceDB(db)
	return s
}

type smsAgreementDo struct{ gen.DO }

type ISmsAgreementDo interface {
	gen.SubQuery
	Debug() ISmsAgreementDo
	WithContext(ctx context.Context) ISmsAgreementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsAgreementDo
	WriteDB() ISmsAgreementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsAgreementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsAgreementDo
	Not(conds ...gen.Condition) ISmsAgreementDo
	Or(conds ...gen.Condition) ISmsAgreementDo
	Select(conds ...field.Expr) ISmsAgreementDo
	Where(conds ...gen.Condition) ISmsAgreementDo
	Order(conds ...field.Expr) ISmsAgreementDo
	Distinct(cols ...field.Expr) ISmsAgreementDo
	Omit(cols ...field.Expr) ISmsAgreementDo
	Join(table schema.Tabler, on ...field.Expr) ISmsAgreementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsAgreementDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsAgreementDo
	Group(cols ...field.Expr) ISmsAgreementDo
	Having(conds ...gen.Condition) ISmsAgreementDo
	Limit(limit int) ISmsAgreementDo
	Offset(offset int) ISmsAgreementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsAgreementDo
	Unscoped() ISmsAgreementDo
	Create(values ...*model.SmsAgreement) error
	CreateInBatches(values []*model.SmsAgreement, batchSize int) error
	Save(values ...*model.SmsAgreement) error
	First() (*model.SmsAgreement, error)
	Take() (*model.SmsAgreement, error)
	Last() (*model.SmsAgreement, error)
	Find() ([]*model.SmsAgreement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsAgreement, err error)
	FindInBatches(result *[]*model.SmsAgreement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsAgreement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsAgreementDo
	Assign(attrs ...field.AssignExpr) ISmsAgreementDo
	Joins(fields ...field.RelationField) ISmsAgreementDo
	Preload(fields ...field.RelationField) ISmsAgreementDo
	FirstOrInit() (*model.SmsAgreement, error)
	FirstOrCreate() (*model.SmsAgreement, error)
	FindByPage(offset int, limit int) (result []*model.SmsAgreement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsAgreementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsAgreementDo) Debug() ISmsAgreementDo {
	return s.withDO(s.DO.Debug())
}

func (s smsAgreementDo) WithContext(ctx context.Context) ISmsAgreementDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsAgreementDo) ReadDB() ISmsAgreementDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsAgreementDo) WriteDB() ISmsAgreementDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsAgreementDo) Session(config *gorm.Session) ISmsAgreementDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsAgreementDo) Clauses(conds ...clause.Expression) ISmsAgreementDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsAgreementDo) Returning(value interface{}, columns ...string) ISmsAgreementDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsAgreementDo) Not(conds ...gen.Condition) ISmsAgreementDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsAgreementDo) Or(conds ...gen.Condition) ISmsAgreementDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsAgreementDo) Select(conds ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsAgreementDo) Where(conds ...gen.Condition) ISmsAgreementDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsAgreementDo) Order(conds ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsAgreementDo) Distinct(cols ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsAgreementDo) Omit(cols ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsAgreementDo) Join(table schema.Tabler, on ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsAgreementDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsAgreementDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsAgreementDo) Group(cols ...field.Expr) ISmsAgreementDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsAgreementDo) Having(conds ...gen.Condition) ISmsAgreementDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsAgreementDo) Limit(limit int) ISmsAgreementDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsAgreementDo) Offset(offset int) ISmsAgreementDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsAgreementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsAgreementDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsAgreementDo) Unscoped() ISmsAgreementDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsAgreementDo) Create(values ...*model.SmsAgreement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsAgreementDo) CreateInBatches(values []*model.SmsAgreement, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsAgreementDo) Save(values ...*model.SmsAgreement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsAgreementDo) First() (*model.SmsAgreement, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAgreement), nil
	}
}

func (s smsAgreementDo) Take() (*model.SmsAgreement, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAgreement), nil
	}
}

func (s smsAgreementDo) Last() (*model.SmsAgreement, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAgreement), nil
	}
}

func (s smsAgreementDo) Find() ([]*model.SmsAgreement, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsAgreement), err
}

func (s smsAgreementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsAgreement, err error) {
	buf := make([]*model.SmsAgreement, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsAgreementDo) FindInBatches(result *[]*model.SmsAgreement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsAgreementDo) Attrs(attrs ...field.AssignExpr) ISmsAgreementDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsAgreementDo) Assign(attrs ...field.AssignExpr) ISmsAgreementDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsAgreementDo) Joins(fields ...field.RelationField) ISmsAgreementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsAgreementDo) Preload(fields ...field.RelationField) ISmsAgreementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsAgreementDo) FirstOrInit() (*model.SmsAgreement, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAgreement), nil
	}
}

func (s smsAgreementDo) FirstOrCreate() (*model.SmsAgreement, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAgreement), nil
	}
}

func (s smsAgreementDo) FindByPage(offset int, limit int) (result []*model.SmsAgreement, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsAgreementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsAgreementDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsAgreementDo) Delete(models ...*model.SmsAgreement) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsAgreementDo) withDO(do gen.Dao) *smsAgreementDo {
	s.DO = *do.(*gen.DO)
	return s
}
