// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsSeckillSkuNotice(db *gorm.DB, opts ...gen.DOOption) smsSeckillSkuNotice {
	_smsSeckillSkuNotice := smsSeckillSkuNotice{}

	_smsSeckillSkuNotice.smsSeckillSkuNoticeDo.UseDB(db, opts...)
	_smsSeckillSkuNotice.smsSeckillSkuNoticeDo.UseModel(&model.SmsSeckillSkuNotice{})

	tableName := _smsSeckillSkuNotice.smsSeckillSkuNoticeDo.TableName()
	_smsSeckillSkuNotice.ALL = field.NewAsterisk(tableName)
	_smsSeckillSkuNotice.ID = field.NewInt(tableName, "id")
	_smsSeckillSkuNotice.SkuID = field.NewInt64(tableName, "sku_id")
	_smsSeckillSkuNotice.MemberID = field.NewInt64(tableName, "member_id")
	_smsSeckillSkuNotice.SessionID = field.NewInt64(tableName, "session_id")
	_smsSeckillSkuNotice.SendAt = field.NewInt64(tableName, "send_at")
	_smsSeckillSkuNotice.Type = field.NewInt8(tableName, "type")
	_smsSeckillSkuNotice.CreatedAt = field.NewInt(tableName, "created_at")

	_smsSeckillSkuNotice.fillFieldMap()

	return _smsSeckillSkuNotice
}

type smsSeckillSkuNotice struct {
	smsSeckillSkuNoticeDo

	ALL       field.Asterisk
	ID        field.Int   // ID
	SkuID     field.Int64 // sku_id
	MemberID  field.Int64 // 会员id
	SessionID field.Int64 // 场次id
	SendAt    field.Int64 // 发送时间
	Type      field.Int8  // 通知方式[0-短信，1-邮件]
	CreatedAt field.Int   // 创建时间

	fieldMap map[string]field.Expr
}

func (s smsSeckillSkuNotice) Table(newTableName string) *smsSeckillSkuNotice {
	s.smsSeckillSkuNoticeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSeckillSkuNotice) As(alias string) *smsSeckillSkuNotice {
	s.smsSeckillSkuNoticeDo.DO = *(s.smsSeckillSkuNoticeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSeckillSkuNotice) updateTableName(table string) *smsSeckillSkuNotice {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.SkuID = field.NewInt64(table, "sku_id")
	s.MemberID = field.NewInt64(table, "member_id")
	s.SessionID = field.NewInt64(table, "session_id")
	s.SendAt = field.NewInt64(table, "send_at")
	s.Type = field.NewInt8(table, "type")
	s.CreatedAt = field.NewInt(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *smsSeckillSkuNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSeckillSkuNotice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sku_id"] = s.SkuID
	s.fieldMap["member_id"] = s.MemberID
	s.fieldMap["session_id"] = s.SessionID
	s.fieldMap["send_at"] = s.SendAt
	s.fieldMap["type"] = s.Type
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s smsSeckillSkuNotice) clone(db *gorm.DB) smsSeckillSkuNotice {
	s.smsSeckillSkuNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSeckillSkuNotice) replaceDB(db *gorm.DB) smsSeckillSkuNotice {
	s.smsSeckillSkuNoticeDo.ReplaceDB(db)
	return s
}

type smsSeckillSkuNoticeDo struct{ gen.DO }

type ISmsSeckillSkuNoticeDo interface {
	gen.SubQuery
	Debug() ISmsSeckillSkuNoticeDo
	WithContext(ctx context.Context) ISmsSeckillSkuNoticeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSeckillSkuNoticeDo
	WriteDB() ISmsSeckillSkuNoticeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSeckillSkuNoticeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSeckillSkuNoticeDo
	Not(conds ...gen.Condition) ISmsSeckillSkuNoticeDo
	Or(conds ...gen.Condition) ISmsSeckillSkuNoticeDo
	Select(conds ...field.Expr) ISmsSeckillSkuNoticeDo
	Where(conds ...gen.Condition) ISmsSeckillSkuNoticeDo
	Order(conds ...field.Expr) ISmsSeckillSkuNoticeDo
	Distinct(cols ...field.Expr) ISmsSeckillSkuNoticeDo
	Omit(cols ...field.Expr) ISmsSeckillSkuNoticeDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuNoticeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuNoticeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuNoticeDo
	Group(cols ...field.Expr) ISmsSeckillSkuNoticeDo
	Having(conds ...gen.Condition) ISmsSeckillSkuNoticeDo
	Limit(limit int) ISmsSeckillSkuNoticeDo
	Offset(offset int) ISmsSeckillSkuNoticeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillSkuNoticeDo
	Unscoped() ISmsSeckillSkuNoticeDo
	Create(values ...*model.SmsSeckillSkuNotice) error
	CreateInBatches(values []*model.SmsSeckillSkuNotice, batchSize int) error
	Save(values ...*model.SmsSeckillSkuNotice) error
	First() (*model.SmsSeckillSkuNotice, error)
	Take() (*model.SmsSeckillSkuNotice, error)
	Last() (*model.SmsSeckillSkuNotice, error)
	Find() ([]*model.SmsSeckillSkuNotice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillSkuNotice, err error)
	FindInBatches(result *[]*model.SmsSeckillSkuNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSeckillSkuNotice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSeckillSkuNoticeDo
	Assign(attrs ...field.AssignExpr) ISmsSeckillSkuNoticeDo
	Joins(fields ...field.RelationField) ISmsSeckillSkuNoticeDo
	Preload(fields ...field.RelationField) ISmsSeckillSkuNoticeDo
	FirstOrInit() (*model.SmsSeckillSkuNotice, error)
	FirstOrCreate() (*model.SmsSeckillSkuNotice, error)
	FindByPage(offset int, limit int) (result []*model.SmsSeckillSkuNotice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSeckillSkuNoticeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSeckillSkuNoticeDo) Debug() ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSeckillSkuNoticeDo) WithContext(ctx context.Context) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSeckillSkuNoticeDo) ReadDB() ISmsSeckillSkuNoticeDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSeckillSkuNoticeDo) WriteDB() ISmsSeckillSkuNoticeDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSeckillSkuNoticeDo) Session(config *gorm.Session) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSeckillSkuNoticeDo) Clauses(conds ...clause.Expression) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSeckillSkuNoticeDo) Returning(value interface{}, columns ...string) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSeckillSkuNoticeDo) Not(conds ...gen.Condition) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSeckillSkuNoticeDo) Or(conds ...gen.Condition) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSeckillSkuNoticeDo) Select(conds ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSeckillSkuNoticeDo) Where(conds ...gen.Condition) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSeckillSkuNoticeDo) Order(conds ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSeckillSkuNoticeDo) Distinct(cols ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSeckillSkuNoticeDo) Omit(cols ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSeckillSkuNoticeDo) Join(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSeckillSkuNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSeckillSkuNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSeckillSkuNoticeDo) Group(cols ...field.Expr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSeckillSkuNoticeDo) Having(conds ...gen.Condition) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSeckillSkuNoticeDo) Limit(limit int) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSeckillSkuNoticeDo) Offset(offset int) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSeckillSkuNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSeckillSkuNoticeDo) Unscoped() ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSeckillSkuNoticeDo) Create(values ...*model.SmsSeckillSkuNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSeckillSkuNoticeDo) CreateInBatches(values []*model.SmsSeckillSkuNotice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSeckillSkuNoticeDo) Save(values ...*model.SmsSeckillSkuNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSeckillSkuNoticeDo) First() (*model.SmsSeckillSkuNotice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSkuNotice), nil
	}
}

func (s smsSeckillSkuNoticeDo) Take() (*model.SmsSeckillSkuNotice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSkuNotice), nil
	}
}

func (s smsSeckillSkuNoticeDo) Last() (*model.SmsSeckillSkuNotice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSkuNotice), nil
	}
}

func (s smsSeckillSkuNoticeDo) Find() ([]*model.SmsSeckillSkuNotice, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSeckillSkuNotice), err
}

func (s smsSeckillSkuNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillSkuNotice, err error) {
	buf := make([]*model.SmsSeckillSkuNotice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSeckillSkuNoticeDo) FindInBatches(result *[]*model.SmsSeckillSkuNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSeckillSkuNoticeDo) Attrs(attrs ...field.AssignExpr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSeckillSkuNoticeDo) Assign(attrs ...field.AssignExpr) ISmsSeckillSkuNoticeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSeckillSkuNoticeDo) Joins(fields ...field.RelationField) ISmsSeckillSkuNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSeckillSkuNoticeDo) Preload(fields ...field.RelationField) ISmsSeckillSkuNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSeckillSkuNoticeDo) FirstOrInit() (*model.SmsSeckillSkuNotice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSkuNotice), nil
	}
}

func (s smsSeckillSkuNoticeDo) FirstOrCreate() (*model.SmsSeckillSkuNotice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSkuNotice), nil
	}
}

func (s smsSeckillSkuNoticeDo) FindByPage(offset int, limit int) (result []*model.SmsSeckillSkuNotice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSeckillSkuNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSeckillSkuNoticeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSeckillSkuNoticeDo) Delete(models ...*model.SmsSeckillSkuNotice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSeckillSkuNoticeDo) withDO(do gen.Dao) *smsSeckillSkuNoticeDo {
	s.DO = *do.(*gen.DO)
	return s
}
