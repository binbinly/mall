// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newWmsWareSku(db *gorm.DB, opts ...gen.DOOption) wmsWareSku {
	_wmsWareSku := wmsWareSku{}

	_wmsWareSku.wmsWareSkuDo.UseDB(db, opts...)
	_wmsWareSku.wmsWareSkuDo.UseModel(&model.WmsWareSku{})

	tableName := _wmsWareSku.wmsWareSkuDo.TableName()
	_wmsWareSku.ALL = field.NewAsterisk(tableName)
	_wmsWareSku.ID = field.NewInt(tableName, "id")
	_wmsWareSku.SkuID = field.NewInt(tableName, "sku_id")
	_wmsWareSku.WareID = field.NewInt(tableName, "ware_id")
	_wmsWareSku.SkuName = field.NewString(tableName, "sku_name")
	_wmsWareSku.Stock = field.NewInt(tableName, "stock")
	_wmsWareSku.StockLock = field.NewInt(tableName, "stock_lock")
	_wmsWareSku.CreatedAt = field.NewTime(tableName, "created_at")
	_wmsWareSku.UpdatedAt = field.NewTime(tableName, "updated_at")

	_wmsWareSku.fillFieldMap()

	return _wmsWareSku
}

type wmsWareSku struct {
	wmsWareSkuDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	SkuID     field.Int    // 采购商品id
	WareID    field.Int    // 仓库id
	SkuName   field.String // 采购商品名
	Stock     field.Int    // 库存
	StockLock field.Int    // 锁定库存
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (w wmsWareSku) Table(newTableName string) *wmsWareSku {
	w.wmsWareSkuDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wmsWareSku) As(alias string) *wmsWareSku {
	w.wmsWareSkuDo.DO = *(w.wmsWareSkuDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wmsWareSku) updateTableName(table string) *wmsWareSku {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt(table, "id")
	w.SkuID = field.NewInt(table, "sku_id")
	w.WareID = field.NewInt(table, "ware_id")
	w.SkuName = field.NewString(table, "sku_name")
	w.Stock = field.NewInt(table, "stock")
	w.StockLock = field.NewInt(table, "stock_lock")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *wmsWareSku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wmsWareSku) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["sku_id"] = w.SkuID
	w.fieldMap["ware_id"] = w.WareID
	w.fieldMap["sku_name"] = w.SkuName
	w.fieldMap["stock"] = w.Stock
	w.fieldMap["stock_lock"] = w.StockLock
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w wmsWareSku) clone(db *gorm.DB) wmsWareSku {
	w.wmsWareSkuDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wmsWareSku) replaceDB(db *gorm.DB) wmsWareSku {
	w.wmsWareSkuDo.ReplaceDB(db)
	return w
}

type wmsWareSkuDo struct{ gen.DO }

type IWmsWareSkuDo interface {
	gen.SubQuery
	Debug() IWmsWareSkuDo
	WithContext(ctx context.Context) IWmsWareSkuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWmsWareSkuDo
	WriteDB() IWmsWareSkuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWmsWareSkuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWmsWareSkuDo
	Not(conds ...gen.Condition) IWmsWareSkuDo
	Or(conds ...gen.Condition) IWmsWareSkuDo
	Select(conds ...field.Expr) IWmsWareSkuDo
	Where(conds ...gen.Condition) IWmsWareSkuDo
	Order(conds ...field.Expr) IWmsWareSkuDo
	Distinct(cols ...field.Expr) IWmsWareSkuDo
	Omit(cols ...field.Expr) IWmsWareSkuDo
	Join(table schema.Tabler, on ...field.Expr) IWmsWareSkuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareSkuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareSkuDo
	Group(cols ...field.Expr) IWmsWareSkuDo
	Having(conds ...gen.Condition) IWmsWareSkuDo
	Limit(limit int) IWmsWareSkuDo
	Offset(offset int) IWmsWareSkuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareSkuDo
	Unscoped() IWmsWareSkuDo
	Create(values ...*model.WmsWareSku) error
	CreateInBatches(values []*model.WmsWareSku, batchSize int) error
	Save(values ...*model.WmsWareSku) error
	First() (*model.WmsWareSku, error)
	Take() (*model.WmsWareSku, error)
	Last() (*model.WmsWareSku, error)
	Find() ([]*model.WmsWareSku, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWareSku, err error)
	FindInBatches(result *[]*model.WmsWareSku, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WmsWareSku) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWmsWareSkuDo
	Assign(attrs ...field.AssignExpr) IWmsWareSkuDo
	Joins(fields ...field.RelationField) IWmsWareSkuDo
	Preload(fields ...field.RelationField) IWmsWareSkuDo
	FirstOrInit() (*model.WmsWareSku, error)
	FirstOrCreate() (*model.WmsWareSku, error)
	FindByPage(offset int, limit int) (result []*model.WmsWareSku, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWmsWareSkuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wmsWareSkuDo) Debug() IWmsWareSkuDo {
	return w.withDO(w.DO.Debug())
}

func (w wmsWareSkuDo) WithContext(ctx context.Context) IWmsWareSkuDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wmsWareSkuDo) ReadDB() IWmsWareSkuDo {
	return w.Clauses(dbresolver.Read)
}

func (w wmsWareSkuDo) WriteDB() IWmsWareSkuDo {
	return w.Clauses(dbresolver.Write)
}

func (w wmsWareSkuDo) Session(config *gorm.Session) IWmsWareSkuDo {
	return w.withDO(w.DO.Session(config))
}

func (w wmsWareSkuDo) Clauses(conds ...clause.Expression) IWmsWareSkuDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wmsWareSkuDo) Returning(value interface{}, columns ...string) IWmsWareSkuDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wmsWareSkuDo) Not(conds ...gen.Condition) IWmsWareSkuDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wmsWareSkuDo) Or(conds ...gen.Condition) IWmsWareSkuDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wmsWareSkuDo) Select(conds ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wmsWareSkuDo) Where(conds ...gen.Condition) IWmsWareSkuDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wmsWareSkuDo) Order(conds ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wmsWareSkuDo) Distinct(cols ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wmsWareSkuDo) Omit(cols ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wmsWareSkuDo) Join(table schema.Tabler, on ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wmsWareSkuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wmsWareSkuDo) RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wmsWareSkuDo) Group(cols ...field.Expr) IWmsWareSkuDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wmsWareSkuDo) Having(conds ...gen.Condition) IWmsWareSkuDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wmsWareSkuDo) Limit(limit int) IWmsWareSkuDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wmsWareSkuDo) Offset(offset int) IWmsWareSkuDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wmsWareSkuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareSkuDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wmsWareSkuDo) Unscoped() IWmsWareSkuDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wmsWareSkuDo) Create(values ...*model.WmsWareSku) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wmsWareSkuDo) CreateInBatches(values []*model.WmsWareSku, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wmsWareSkuDo) Save(values ...*model.WmsWareSku) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wmsWareSkuDo) First() (*model.WmsWareSku, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareSku), nil
	}
}

func (w wmsWareSkuDo) Take() (*model.WmsWareSku, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareSku), nil
	}
}

func (w wmsWareSkuDo) Last() (*model.WmsWareSku, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareSku), nil
	}
}

func (w wmsWareSkuDo) Find() ([]*model.WmsWareSku, error) {
	result, err := w.DO.Find()
	return result.([]*model.WmsWareSku), err
}

func (w wmsWareSkuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWareSku, err error) {
	buf := make([]*model.WmsWareSku, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wmsWareSkuDo) FindInBatches(result *[]*model.WmsWareSku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wmsWareSkuDo) Attrs(attrs ...field.AssignExpr) IWmsWareSkuDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wmsWareSkuDo) Assign(attrs ...field.AssignExpr) IWmsWareSkuDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wmsWareSkuDo) Joins(fields ...field.RelationField) IWmsWareSkuDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wmsWareSkuDo) Preload(fields ...field.RelationField) IWmsWareSkuDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wmsWareSkuDo) FirstOrInit() (*model.WmsWareSku, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareSku), nil
	}
}

func (w wmsWareSkuDo) FirstOrCreate() (*model.WmsWareSku, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareSku), nil
	}
}

func (w wmsWareSkuDo) FindByPage(offset int, limit int) (result []*model.WmsWareSku, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wmsWareSkuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wmsWareSkuDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wmsWareSkuDo) Delete(models ...*model.WmsWareSku) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wmsWareSkuDo) withDO(do gen.Dao) *wmsWareSkuDo {
	w.DO = *do.(*gen.DO)
	return w
}
