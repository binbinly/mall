// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminExtensionHistory(db *gorm.DB, opts ...gen.DOOption) adminExtensionHistory {
	_adminExtensionHistory := adminExtensionHistory{}

	_adminExtensionHistory.adminExtensionHistoryDo.UseDB(db, opts...)
	_adminExtensionHistory.adminExtensionHistoryDo.UseModel(&model.AdminExtensionHistory{})

	tableName := _adminExtensionHistory.adminExtensionHistoryDo.TableName()
	_adminExtensionHistory.ALL = field.NewAsterisk(tableName)
	_adminExtensionHistory.ID = field.NewInt64(tableName, "id")
	_adminExtensionHistory.Name = field.NewString(tableName, "name")
	_adminExtensionHistory.Type = field.NewInt8(tableName, "type")
	_adminExtensionHistory.Version = field.NewString(tableName, "version")
	_adminExtensionHistory.Detail = field.NewString(tableName, "detail")
	_adminExtensionHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_adminExtensionHistory.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminExtensionHistory.fillFieldMap()

	return _adminExtensionHistory
}

type adminExtensionHistory struct {
	adminExtensionHistoryDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Type      field.Int8
	Version   field.String
	Detail    field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminExtensionHistory) Table(newTableName string) *adminExtensionHistory {
	a.adminExtensionHistoryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminExtensionHistory) As(alias string) *adminExtensionHistory {
	a.adminExtensionHistoryDo.DO = *(a.adminExtensionHistoryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminExtensionHistory) updateTableName(table string) *adminExtensionHistory {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewInt8(table, "type")
	a.Version = field.NewString(table, "version")
	a.Detail = field.NewString(table, "detail")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminExtensionHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminExtensionHistory) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["version"] = a.Version
	a.fieldMap["detail"] = a.Detail
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminExtensionHistory) clone(db *gorm.DB) adminExtensionHistory {
	a.adminExtensionHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminExtensionHistory) replaceDB(db *gorm.DB) adminExtensionHistory {
	a.adminExtensionHistoryDo.ReplaceDB(db)
	return a
}

type adminExtensionHistoryDo struct{ gen.DO }

type IAdminExtensionHistoryDo interface {
	gen.SubQuery
	Debug() IAdminExtensionHistoryDo
	WithContext(ctx context.Context) IAdminExtensionHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminExtensionHistoryDo
	WriteDB() IAdminExtensionHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminExtensionHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminExtensionHistoryDo
	Not(conds ...gen.Condition) IAdminExtensionHistoryDo
	Or(conds ...gen.Condition) IAdminExtensionHistoryDo
	Select(conds ...field.Expr) IAdminExtensionHistoryDo
	Where(conds ...gen.Condition) IAdminExtensionHistoryDo
	Order(conds ...field.Expr) IAdminExtensionHistoryDo
	Distinct(cols ...field.Expr) IAdminExtensionHistoryDo
	Omit(cols ...field.Expr) IAdminExtensionHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IAdminExtensionHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionHistoryDo
	Group(cols ...field.Expr) IAdminExtensionHistoryDo
	Having(conds ...gen.Condition) IAdminExtensionHistoryDo
	Limit(limit int) IAdminExtensionHistoryDo
	Offset(offset int) IAdminExtensionHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminExtensionHistoryDo
	Unscoped() IAdminExtensionHistoryDo
	Create(values ...*model.AdminExtensionHistory) error
	CreateInBatches(values []*model.AdminExtensionHistory, batchSize int) error
	Save(values ...*model.AdminExtensionHistory) error
	First() (*model.AdminExtensionHistory, error)
	Take() (*model.AdminExtensionHistory, error)
	Last() (*model.AdminExtensionHistory, error)
	Find() ([]*model.AdminExtensionHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminExtensionHistory, err error)
	FindInBatches(result *[]*model.AdminExtensionHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminExtensionHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminExtensionHistoryDo
	Assign(attrs ...field.AssignExpr) IAdminExtensionHistoryDo
	Joins(fields ...field.RelationField) IAdminExtensionHistoryDo
	Preload(fields ...field.RelationField) IAdminExtensionHistoryDo
	FirstOrInit() (*model.AdminExtensionHistory, error)
	FirstOrCreate() (*model.AdminExtensionHistory, error)
	FindByPage(offset int, limit int) (result []*model.AdminExtensionHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminExtensionHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminExtensionHistoryDo) Debug() IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Debug())
}

func (a adminExtensionHistoryDo) WithContext(ctx context.Context) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminExtensionHistoryDo) ReadDB() IAdminExtensionHistoryDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminExtensionHistoryDo) WriteDB() IAdminExtensionHistoryDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminExtensionHistoryDo) Session(config *gorm.Session) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminExtensionHistoryDo) Clauses(conds ...clause.Expression) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminExtensionHistoryDo) Returning(value interface{}, columns ...string) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminExtensionHistoryDo) Not(conds ...gen.Condition) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminExtensionHistoryDo) Or(conds ...gen.Condition) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminExtensionHistoryDo) Select(conds ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminExtensionHistoryDo) Where(conds ...gen.Condition) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminExtensionHistoryDo) Order(conds ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminExtensionHistoryDo) Distinct(cols ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminExtensionHistoryDo) Omit(cols ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminExtensionHistoryDo) Join(table schema.Tabler, on ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminExtensionHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminExtensionHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminExtensionHistoryDo) Group(cols ...field.Expr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminExtensionHistoryDo) Having(conds ...gen.Condition) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminExtensionHistoryDo) Limit(limit int) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminExtensionHistoryDo) Offset(offset int) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminExtensionHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminExtensionHistoryDo) Unscoped() IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminExtensionHistoryDo) Create(values ...*model.AdminExtensionHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminExtensionHistoryDo) CreateInBatches(values []*model.AdminExtensionHistory, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminExtensionHistoryDo) Save(values ...*model.AdminExtensionHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminExtensionHistoryDo) First() (*model.AdminExtensionHistory, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtensionHistory), nil
	}
}

func (a adminExtensionHistoryDo) Take() (*model.AdminExtensionHistory, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtensionHistory), nil
	}
}

func (a adminExtensionHistoryDo) Last() (*model.AdminExtensionHistory, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtensionHistory), nil
	}
}

func (a adminExtensionHistoryDo) Find() ([]*model.AdminExtensionHistory, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminExtensionHistory), err
}

func (a adminExtensionHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminExtensionHistory, err error) {
	buf := make([]*model.AdminExtensionHistory, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminExtensionHistoryDo) FindInBatches(result *[]*model.AdminExtensionHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminExtensionHistoryDo) Attrs(attrs ...field.AssignExpr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminExtensionHistoryDo) Assign(attrs ...field.AssignExpr) IAdminExtensionHistoryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminExtensionHistoryDo) Joins(fields ...field.RelationField) IAdminExtensionHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminExtensionHistoryDo) Preload(fields ...field.RelationField) IAdminExtensionHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminExtensionHistoryDo) FirstOrInit() (*model.AdminExtensionHistory, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtensionHistory), nil
	}
}

func (a adminExtensionHistoryDo) FirstOrCreate() (*model.AdminExtensionHistory, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtensionHistory), nil
	}
}

func (a adminExtensionHistoryDo) FindByPage(offset int, limit int) (result []*model.AdminExtensionHistory, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminExtensionHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminExtensionHistoryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminExtensionHistoryDo) Delete(models ...*model.AdminExtensionHistory) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminExtensionHistoryDo) withDO(do gen.Dao) *adminExtensionHistoryDo {
	a.DO = *do.(*gen.DO)
	return a
}
