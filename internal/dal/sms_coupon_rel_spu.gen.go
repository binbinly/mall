// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsCouponRelSpu(db *gorm.DB, opts ...gen.DOOption) smsCouponRelSpu {
	_smsCouponRelSpu := smsCouponRelSpu{}

	_smsCouponRelSpu.smsCouponRelSpuDo.UseDB(db, opts...)
	_smsCouponRelSpu.smsCouponRelSpuDo.UseModel(&model.SmsCouponRelSpu{})

	tableName := _smsCouponRelSpu.smsCouponRelSpuDo.TableName()
	_smsCouponRelSpu.ALL = field.NewAsterisk(tableName)
	_smsCouponRelSpu.ID = field.NewInt(tableName, "id")
	_smsCouponRelSpu.CouponID = field.NewInt(tableName, "coupon_id")
	_smsCouponRelSpu.SpuID = field.NewInt(tableName, "spu_id")
	_smsCouponRelSpu.SpuName = field.NewString(tableName, "spu_name")

	_smsCouponRelSpu.fillFieldMap()

	return _smsCouponRelSpu
}

type smsCouponRelSpu struct {
	smsCouponRelSpuDo

	ALL      field.Asterisk
	ID       field.Int    // ID
	CouponID field.Int    // 优惠券id
	SpuID    field.Int    // spu_id
	SpuName  field.String // 产品名

	fieldMap map[string]field.Expr
}

func (s smsCouponRelSpu) Table(newTableName string) *smsCouponRelSpu {
	s.smsCouponRelSpuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponRelSpu) As(alias string) *smsCouponRelSpu {
	s.smsCouponRelSpuDo.DO = *(s.smsCouponRelSpuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponRelSpu) updateTableName(table string) *smsCouponRelSpu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.CouponID = field.NewInt(table, "coupon_id")
	s.SpuID = field.NewInt(table, "spu_id")
	s.SpuName = field.NewString(table, "spu_name")

	s.fillFieldMap()

	return s
}

func (s *smsCouponRelSpu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponRelSpu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["spu_name"] = s.SpuName
}

func (s smsCouponRelSpu) clone(db *gorm.DB) smsCouponRelSpu {
	s.smsCouponRelSpuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponRelSpu) replaceDB(db *gorm.DB) smsCouponRelSpu {
	s.smsCouponRelSpuDo.ReplaceDB(db)
	return s
}

type smsCouponRelSpuDo struct{ gen.DO }

type ISmsCouponRelSpuDo interface {
	gen.SubQuery
	Debug() ISmsCouponRelSpuDo
	WithContext(ctx context.Context) ISmsCouponRelSpuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponRelSpuDo
	WriteDB() ISmsCouponRelSpuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponRelSpuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponRelSpuDo
	Not(conds ...gen.Condition) ISmsCouponRelSpuDo
	Or(conds ...gen.Condition) ISmsCouponRelSpuDo
	Select(conds ...field.Expr) ISmsCouponRelSpuDo
	Where(conds ...gen.Condition) ISmsCouponRelSpuDo
	Order(conds ...field.Expr) ISmsCouponRelSpuDo
	Distinct(cols ...field.Expr) ISmsCouponRelSpuDo
	Omit(cols ...field.Expr) ISmsCouponRelSpuDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponRelSpuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelSpuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelSpuDo
	Group(cols ...field.Expr) ISmsCouponRelSpuDo
	Having(conds ...gen.Condition) ISmsCouponRelSpuDo
	Limit(limit int) ISmsCouponRelSpuDo
	Offset(offset int) ISmsCouponRelSpuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponRelSpuDo
	Unscoped() ISmsCouponRelSpuDo
	Create(values ...*model.SmsCouponRelSpu) error
	CreateInBatches(values []*model.SmsCouponRelSpu, batchSize int) error
	Save(values ...*model.SmsCouponRelSpu) error
	First() (*model.SmsCouponRelSpu, error)
	Take() (*model.SmsCouponRelSpu, error)
	Last() (*model.SmsCouponRelSpu, error)
	Find() ([]*model.SmsCouponRelSpu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponRelSpu, err error)
	FindInBatches(result *[]*model.SmsCouponRelSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponRelSpu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponRelSpuDo
	Assign(attrs ...field.AssignExpr) ISmsCouponRelSpuDo
	Joins(fields ...field.RelationField) ISmsCouponRelSpuDo
	Preload(fields ...field.RelationField) ISmsCouponRelSpuDo
	FirstOrInit() (*model.SmsCouponRelSpu, error)
	FirstOrCreate() (*model.SmsCouponRelSpu, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponRelSpu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponRelSpuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponRelSpuDo) Debug() ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponRelSpuDo) WithContext(ctx context.Context) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponRelSpuDo) ReadDB() ISmsCouponRelSpuDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponRelSpuDo) WriteDB() ISmsCouponRelSpuDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponRelSpuDo) Session(config *gorm.Session) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponRelSpuDo) Clauses(conds ...clause.Expression) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponRelSpuDo) Returning(value interface{}, columns ...string) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponRelSpuDo) Not(conds ...gen.Condition) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponRelSpuDo) Or(conds ...gen.Condition) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponRelSpuDo) Select(conds ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponRelSpuDo) Where(conds ...gen.Condition) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponRelSpuDo) Order(conds ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponRelSpuDo) Distinct(cols ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponRelSpuDo) Omit(cols ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponRelSpuDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponRelSpuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponRelSpuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponRelSpuDo) Group(cols ...field.Expr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponRelSpuDo) Having(conds ...gen.Condition) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponRelSpuDo) Limit(limit int) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponRelSpuDo) Offset(offset int) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponRelSpuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponRelSpuDo) Unscoped() ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponRelSpuDo) Create(values ...*model.SmsCouponRelSpu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponRelSpuDo) CreateInBatches(values []*model.SmsCouponRelSpu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponRelSpuDo) Save(values ...*model.SmsCouponRelSpu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponRelSpuDo) First() (*model.SmsCouponRelSpu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelSpu), nil
	}
}

func (s smsCouponRelSpuDo) Take() (*model.SmsCouponRelSpu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelSpu), nil
	}
}

func (s smsCouponRelSpuDo) Last() (*model.SmsCouponRelSpu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelSpu), nil
	}
}

func (s smsCouponRelSpuDo) Find() ([]*model.SmsCouponRelSpu, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponRelSpu), err
}

func (s smsCouponRelSpuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponRelSpu, err error) {
	buf := make([]*model.SmsCouponRelSpu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponRelSpuDo) FindInBatches(result *[]*model.SmsCouponRelSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponRelSpuDo) Attrs(attrs ...field.AssignExpr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponRelSpuDo) Assign(attrs ...field.AssignExpr) ISmsCouponRelSpuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponRelSpuDo) Joins(fields ...field.RelationField) ISmsCouponRelSpuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponRelSpuDo) Preload(fields ...field.RelationField) ISmsCouponRelSpuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponRelSpuDo) FirstOrInit() (*model.SmsCouponRelSpu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelSpu), nil
	}
}

func (s smsCouponRelSpuDo) FirstOrCreate() (*model.SmsCouponRelSpu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelSpu), nil
	}
}

func (s smsCouponRelSpuDo) FindByPage(offset int, limit int) (result []*model.SmsCouponRelSpu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponRelSpuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponRelSpuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponRelSpuDo) Delete(models ...*model.SmsCouponRelSpu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponRelSpuDo) withDO(do gen.Dao) *smsCouponRelSpuDo {
	s.DO = *do.(*gen.DO)
	return s
}
