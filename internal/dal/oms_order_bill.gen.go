// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newOmsOrderBill(db *gorm.DB, opts ...gen.DOOption) omsOrderBill {
	_omsOrderBill := omsOrderBill{}

	_omsOrderBill.omsOrderBillDo.UseDB(db, opts...)
	_omsOrderBill.omsOrderBillDo.UseModel(&model.OmsOrderBill{})

	tableName := _omsOrderBill.omsOrderBillDo.TableName()
	_omsOrderBill.ALL = field.NewAsterisk(tableName)
	_omsOrderBill.ID = field.NewInt(tableName, "id")
	_omsOrderBill.MemberID = field.NewInt(tableName, "member_id")
	_omsOrderBill.OrderID = field.NewInt(tableName, "order_id")
	_omsOrderBill.Type = field.NewInt8(tableName, "type")
	_omsOrderBill.Name = field.NewString(tableName, "name")
	_omsOrderBill.Phone = field.NewString(tableName, "phone")
	_omsOrderBill.Email = field.NewString(tableName, "email")
	_omsOrderBill.Code = field.NewString(tableName, "code")
	_omsOrderBill.Address = field.NewString(tableName, "address")
	_omsOrderBill.BankName = field.NewString(tableName, "bank_name")
	_omsOrderBill.BankAccount = field.NewString(tableName, "bank_account")
	_omsOrderBill.IsFinish = field.NewInt8(tableName, "is_finish")
	_omsOrderBill.CreatedAt = field.NewTime(tableName, "created_at")
	_omsOrderBill.UpdatedAt = field.NewTime(tableName, "updated_at")

	_omsOrderBill.fillFieldMap()

	return _omsOrderBill
}

type omsOrderBill struct {
	omsOrderBillDo

	ALL         field.Asterisk
	ID          field.Int    // ID
	MemberID    field.Int    // 用户id
	OrderID     field.Int    // 订单id
	Type        field.Int8   // 类型：0:个人,1:企业
	Name        field.String // 名称/公司名称
	Phone       field.String // 手机号
	Email       field.String // 邮箱
	Code        field.String // 税号
	Address     field.String // 地址
	BankName    field.String // 开户行
	BankAccount field.String // 银行账号
	IsFinish    field.Int8   // 是否开票
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (o omsOrderBill) Table(newTableName string) *omsOrderBill {
	o.omsOrderBillDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderBill) As(alias string) *omsOrderBill {
	o.omsOrderBillDo.DO = *(o.omsOrderBillDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderBill) updateTableName(table string) *omsOrderBill {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt(table, "id")
	o.MemberID = field.NewInt(table, "member_id")
	o.OrderID = field.NewInt(table, "order_id")
	o.Type = field.NewInt8(table, "type")
	o.Name = field.NewString(table, "name")
	o.Phone = field.NewString(table, "phone")
	o.Email = field.NewString(table, "email")
	o.Code = field.NewString(table, "code")
	o.Address = field.NewString(table, "address")
	o.BankName = field.NewString(table, "bank_name")
	o.BankAccount = field.NewString(table, "bank_account")
	o.IsFinish = field.NewInt8(table, "is_finish")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *omsOrderBill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderBill) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 14)
	o.fieldMap["id"] = o.ID
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["type"] = o.Type
	o.fieldMap["name"] = o.Name
	o.fieldMap["phone"] = o.Phone
	o.fieldMap["email"] = o.Email
	o.fieldMap["code"] = o.Code
	o.fieldMap["address"] = o.Address
	o.fieldMap["bank_name"] = o.BankName
	o.fieldMap["bank_account"] = o.BankAccount
	o.fieldMap["is_finish"] = o.IsFinish
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o omsOrderBill) clone(db *gorm.DB) omsOrderBill {
	o.omsOrderBillDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderBill) replaceDB(db *gorm.DB) omsOrderBill {
	o.omsOrderBillDo.ReplaceDB(db)
	return o
}

type omsOrderBillDo struct{ gen.DO }

type IOmsOrderBillDo interface {
	gen.SubQuery
	Debug() IOmsOrderBillDo
	WithContext(ctx context.Context) IOmsOrderBillDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderBillDo
	WriteDB() IOmsOrderBillDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderBillDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderBillDo
	Not(conds ...gen.Condition) IOmsOrderBillDo
	Or(conds ...gen.Condition) IOmsOrderBillDo
	Select(conds ...field.Expr) IOmsOrderBillDo
	Where(conds ...gen.Condition) IOmsOrderBillDo
	Order(conds ...field.Expr) IOmsOrderBillDo
	Distinct(cols ...field.Expr) IOmsOrderBillDo
	Omit(cols ...field.Expr) IOmsOrderBillDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderBillDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderBillDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderBillDo
	Group(cols ...field.Expr) IOmsOrderBillDo
	Having(conds ...gen.Condition) IOmsOrderBillDo
	Limit(limit int) IOmsOrderBillDo
	Offset(offset int) IOmsOrderBillDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderBillDo
	Unscoped() IOmsOrderBillDo
	Create(values ...*model.OmsOrderBill) error
	CreateInBatches(values []*model.OmsOrderBill, batchSize int) error
	Save(values ...*model.OmsOrderBill) error
	First() (*model.OmsOrderBill, error)
	Take() (*model.OmsOrderBill, error)
	Last() (*model.OmsOrderBill, error)
	Find() ([]*model.OmsOrderBill, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderBill, err error)
	FindInBatches(result *[]*model.OmsOrderBill, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderBill) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderBillDo
	Assign(attrs ...field.AssignExpr) IOmsOrderBillDo
	Joins(fields ...field.RelationField) IOmsOrderBillDo
	Preload(fields ...field.RelationField) IOmsOrderBillDo
	FirstOrInit() (*model.OmsOrderBill, error)
	FirstOrCreate() (*model.OmsOrderBill, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderBill, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderBillDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderBillDo) Debug() IOmsOrderBillDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderBillDo) WithContext(ctx context.Context) IOmsOrderBillDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderBillDo) ReadDB() IOmsOrderBillDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderBillDo) WriteDB() IOmsOrderBillDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderBillDo) Session(config *gorm.Session) IOmsOrderBillDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderBillDo) Clauses(conds ...clause.Expression) IOmsOrderBillDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderBillDo) Returning(value interface{}, columns ...string) IOmsOrderBillDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderBillDo) Not(conds ...gen.Condition) IOmsOrderBillDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderBillDo) Or(conds ...gen.Condition) IOmsOrderBillDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderBillDo) Select(conds ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderBillDo) Where(conds ...gen.Condition) IOmsOrderBillDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderBillDo) Order(conds ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderBillDo) Distinct(cols ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderBillDo) Omit(cols ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderBillDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderBillDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderBillDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderBillDo) Group(cols ...field.Expr) IOmsOrderBillDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderBillDo) Having(conds ...gen.Condition) IOmsOrderBillDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderBillDo) Limit(limit int) IOmsOrderBillDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderBillDo) Offset(offset int) IOmsOrderBillDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderBillDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderBillDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderBillDo) Unscoped() IOmsOrderBillDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderBillDo) Create(values ...*model.OmsOrderBill) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderBillDo) CreateInBatches(values []*model.OmsOrderBill, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderBillDo) Save(values ...*model.OmsOrderBill) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderBillDo) First() (*model.OmsOrderBill, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderBill), nil
	}
}

func (o omsOrderBillDo) Take() (*model.OmsOrderBill, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderBill), nil
	}
}

func (o omsOrderBillDo) Last() (*model.OmsOrderBill, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderBill), nil
	}
}

func (o omsOrderBillDo) Find() ([]*model.OmsOrderBill, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderBill), err
}

func (o omsOrderBillDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderBill, err error) {
	buf := make([]*model.OmsOrderBill, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderBillDo) FindInBatches(result *[]*model.OmsOrderBill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderBillDo) Attrs(attrs ...field.AssignExpr) IOmsOrderBillDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderBillDo) Assign(attrs ...field.AssignExpr) IOmsOrderBillDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderBillDo) Joins(fields ...field.RelationField) IOmsOrderBillDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderBillDo) Preload(fields ...field.RelationField) IOmsOrderBillDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderBillDo) FirstOrInit() (*model.OmsOrderBill, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderBill), nil
	}
}

func (o omsOrderBillDo) FirstOrCreate() (*model.OmsOrderBill, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderBill), nil
	}
}

func (o omsOrderBillDo) FindByPage(offset int, limit int) (result []*model.OmsOrderBill, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderBillDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderBillDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderBillDo) Delete(models ...*model.OmsOrderBill) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderBillDo) withDO(do gen.Dao) *omsOrderBillDo {
	o.DO = *do.(*gen.DO)
	return o
}
