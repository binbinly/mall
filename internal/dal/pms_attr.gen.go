// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsAttr(db *gorm.DB, opts ...gen.DOOption) pmsAttr {
	_pmsAttr := pmsAttr{}

	_pmsAttr.pmsAttrDo.UseDB(db, opts...)
	_pmsAttr.pmsAttrDo.UseModel(&model.PmsAttr{})

	tableName := _pmsAttr.pmsAttrDo.TableName()
	_pmsAttr.ALL = field.NewAsterisk(tableName)
	_pmsAttr.ID = field.NewInt(tableName, "id")
	_pmsAttr.CatID = field.NewInt(tableName, "cat_id")
	_pmsAttr.Name = field.NewString(tableName, "name")
	_pmsAttr.Icon = field.NewString(tableName, "icon")
	_pmsAttr.Values = field.NewString(tableName, "values")
	_pmsAttr.Type = field.NewInt8(tableName, "type")
	_pmsAttr.IsMany = field.NewInt8(tableName, "is_many")
	_pmsAttr.IsSearch = field.NewInt8(tableName, "is_search")
	_pmsAttr.IsShow = field.NewInt8(tableName, "is_show")
	_pmsAttr.IsRelease = field.NewInt8(tableName, "is_release")
	_pmsAttr.CreatedAt = field.NewTime(tableName, "created_at")
	_pmsAttr.UpdatedAt = field.NewTime(tableName, "updated_at")

	_pmsAttr.fillFieldMap()

	return _pmsAttr
}

type pmsAttr struct {
	pmsAttrDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	CatID     field.Int    // 产品分类
	Name      field.String // 属性名
	Icon      field.String // 属性图标
	Values    field.String // 可选值多个逗号连接
	Type      field.Int8   // 属性类型[0-销售属性，1-基本属性，2-既是销售属性又是基本属性]
	IsMany    field.Int8   // 值类型，是否多个值
	IsSearch  field.Int8   // 是否需要搜索
	IsShow    field.Int8   // 是否展示在介绍上
	IsRelease field.Int8   // 是否发布上线
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (p pmsAttr) Table(newTableName string) *pmsAttr {
	p.pmsAttrDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsAttr) As(alias string) *pmsAttr {
	p.pmsAttrDo.DO = *(p.pmsAttrDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsAttr) updateTableName(table string) *pmsAttr {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.CatID = field.NewInt(table, "cat_id")
	p.Name = field.NewString(table, "name")
	p.Icon = field.NewString(table, "icon")
	p.Values = field.NewString(table, "values")
	p.Type = field.NewInt8(table, "type")
	p.IsMany = field.NewInt8(table, "is_many")
	p.IsSearch = field.NewInt8(table, "is_search")
	p.IsShow = field.NewInt8(table, "is_show")
	p.IsRelease = field.NewInt8(table, "is_release")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *pmsAttr) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsAttr) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["cat_id"] = p.CatID
	p.fieldMap["name"] = p.Name
	p.fieldMap["icon"] = p.Icon
	p.fieldMap["values"] = p.Values
	p.fieldMap["type"] = p.Type
	p.fieldMap["is_many"] = p.IsMany
	p.fieldMap["is_search"] = p.IsSearch
	p.fieldMap["is_show"] = p.IsShow
	p.fieldMap["is_release"] = p.IsRelease
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p pmsAttr) clone(db *gorm.DB) pmsAttr {
	p.pmsAttrDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsAttr) replaceDB(db *gorm.DB) pmsAttr {
	p.pmsAttrDo.ReplaceDB(db)
	return p
}

type pmsAttrDo struct{ gen.DO }

type IPmsAttrDo interface {
	gen.SubQuery
	Debug() IPmsAttrDo
	WithContext(ctx context.Context) IPmsAttrDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsAttrDo
	WriteDB() IPmsAttrDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsAttrDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsAttrDo
	Not(conds ...gen.Condition) IPmsAttrDo
	Or(conds ...gen.Condition) IPmsAttrDo
	Select(conds ...field.Expr) IPmsAttrDo
	Where(conds ...gen.Condition) IPmsAttrDo
	Order(conds ...field.Expr) IPmsAttrDo
	Distinct(cols ...field.Expr) IPmsAttrDo
	Omit(cols ...field.Expr) IPmsAttrDo
	Join(table schema.Tabler, on ...field.Expr) IPmsAttrDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsAttrDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsAttrDo
	Group(cols ...field.Expr) IPmsAttrDo
	Having(conds ...gen.Condition) IPmsAttrDo
	Limit(limit int) IPmsAttrDo
	Offset(offset int) IPmsAttrDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsAttrDo
	Unscoped() IPmsAttrDo
	Create(values ...*model.PmsAttr) error
	CreateInBatches(values []*model.PmsAttr, batchSize int) error
	Save(values ...*model.PmsAttr) error
	First() (*model.PmsAttr, error)
	Take() (*model.PmsAttr, error)
	Last() (*model.PmsAttr, error)
	Find() ([]*model.PmsAttr, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttr, err error)
	FindInBatches(result *[]*model.PmsAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsAttr) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsAttrDo
	Assign(attrs ...field.AssignExpr) IPmsAttrDo
	Joins(fields ...field.RelationField) IPmsAttrDo
	Preload(fields ...field.RelationField) IPmsAttrDo
	FirstOrInit() (*model.PmsAttr, error)
	FirstOrCreate() (*model.PmsAttr, error)
	FindByPage(offset int, limit int) (result []*model.PmsAttr, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsAttrDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsAttrDo) Debug() IPmsAttrDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsAttrDo) WithContext(ctx context.Context) IPmsAttrDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsAttrDo) ReadDB() IPmsAttrDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsAttrDo) WriteDB() IPmsAttrDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsAttrDo) Session(config *gorm.Session) IPmsAttrDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsAttrDo) Clauses(conds ...clause.Expression) IPmsAttrDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsAttrDo) Returning(value interface{}, columns ...string) IPmsAttrDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsAttrDo) Not(conds ...gen.Condition) IPmsAttrDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsAttrDo) Or(conds ...gen.Condition) IPmsAttrDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsAttrDo) Select(conds ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsAttrDo) Where(conds ...gen.Condition) IPmsAttrDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsAttrDo) Order(conds ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsAttrDo) Distinct(cols ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsAttrDo) Omit(cols ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsAttrDo) Join(table schema.Tabler, on ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsAttrDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsAttrDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsAttrDo) Group(cols ...field.Expr) IPmsAttrDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsAttrDo) Having(conds ...gen.Condition) IPmsAttrDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsAttrDo) Limit(limit int) IPmsAttrDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsAttrDo) Offset(offset int) IPmsAttrDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsAttrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsAttrDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsAttrDo) Unscoped() IPmsAttrDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsAttrDo) Create(values ...*model.PmsAttr) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsAttrDo) CreateInBatches(values []*model.PmsAttr, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsAttrDo) Save(values ...*model.PmsAttr) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsAttrDo) First() (*model.PmsAttr, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttr), nil
	}
}

func (p pmsAttrDo) Take() (*model.PmsAttr, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttr), nil
	}
}

func (p pmsAttrDo) Last() (*model.PmsAttr, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttr), nil
	}
}

func (p pmsAttrDo) Find() ([]*model.PmsAttr, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsAttr), err
}

func (p pmsAttrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttr, err error) {
	buf := make([]*model.PmsAttr, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsAttrDo) FindInBatches(result *[]*model.PmsAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsAttrDo) Attrs(attrs ...field.AssignExpr) IPmsAttrDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsAttrDo) Assign(attrs ...field.AssignExpr) IPmsAttrDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsAttrDo) Joins(fields ...field.RelationField) IPmsAttrDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsAttrDo) Preload(fields ...field.RelationField) IPmsAttrDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsAttrDo) FirstOrInit() (*model.PmsAttr, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttr), nil
	}
}

func (p pmsAttrDo) FirstOrCreate() (*model.PmsAttr, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttr), nil
	}
}

func (p pmsAttrDo) FindByPage(offset int, limit int) (result []*model.PmsAttr, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsAttrDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsAttrDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsAttrDo) Delete(models ...*model.PmsAttr) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsAttrDo) withDO(do gen.Dao) *pmsAttrDo {
	p.DO = *do.(*gen.DO)
	return p
}
