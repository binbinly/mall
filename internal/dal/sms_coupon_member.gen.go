// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsCouponMember(db *gorm.DB, opts ...gen.DOOption) smsCouponMember {
	_smsCouponMember := smsCouponMember{}

	_smsCouponMember.smsCouponMemberDo.UseDB(db, opts...)
	_smsCouponMember.smsCouponMemberDo.UseModel(&model.SmsCouponMember{})

	tableName := _smsCouponMember.smsCouponMemberDo.TableName()
	_smsCouponMember.ALL = field.NewAsterisk(tableName)
	_smsCouponMember.ID = field.NewInt(tableName, "id")
	_smsCouponMember.MemberID = field.NewInt(tableName, "member_id")
	_smsCouponMember.CouponID = field.NewInt(tableName, "coupon_id")
	_smsCouponMember.Nickname = field.NewString(tableName, "nickname")
	_smsCouponMember.GetType = field.NewInt8(tableName, "get_type")
	_smsCouponMember.Status = field.NewInt8(tableName, "status")
	_smsCouponMember.OrderID = field.NewInt(tableName, "order_id")
	_smsCouponMember.OrderNo = field.NewString(tableName, "order_no")
	_smsCouponMember.UsedAt = field.NewTime(tableName, "used_at")
	_smsCouponMember.CreatedAt = field.NewTime(tableName, "created_at")
	_smsCouponMember.UpdatedAt = field.NewTime(tableName, "updated_at")

	_smsCouponMember.fillFieldMap()

	return _smsCouponMember
}

type smsCouponMember struct {
	smsCouponMemberDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	MemberID  field.Int    // 用户id
	CouponID  field.Int    // 优惠券id
	Nickname  field.String // 会员昵称
	GetType   field.Int8   // 获取方式[0->后台赠送；1->主动领取]
	Status    field.Int8   // 使用状态[0->未使用；1->已使用；2->已过期]
	OrderID   field.Int    // 订单id
	OrderNo   field.String // 订单号
	UsedAt    field.Time   // 使用时间
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s smsCouponMember) Table(newTableName string) *smsCouponMember {
	s.smsCouponMemberDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponMember) As(alias string) *smsCouponMember {
	s.smsCouponMemberDo.DO = *(s.smsCouponMemberDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponMember) updateTableName(table string) *smsCouponMember {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.MemberID = field.NewInt(table, "member_id")
	s.CouponID = field.NewInt(table, "coupon_id")
	s.Nickname = field.NewString(table, "nickname")
	s.GetType = field.NewInt8(table, "get_type")
	s.Status = field.NewInt8(table, "status")
	s.OrderID = field.NewInt(table, "order_id")
	s.OrderNo = field.NewString(table, "order_no")
	s.UsedAt = field.NewTime(table, "used_at")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *smsCouponMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponMember) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["member_id"] = s.MemberID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["nickname"] = s.Nickname
	s.fieldMap["get_type"] = s.GetType
	s.fieldMap["status"] = s.Status
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["order_no"] = s.OrderNo
	s.fieldMap["used_at"] = s.UsedAt
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s smsCouponMember) clone(db *gorm.DB) smsCouponMember {
	s.smsCouponMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponMember) replaceDB(db *gorm.DB) smsCouponMember {
	s.smsCouponMemberDo.ReplaceDB(db)
	return s
}

type smsCouponMemberDo struct{ gen.DO }

type ISmsCouponMemberDo interface {
	gen.SubQuery
	Debug() ISmsCouponMemberDo
	WithContext(ctx context.Context) ISmsCouponMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponMemberDo
	WriteDB() ISmsCouponMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponMemberDo
	Not(conds ...gen.Condition) ISmsCouponMemberDo
	Or(conds ...gen.Condition) ISmsCouponMemberDo
	Select(conds ...field.Expr) ISmsCouponMemberDo
	Where(conds ...gen.Condition) ISmsCouponMemberDo
	Order(conds ...field.Expr) ISmsCouponMemberDo
	Distinct(cols ...field.Expr) ISmsCouponMemberDo
	Omit(cols ...field.Expr) ISmsCouponMemberDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponMemberDo
	Group(cols ...field.Expr) ISmsCouponMemberDo
	Having(conds ...gen.Condition) ISmsCouponMemberDo
	Limit(limit int) ISmsCouponMemberDo
	Offset(offset int) ISmsCouponMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponMemberDo
	Unscoped() ISmsCouponMemberDo
	Create(values ...*model.SmsCouponMember) error
	CreateInBatches(values []*model.SmsCouponMember, batchSize int) error
	Save(values ...*model.SmsCouponMember) error
	First() (*model.SmsCouponMember, error)
	Take() (*model.SmsCouponMember, error)
	Last() (*model.SmsCouponMember, error)
	Find() ([]*model.SmsCouponMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponMember, err error)
	FindInBatches(result *[]*model.SmsCouponMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponMemberDo
	Assign(attrs ...field.AssignExpr) ISmsCouponMemberDo
	Joins(fields ...field.RelationField) ISmsCouponMemberDo
	Preload(fields ...field.RelationField) ISmsCouponMemberDo
	FirstOrInit() (*model.SmsCouponMember, error)
	FirstOrCreate() (*model.SmsCouponMember, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponMemberDo) Debug() ISmsCouponMemberDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponMemberDo) WithContext(ctx context.Context) ISmsCouponMemberDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponMemberDo) ReadDB() ISmsCouponMemberDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponMemberDo) WriteDB() ISmsCouponMemberDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponMemberDo) Session(config *gorm.Session) ISmsCouponMemberDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponMemberDo) Clauses(conds ...clause.Expression) ISmsCouponMemberDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponMemberDo) Returning(value interface{}, columns ...string) ISmsCouponMemberDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponMemberDo) Not(conds ...gen.Condition) ISmsCouponMemberDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponMemberDo) Or(conds ...gen.Condition) ISmsCouponMemberDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponMemberDo) Select(conds ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponMemberDo) Where(conds ...gen.Condition) ISmsCouponMemberDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponMemberDo) Order(conds ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponMemberDo) Distinct(cols ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponMemberDo) Omit(cols ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponMemberDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponMemberDo) Group(cols ...field.Expr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponMemberDo) Having(conds ...gen.Condition) ISmsCouponMemberDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponMemberDo) Limit(limit int) ISmsCouponMemberDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponMemberDo) Offset(offset int) ISmsCouponMemberDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponMemberDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponMemberDo) Unscoped() ISmsCouponMemberDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponMemberDo) Create(values ...*model.SmsCouponMember) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponMemberDo) CreateInBatches(values []*model.SmsCouponMember, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponMemberDo) Save(values ...*model.SmsCouponMember) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponMemberDo) First() (*model.SmsCouponMember, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponMember), nil
	}
}

func (s smsCouponMemberDo) Take() (*model.SmsCouponMember, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponMember), nil
	}
}

func (s smsCouponMemberDo) Last() (*model.SmsCouponMember, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponMember), nil
	}
}

func (s smsCouponMemberDo) Find() ([]*model.SmsCouponMember, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponMember), err
}

func (s smsCouponMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponMember, err error) {
	buf := make([]*model.SmsCouponMember, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponMemberDo) FindInBatches(result *[]*model.SmsCouponMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponMemberDo) Attrs(attrs ...field.AssignExpr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponMemberDo) Assign(attrs ...field.AssignExpr) ISmsCouponMemberDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponMemberDo) Joins(fields ...field.RelationField) ISmsCouponMemberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponMemberDo) Preload(fields ...field.RelationField) ISmsCouponMemberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponMemberDo) FirstOrInit() (*model.SmsCouponMember, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponMember), nil
	}
}

func (s smsCouponMemberDo) FirstOrCreate() (*model.SmsCouponMember, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponMember), nil
	}
}

func (s smsCouponMemberDo) FindByPage(offset int, limit int) (result []*model.SmsCouponMember, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponMemberDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponMemberDo) Delete(models ...*model.SmsCouponMember) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponMemberDo) withDO(do gen.Dao) *smsCouponMemberDo {
	s.DO = *do.(*gen.DO)
	return s
}
