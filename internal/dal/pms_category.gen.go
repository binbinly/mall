// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsCategory(db *gorm.DB, opts ...gen.DOOption) pmsCategory {
	_pmsCategory := pmsCategory{}

	_pmsCategory.pmsCategoryDo.UseDB(db, opts...)
	_pmsCategory.pmsCategoryDo.UseModel(&model.PmsCategory{})

	tableName := _pmsCategory.pmsCategoryDo.TableName()
	_pmsCategory.ALL = field.NewAsterisk(tableName)
	_pmsCategory.ID = field.NewInt(tableName, "id")
	_pmsCategory.Name = field.NewString(tableName, "name")
	_pmsCategory.ParentID = field.NewInt(tableName, "parent_id")
	_pmsCategory.Level = field.NewInt8(tableName, "level")
	_pmsCategory.Icon = field.NewString(tableName, "icon")
	_pmsCategory.ProductUnit = field.NewString(tableName, "product_unit")
	_pmsCategory.IsRelease = field.NewInt8(tableName, "is_release")
	_pmsCategory.Sort = field.NewInt32(tableName, "sort")

	_pmsCategory.fillFieldMap()

	return _pmsCategory
}

type pmsCategory struct {
	pmsCategoryDo

	ALL         field.Asterisk
	ID          field.Int    // ID
	Name        field.String // 分类名
	ParentID    field.Int    // 上级分类
	Level       field.Int8   // 层级
	Icon        field.String // 图标
	ProductUnit field.String // 计量单位
	IsRelease   field.Int8   // 是否发布上线
	Sort        field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (p pmsCategory) Table(newTableName string) *pmsCategory {
	p.pmsCategoryDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsCategory) As(alias string) *pmsCategory {
	p.pmsCategoryDo.DO = *(p.pmsCategoryDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsCategory) updateTableName(table string) *pmsCategory {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.Name = field.NewString(table, "name")
	p.ParentID = field.NewInt(table, "parent_id")
	p.Level = field.NewInt8(table, "level")
	p.Icon = field.NewString(table, "icon")
	p.ProductUnit = field.NewString(table, "product_unit")
	p.IsRelease = field.NewInt8(table, "is_release")
	p.Sort = field.NewInt32(table, "sort")

	p.fillFieldMap()

	return p
}

func (p *pmsCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsCategory) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["parent_id"] = p.ParentID
	p.fieldMap["level"] = p.Level
	p.fieldMap["icon"] = p.Icon
	p.fieldMap["product_unit"] = p.ProductUnit
	p.fieldMap["is_release"] = p.IsRelease
	p.fieldMap["sort"] = p.Sort
}

func (p pmsCategory) clone(db *gorm.DB) pmsCategory {
	p.pmsCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsCategory) replaceDB(db *gorm.DB) pmsCategory {
	p.pmsCategoryDo.ReplaceDB(db)
	return p
}

type pmsCategoryDo struct{ gen.DO }

type IPmsCategoryDo interface {
	gen.SubQuery
	Debug() IPmsCategoryDo
	WithContext(ctx context.Context) IPmsCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsCategoryDo
	WriteDB() IPmsCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsCategoryDo
	Not(conds ...gen.Condition) IPmsCategoryDo
	Or(conds ...gen.Condition) IPmsCategoryDo
	Select(conds ...field.Expr) IPmsCategoryDo
	Where(conds ...gen.Condition) IPmsCategoryDo
	Order(conds ...field.Expr) IPmsCategoryDo
	Distinct(cols ...field.Expr) IPmsCategoryDo
	Omit(cols ...field.Expr) IPmsCategoryDo
	Join(table schema.Tabler, on ...field.Expr) IPmsCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryDo
	Group(cols ...field.Expr) IPmsCategoryDo
	Having(conds ...gen.Condition) IPmsCategoryDo
	Limit(limit int) IPmsCategoryDo
	Offset(offset int) IPmsCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCategoryDo
	Unscoped() IPmsCategoryDo
	Create(values ...*model.PmsCategory) error
	CreateInBatches(values []*model.PmsCategory, batchSize int) error
	Save(values ...*model.PmsCategory) error
	First() (*model.PmsCategory, error)
	Take() (*model.PmsCategory, error)
	Last() (*model.PmsCategory, error)
	Find() ([]*model.PmsCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsCategory, err error)
	FindInBatches(result *[]*model.PmsCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsCategoryDo
	Assign(attrs ...field.AssignExpr) IPmsCategoryDo
	Joins(fields ...field.RelationField) IPmsCategoryDo
	Preload(fields ...field.RelationField) IPmsCategoryDo
	FirstOrInit() (*model.PmsCategory, error)
	FirstOrCreate() (*model.PmsCategory, error)
	FindByPage(offset int, limit int) (result []*model.PmsCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsCategoryDo) Debug() IPmsCategoryDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsCategoryDo) WithContext(ctx context.Context) IPmsCategoryDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsCategoryDo) ReadDB() IPmsCategoryDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsCategoryDo) WriteDB() IPmsCategoryDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsCategoryDo) Session(config *gorm.Session) IPmsCategoryDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsCategoryDo) Clauses(conds ...clause.Expression) IPmsCategoryDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsCategoryDo) Returning(value interface{}, columns ...string) IPmsCategoryDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsCategoryDo) Not(conds ...gen.Condition) IPmsCategoryDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsCategoryDo) Or(conds ...gen.Condition) IPmsCategoryDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsCategoryDo) Select(conds ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsCategoryDo) Where(conds ...gen.Condition) IPmsCategoryDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsCategoryDo) Order(conds ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsCategoryDo) Distinct(cols ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsCategoryDo) Omit(cols ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsCategoryDo) Join(table schema.Tabler, on ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsCategoryDo) Group(cols ...field.Expr) IPmsCategoryDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsCategoryDo) Having(conds ...gen.Condition) IPmsCategoryDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsCategoryDo) Limit(limit int) IPmsCategoryDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsCategoryDo) Offset(offset int) IPmsCategoryDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCategoryDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsCategoryDo) Unscoped() IPmsCategoryDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsCategoryDo) Create(values ...*model.PmsCategory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsCategoryDo) CreateInBatches(values []*model.PmsCategory, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsCategoryDo) Save(values ...*model.PmsCategory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsCategoryDo) First() (*model.PmsCategory, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategory), nil
	}
}

func (p pmsCategoryDo) Take() (*model.PmsCategory, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategory), nil
	}
}

func (p pmsCategoryDo) Last() (*model.PmsCategory, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategory), nil
	}
}

func (p pmsCategoryDo) Find() ([]*model.PmsCategory, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsCategory), err
}

func (p pmsCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsCategory, err error) {
	buf := make([]*model.PmsCategory, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsCategoryDo) FindInBatches(result *[]*model.PmsCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsCategoryDo) Attrs(attrs ...field.AssignExpr) IPmsCategoryDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsCategoryDo) Assign(attrs ...field.AssignExpr) IPmsCategoryDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsCategoryDo) Joins(fields ...field.RelationField) IPmsCategoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsCategoryDo) Preload(fields ...field.RelationField) IPmsCategoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsCategoryDo) FirstOrInit() (*model.PmsCategory, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategory), nil
	}
}

func (p pmsCategoryDo) FirstOrCreate() (*model.PmsCategory, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategory), nil
	}
}

func (p pmsCategoryDo) FindByPage(offset int, limit int) (result []*model.PmsCategory, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsCategoryDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsCategoryDo) Delete(models ...*model.PmsCategory) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsCategoryDo) withDO(do gen.Dao) *pmsCategoryDo {
	p.DO = *do.(*gen.DO)
	return p
}
