// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newUmsMemberStat(db *gorm.DB, opts ...gen.DOOption) umsMemberStat {
	_umsMemberStat := umsMemberStat{}

	_umsMemberStat.umsMemberStatDo.UseDB(db, opts...)
	_umsMemberStat.umsMemberStatDo.UseModel(&model.UmsMemberStat{})

	tableName := _umsMemberStat.umsMemberStatDo.TableName()
	_umsMemberStat.ALL = field.NewAsterisk(tableName)
	_umsMemberStat.ID = field.NewInt(tableName, "id")
	_umsMemberStat.MemberID = field.NewInt(tableName, "member_id")
	_umsMemberStat.TotalAmount = field.NewInt64(tableName, "total_amount")
	_umsMemberStat.CouponAmount = field.NewInt64(tableName, "coupon_amount")
	_umsMemberStat.OrderCount = field.NewInt64(tableName, "order_count")
	_umsMemberStat.CouponCount = field.NewInt64(tableName, "coupon_count")
	_umsMemberStat.CommentCount = field.NewInt64(tableName, "comment_count")
	_umsMemberStat.ReturnCount = field.NewInt64(tableName, "return_count")
	_umsMemberStat.LoginCount = field.NewInt64(tableName, "login_count")
	_umsMemberStat.FollowCount = field.NewInt64(tableName, "follow_count")
	_umsMemberStat.FensCount = field.NewInt64(tableName, "fens_count")
	_umsMemberStat.CollectProductCount = field.NewInt64(tableName, "collect_product_count")
	_umsMemberStat.CollectSubjectCount = field.NewInt64(tableName, "collect_subject_count")
	_umsMemberStat.CollectCommentCount = field.NewInt64(tableName, "collect_comment_count")
	_umsMemberStat.InviteCount = field.NewInt64(tableName, "invite_count")

	_umsMemberStat.fillFieldMap()

	return _umsMemberStat
}

type umsMemberStat struct {
	umsMemberStatDo

	ALL                 field.Asterisk
	ID                  field.Int   // ID
	MemberID            field.Int   // 用户id
	TotalAmount         field.Int64 // 累计消费金额/分
	CouponAmount        field.Int64 // 累计优惠金额/分
	OrderCount          field.Int64 // 订单数
	CouponCount         field.Int64 // 优惠券数
	CommentCount        field.Int64 // 评价数
	ReturnCount         field.Int64 // 退货数
	LoginCount          field.Int64 // 登录次数
	FollowCount         field.Int64 // 关注数
	FensCount           field.Int64 // 粉丝数
	CollectProductCount field.Int64 // 收藏商品数
	CollectSubjectCount field.Int64 // 收藏专题活动数
	CollectCommentCount field.Int64 // 收藏评论数
	InviteCount         field.Int64 // 邀请好友数

	fieldMap map[string]field.Expr
}

func (u umsMemberStat) Table(newTableName string) *umsMemberStat {
	u.umsMemberStatDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberStat) As(alias string) *umsMemberStat {
	u.umsMemberStatDo.DO = *(u.umsMemberStatDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberStat) updateTableName(table string) *umsMemberStat {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.MemberID = field.NewInt(table, "member_id")
	u.TotalAmount = field.NewInt64(table, "total_amount")
	u.CouponAmount = field.NewInt64(table, "coupon_amount")
	u.OrderCount = field.NewInt64(table, "order_count")
	u.CouponCount = field.NewInt64(table, "coupon_count")
	u.CommentCount = field.NewInt64(table, "comment_count")
	u.ReturnCount = field.NewInt64(table, "return_count")
	u.LoginCount = field.NewInt64(table, "login_count")
	u.FollowCount = field.NewInt64(table, "follow_count")
	u.FensCount = field.NewInt64(table, "fens_count")
	u.CollectProductCount = field.NewInt64(table, "collect_product_count")
	u.CollectSubjectCount = field.NewInt64(table, "collect_subject_count")
	u.CollectCommentCount = field.NewInt64(table, "collect_comment_count")
	u.InviteCount = field.NewInt64(table, "invite_count")

	u.fillFieldMap()

	return u
}

func (u *umsMemberStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberStat) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 15)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["total_amount"] = u.TotalAmount
	u.fieldMap["coupon_amount"] = u.CouponAmount
	u.fieldMap["order_count"] = u.OrderCount
	u.fieldMap["coupon_count"] = u.CouponCount
	u.fieldMap["comment_count"] = u.CommentCount
	u.fieldMap["return_count"] = u.ReturnCount
	u.fieldMap["login_count"] = u.LoginCount
	u.fieldMap["follow_count"] = u.FollowCount
	u.fieldMap["fens_count"] = u.FensCount
	u.fieldMap["collect_product_count"] = u.CollectProductCount
	u.fieldMap["collect_subject_count"] = u.CollectSubjectCount
	u.fieldMap["collect_comment_count"] = u.CollectCommentCount
	u.fieldMap["invite_count"] = u.InviteCount
}

func (u umsMemberStat) clone(db *gorm.DB) umsMemberStat {
	u.umsMemberStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberStat) replaceDB(db *gorm.DB) umsMemberStat {
	u.umsMemberStatDo.ReplaceDB(db)
	return u
}

type umsMemberStatDo struct{ gen.DO }

type IUmsMemberStatDo interface {
	gen.SubQuery
	Debug() IUmsMemberStatDo
	WithContext(ctx context.Context) IUmsMemberStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberStatDo
	WriteDB() IUmsMemberStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberStatDo
	Not(conds ...gen.Condition) IUmsMemberStatDo
	Or(conds ...gen.Condition) IUmsMemberStatDo
	Select(conds ...field.Expr) IUmsMemberStatDo
	Where(conds ...gen.Condition) IUmsMemberStatDo
	Order(conds ...field.Expr) IUmsMemberStatDo
	Distinct(cols ...field.Expr) IUmsMemberStatDo
	Omit(cols ...field.Expr) IUmsMemberStatDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatDo
	Group(cols ...field.Expr) IUmsMemberStatDo
	Having(conds ...gen.Condition) IUmsMemberStatDo
	Limit(limit int) IUmsMemberStatDo
	Offset(offset int) IUmsMemberStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberStatDo
	Unscoped() IUmsMemberStatDo
	Create(values ...*model.UmsMemberStat) error
	CreateInBatches(values []*model.UmsMemberStat, batchSize int) error
	Save(values ...*model.UmsMemberStat) error
	First() (*model.UmsMemberStat, error)
	Take() (*model.UmsMemberStat, error)
	Last() (*model.UmsMemberStat, error)
	Find() ([]*model.UmsMemberStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberStat, err error)
	FindInBatches(result *[]*model.UmsMemberStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberStatDo
	Assign(attrs ...field.AssignExpr) IUmsMemberStatDo
	Joins(fields ...field.RelationField) IUmsMemberStatDo
	Preload(fields ...field.RelationField) IUmsMemberStatDo
	FirstOrInit() (*model.UmsMemberStat, error)
	FirstOrCreate() (*model.UmsMemberStat, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberStatDo) Debug() IUmsMemberStatDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberStatDo) WithContext(ctx context.Context) IUmsMemberStatDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberStatDo) ReadDB() IUmsMemberStatDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberStatDo) WriteDB() IUmsMemberStatDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberStatDo) Session(config *gorm.Session) IUmsMemberStatDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberStatDo) Clauses(conds ...clause.Expression) IUmsMemberStatDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberStatDo) Returning(value interface{}, columns ...string) IUmsMemberStatDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberStatDo) Not(conds ...gen.Condition) IUmsMemberStatDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberStatDo) Or(conds ...gen.Condition) IUmsMemberStatDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberStatDo) Select(conds ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberStatDo) Where(conds ...gen.Condition) IUmsMemberStatDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberStatDo) Order(conds ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberStatDo) Distinct(cols ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberStatDo) Omit(cols ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberStatDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberStatDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberStatDo) Group(cols ...field.Expr) IUmsMemberStatDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberStatDo) Having(conds ...gen.Condition) IUmsMemberStatDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberStatDo) Limit(limit int) IUmsMemberStatDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberStatDo) Offset(offset int) IUmsMemberStatDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberStatDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberStatDo) Unscoped() IUmsMemberStatDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberStatDo) Create(values ...*model.UmsMemberStat) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberStatDo) CreateInBatches(values []*model.UmsMemberStat, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberStatDo) Save(values ...*model.UmsMemberStat) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberStatDo) First() (*model.UmsMemberStat, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStat), nil
	}
}

func (u umsMemberStatDo) Take() (*model.UmsMemberStat, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStat), nil
	}
}

func (u umsMemberStatDo) Last() (*model.UmsMemberStat, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStat), nil
	}
}

func (u umsMemberStatDo) Find() ([]*model.UmsMemberStat, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberStat), err
}

func (u umsMemberStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberStat, err error) {
	buf := make([]*model.UmsMemberStat, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberStatDo) FindInBatches(result *[]*model.UmsMemberStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberStatDo) Attrs(attrs ...field.AssignExpr) IUmsMemberStatDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberStatDo) Assign(attrs ...field.AssignExpr) IUmsMemberStatDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberStatDo) Joins(fields ...field.RelationField) IUmsMemberStatDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberStatDo) Preload(fields ...field.RelationField) IUmsMemberStatDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberStatDo) FirstOrInit() (*model.UmsMemberStat, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStat), nil
	}
}

func (u umsMemberStatDo) FirstOrCreate() (*model.UmsMemberStat, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStat), nil
	}
}

func (u umsMemberStatDo) FindByPage(offset int, limit int) (result []*model.UmsMemberStat, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberStatDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberStatDo) Delete(models ...*model.UmsMemberStat) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberStatDo) withDO(do gen.Dao) *umsMemberStatDo {
	u.DO = *do.(*gen.DO)
	return u
}
