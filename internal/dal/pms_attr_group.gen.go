// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsAttrGroup(db *gorm.DB, opts ...gen.DOOption) pmsAttrGroup {
	_pmsAttrGroup := pmsAttrGroup{}

	_pmsAttrGroup.pmsAttrGroupDo.UseDB(db, opts...)
	_pmsAttrGroup.pmsAttrGroupDo.UseModel(&model.PmsAttrGroup{})

	tableName := _pmsAttrGroup.pmsAttrGroupDo.TableName()
	_pmsAttrGroup.ALL = field.NewAsterisk(tableName)
	_pmsAttrGroup.ID = field.NewInt(tableName, "id")
	_pmsAttrGroup.CatID = field.NewInt(tableName, "cat_id")
	_pmsAttrGroup.Name = field.NewString(tableName, "name")
	_pmsAttrGroup.Desc = field.NewString(tableName, "desc")
	_pmsAttrGroup.Icon = field.NewString(tableName, "icon")
	_pmsAttrGroup.Sort = field.NewInt32(tableName, "sort")

	_pmsAttrGroup.fillFieldMap()

	return _pmsAttrGroup
}

type pmsAttrGroup struct {
	pmsAttrGroupDo

	ALL   field.Asterisk
	ID    field.Int    // ID
	CatID field.Int    // 产品分类
	Name  field.String // 分组名
	Desc  field.String // 描述
	Icon  field.String // 图标
	Sort  field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (p pmsAttrGroup) Table(newTableName string) *pmsAttrGroup {
	p.pmsAttrGroupDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsAttrGroup) As(alias string) *pmsAttrGroup {
	p.pmsAttrGroupDo.DO = *(p.pmsAttrGroupDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsAttrGroup) updateTableName(table string) *pmsAttrGroup {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.CatID = field.NewInt(table, "cat_id")
	p.Name = field.NewString(table, "name")
	p.Desc = field.NewString(table, "desc")
	p.Icon = field.NewString(table, "icon")
	p.Sort = field.NewInt32(table, "sort")

	p.fillFieldMap()

	return p
}

func (p *pmsAttrGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsAttrGroup) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["cat_id"] = p.CatID
	p.fieldMap["name"] = p.Name
	p.fieldMap["desc"] = p.Desc
	p.fieldMap["icon"] = p.Icon
	p.fieldMap["sort"] = p.Sort
}

func (p pmsAttrGroup) clone(db *gorm.DB) pmsAttrGroup {
	p.pmsAttrGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsAttrGroup) replaceDB(db *gorm.DB) pmsAttrGroup {
	p.pmsAttrGroupDo.ReplaceDB(db)
	return p
}

type pmsAttrGroupDo struct{ gen.DO }

type IPmsAttrGroupDo interface {
	gen.SubQuery
	Debug() IPmsAttrGroupDo
	WithContext(ctx context.Context) IPmsAttrGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsAttrGroupDo
	WriteDB() IPmsAttrGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsAttrGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsAttrGroupDo
	Not(conds ...gen.Condition) IPmsAttrGroupDo
	Or(conds ...gen.Condition) IPmsAttrGroupDo
	Select(conds ...field.Expr) IPmsAttrGroupDo
	Where(conds ...gen.Condition) IPmsAttrGroupDo
	Order(conds ...field.Expr) IPmsAttrGroupDo
	Distinct(cols ...field.Expr) IPmsAttrGroupDo
	Omit(cols ...field.Expr) IPmsAttrGroupDo
	Join(table schema.Tabler, on ...field.Expr) IPmsAttrGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsAttrGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsAttrGroupDo
	Group(cols ...field.Expr) IPmsAttrGroupDo
	Having(conds ...gen.Condition) IPmsAttrGroupDo
	Limit(limit int) IPmsAttrGroupDo
	Offset(offset int) IPmsAttrGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsAttrGroupDo
	Unscoped() IPmsAttrGroupDo
	Create(values ...*model.PmsAttrGroup) error
	CreateInBatches(values []*model.PmsAttrGroup, batchSize int) error
	Save(values ...*model.PmsAttrGroup) error
	First() (*model.PmsAttrGroup, error)
	Take() (*model.PmsAttrGroup, error)
	Last() (*model.PmsAttrGroup, error)
	Find() ([]*model.PmsAttrGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttrGroup, err error)
	FindInBatches(result *[]*model.PmsAttrGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsAttrGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsAttrGroupDo
	Assign(attrs ...field.AssignExpr) IPmsAttrGroupDo
	Joins(fields ...field.RelationField) IPmsAttrGroupDo
	Preload(fields ...field.RelationField) IPmsAttrGroupDo
	FirstOrInit() (*model.PmsAttrGroup, error)
	FirstOrCreate() (*model.PmsAttrGroup, error)
	FindByPage(offset int, limit int) (result []*model.PmsAttrGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsAttrGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsAttrGroupDo) Debug() IPmsAttrGroupDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsAttrGroupDo) WithContext(ctx context.Context) IPmsAttrGroupDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsAttrGroupDo) ReadDB() IPmsAttrGroupDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsAttrGroupDo) WriteDB() IPmsAttrGroupDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsAttrGroupDo) Session(config *gorm.Session) IPmsAttrGroupDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsAttrGroupDo) Clauses(conds ...clause.Expression) IPmsAttrGroupDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsAttrGroupDo) Returning(value interface{}, columns ...string) IPmsAttrGroupDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsAttrGroupDo) Not(conds ...gen.Condition) IPmsAttrGroupDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsAttrGroupDo) Or(conds ...gen.Condition) IPmsAttrGroupDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsAttrGroupDo) Select(conds ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsAttrGroupDo) Where(conds ...gen.Condition) IPmsAttrGroupDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsAttrGroupDo) Order(conds ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsAttrGroupDo) Distinct(cols ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsAttrGroupDo) Omit(cols ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsAttrGroupDo) Join(table schema.Tabler, on ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsAttrGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsAttrGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsAttrGroupDo) Group(cols ...field.Expr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsAttrGroupDo) Having(conds ...gen.Condition) IPmsAttrGroupDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsAttrGroupDo) Limit(limit int) IPmsAttrGroupDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsAttrGroupDo) Offset(offset int) IPmsAttrGroupDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsAttrGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsAttrGroupDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsAttrGroupDo) Unscoped() IPmsAttrGroupDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsAttrGroupDo) Create(values ...*model.PmsAttrGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsAttrGroupDo) CreateInBatches(values []*model.PmsAttrGroup, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsAttrGroupDo) Save(values ...*model.PmsAttrGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsAttrGroupDo) First() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) Take() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) Last() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) Find() ([]*model.PmsAttrGroup, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsAttrGroup), err
}

func (p pmsAttrGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttrGroup, err error) {
	buf := make([]*model.PmsAttrGroup, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsAttrGroupDo) FindInBatches(result *[]*model.PmsAttrGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsAttrGroupDo) Attrs(attrs ...field.AssignExpr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsAttrGroupDo) Assign(attrs ...field.AssignExpr) IPmsAttrGroupDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsAttrGroupDo) Joins(fields ...field.RelationField) IPmsAttrGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsAttrGroupDo) Preload(fields ...field.RelationField) IPmsAttrGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsAttrGroupDo) FirstOrInit() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) FirstOrCreate() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) FindByPage(offset int, limit int) (result []*model.PmsAttrGroup, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsAttrGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsAttrGroupDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsAttrGroupDo) Delete(models ...*model.PmsAttrGroup) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsAttrGroupDo) withDO(do gen.Dao) *pmsAttrGroupDo {
	p.DO = *do.(*gen.DO)
	return p
}
