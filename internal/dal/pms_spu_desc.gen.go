// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsSpuDesc(db *gorm.DB, opts ...gen.DOOption) pmsSpuDesc {
	_pmsSpuDesc := pmsSpuDesc{}

	_pmsSpuDesc.pmsSpuDescDo.UseDB(db, opts...)
	_pmsSpuDesc.pmsSpuDescDo.UseModel(&model.PmsSpuDesc{})

	tableName := _pmsSpuDesc.pmsSpuDescDo.TableName()
	_pmsSpuDesc.ALL = field.NewAsterisk(tableName)
	_pmsSpuDesc.ID = field.NewInt(tableName, "id")
	_pmsSpuDesc.SpuID = field.NewInt(tableName, "spu_id")
	_pmsSpuDesc.Content = field.NewString(tableName, "content")

	_pmsSpuDesc.fillFieldMap()

	return _pmsSpuDesc
}

type pmsSpuDesc struct {
	pmsSpuDescDo

	ALL     field.Asterisk
	ID      field.Int    // ID
	SpuID   field.Int    // spu_id
	Content field.String // 商品介绍

	fieldMap map[string]field.Expr
}

func (p pmsSpuDesc) Table(newTableName string) *pmsSpuDesc {
	p.pmsSpuDescDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSpuDesc) As(alias string) *pmsSpuDesc {
	p.pmsSpuDescDo.DO = *(p.pmsSpuDescDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSpuDesc) updateTableName(table string) *pmsSpuDesc {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.SpuID = field.NewInt(table, "spu_id")
	p.Content = field.NewString(table, "content")

	p.fillFieldMap()

	return p
}

func (p *pmsSpuDesc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSpuDesc) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["spu_id"] = p.SpuID
	p.fieldMap["content"] = p.Content
}

func (p pmsSpuDesc) clone(db *gorm.DB) pmsSpuDesc {
	p.pmsSpuDescDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSpuDesc) replaceDB(db *gorm.DB) pmsSpuDesc {
	p.pmsSpuDescDo.ReplaceDB(db)
	return p
}

type pmsSpuDescDo struct{ gen.DO }

type IPmsSpuDescDo interface {
	gen.SubQuery
	Debug() IPmsSpuDescDo
	WithContext(ctx context.Context) IPmsSpuDescDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsSpuDescDo
	WriteDB() IPmsSpuDescDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsSpuDescDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsSpuDescDo
	Not(conds ...gen.Condition) IPmsSpuDescDo
	Or(conds ...gen.Condition) IPmsSpuDescDo
	Select(conds ...field.Expr) IPmsSpuDescDo
	Where(conds ...gen.Condition) IPmsSpuDescDo
	Order(conds ...field.Expr) IPmsSpuDescDo
	Distinct(cols ...field.Expr) IPmsSpuDescDo
	Omit(cols ...field.Expr) IPmsSpuDescDo
	Join(table schema.Tabler, on ...field.Expr) IPmsSpuDescDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDescDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDescDo
	Group(cols ...field.Expr) IPmsSpuDescDo
	Having(conds ...gen.Condition) IPmsSpuDescDo
	Limit(limit int) IPmsSpuDescDo
	Offset(offset int) IPmsSpuDescDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuDescDo
	Unscoped() IPmsSpuDescDo
	Create(values ...*model.PmsSpuDesc) error
	CreateInBatches(values []*model.PmsSpuDesc, batchSize int) error
	Save(values ...*model.PmsSpuDesc) error
	First() (*model.PmsSpuDesc, error)
	Take() (*model.PmsSpuDesc, error)
	Last() (*model.PmsSpuDesc, error)
	Find() ([]*model.PmsSpuDesc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuDesc, err error)
	FindInBatches(result *[]*model.PmsSpuDesc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsSpuDesc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsSpuDescDo
	Assign(attrs ...field.AssignExpr) IPmsSpuDescDo
	Joins(fields ...field.RelationField) IPmsSpuDescDo
	Preload(fields ...field.RelationField) IPmsSpuDescDo
	FirstOrInit() (*model.PmsSpuDesc, error)
	FirstOrCreate() (*model.PmsSpuDesc, error)
	FindByPage(offset int, limit int) (result []*model.PmsSpuDesc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsSpuDescDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsSpuDescDo) Debug() IPmsSpuDescDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSpuDescDo) WithContext(ctx context.Context) IPmsSpuDescDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSpuDescDo) ReadDB() IPmsSpuDescDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSpuDescDo) WriteDB() IPmsSpuDescDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSpuDescDo) Session(config *gorm.Session) IPmsSpuDescDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSpuDescDo) Clauses(conds ...clause.Expression) IPmsSpuDescDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSpuDescDo) Returning(value interface{}, columns ...string) IPmsSpuDescDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSpuDescDo) Not(conds ...gen.Condition) IPmsSpuDescDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSpuDescDo) Or(conds ...gen.Condition) IPmsSpuDescDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSpuDescDo) Select(conds ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSpuDescDo) Where(conds ...gen.Condition) IPmsSpuDescDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSpuDescDo) Order(conds ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSpuDescDo) Distinct(cols ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSpuDescDo) Omit(cols ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSpuDescDo) Join(table schema.Tabler, on ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSpuDescDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSpuDescDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSpuDescDo) Group(cols ...field.Expr) IPmsSpuDescDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSpuDescDo) Having(conds ...gen.Condition) IPmsSpuDescDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSpuDescDo) Limit(limit int) IPmsSpuDescDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSpuDescDo) Offset(offset int) IPmsSpuDescDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSpuDescDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuDescDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSpuDescDo) Unscoped() IPmsSpuDescDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSpuDescDo) Create(values ...*model.PmsSpuDesc) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSpuDescDo) CreateInBatches(values []*model.PmsSpuDesc, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSpuDescDo) Save(values ...*model.PmsSpuDesc) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSpuDescDo) First() (*model.PmsSpuDesc, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuDesc), nil
	}
}

func (p pmsSpuDescDo) Take() (*model.PmsSpuDesc, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuDesc), nil
	}
}

func (p pmsSpuDescDo) Last() (*model.PmsSpuDesc, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuDesc), nil
	}
}

func (p pmsSpuDescDo) Find() ([]*model.PmsSpuDesc, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSpuDesc), err
}

func (p pmsSpuDescDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuDesc, err error) {
	buf := make([]*model.PmsSpuDesc, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSpuDescDo) FindInBatches(result *[]*model.PmsSpuDesc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSpuDescDo) Attrs(attrs ...field.AssignExpr) IPmsSpuDescDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSpuDescDo) Assign(attrs ...field.AssignExpr) IPmsSpuDescDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSpuDescDo) Joins(fields ...field.RelationField) IPmsSpuDescDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSpuDescDo) Preload(fields ...field.RelationField) IPmsSpuDescDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSpuDescDo) FirstOrInit() (*model.PmsSpuDesc, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuDesc), nil
	}
}

func (p pmsSpuDescDo) FirstOrCreate() (*model.PmsSpuDesc, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuDesc), nil
	}
}

func (p pmsSpuDescDo) FindByPage(offset int, limit int) (result []*model.PmsSpuDesc, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSpuDescDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSpuDescDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSpuDescDo) Delete(models ...*model.PmsSpuDesc) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSpuDescDo) withDO(do gen.Dao) *pmsSpuDescDo {
	p.DO = *do.(*gen.DO)
	return p
}
