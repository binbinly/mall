// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsSeckillSession(db *gorm.DB, opts ...gen.DOOption) smsSeckillSession {
	_smsSeckillSession := smsSeckillSession{}

	_smsSeckillSession.smsSeckillSessionDo.UseDB(db, opts...)
	_smsSeckillSession.smsSeckillSessionDo.UseModel(&model.SmsSeckillSession{})

	tableName := _smsSeckillSession.smsSeckillSessionDo.TableName()
	_smsSeckillSession.ALL = field.NewAsterisk(tableName)
	_smsSeckillSession.ID = field.NewInt(tableName, "id")
	_smsSeckillSession.Name = field.NewString(tableName, "name")
	_smsSeckillSession.StartAt = field.NewInt64(tableName, "start_at")
	_smsSeckillSession.EndAt = field.NewInt64(tableName, "end_at")
	_smsSeckillSession.IsRelease = field.NewInt8(tableName, "is_release")
	_smsSeckillSession.CreatedAt = field.NewInt(tableName, "created_at")
	_smsSeckillSession.UpdatedAt = field.NewInt(tableName, "updated_at")

	_smsSeckillSession.fillFieldMap()

	return _smsSeckillSession
}

type smsSeckillSession struct {
	smsSeckillSessionDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	Name      field.String // 场次名
	StartAt   field.Int64  // 开始时间
	EndAt     field.Int64  // 结束时间
	IsRelease field.Int8   // 是否发布上线
	CreatedAt field.Int    // 创建时间
	UpdatedAt field.Int    // 更新时间

	fieldMap map[string]field.Expr
}

func (s smsSeckillSession) Table(newTableName string) *smsSeckillSession {
	s.smsSeckillSessionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSeckillSession) As(alias string) *smsSeckillSession {
	s.smsSeckillSessionDo.DO = *(s.smsSeckillSessionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSeckillSession) updateTableName(table string) *smsSeckillSession {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Name = field.NewString(table, "name")
	s.StartAt = field.NewInt64(table, "start_at")
	s.EndAt = field.NewInt64(table, "end_at")
	s.IsRelease = field.NewInt8(table, "is_release")
	s.CreatedAt = field.NewInt(table, "created_at")
	s.UpdatedAt = field.NewInt(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *smsSeckillSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSeckillSession) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["start_at"] = s.StartAt
	s.fieldMap["end_at"] = s.EndAt
	s.fieldMap["is_release"] = s.IsRelease
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s smsSeckillSession) clone(db *gorm.DB) smsSeckillSession {
	s.smsSeckillSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSeckillSession) replaceDB(db *gorm.DB) smsSeckillSession {
	s.smsSeckillSessionDo.ReplaceDB(db)
	return s
}

type smsSeckillSessionDo struct{ gen.DO }

type ISmsSeckillSessionDo interface {
	gen.SubQuery
	Debug() ISmsSeckillSessionDo
	WithContext(ctx context.Context) ISmsSeckillSessionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSeckillSessionDo
	WriteDB() ISmsSeckillSessionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSeckillSessionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSeckillSessionDo
	Not(conds ...gen.Condition) ISmsSeckillSessionDo
	Or(conds ...gen.Condition) ISmsSeckillSessionDo
	Select(conds ...field.Expr) ISmsSeckillSessionDo
	Where(conds ...gen.Condition) ISmsSeckillSessionDo
	Order(conds ...field.Expr) ISmsSeckillSessionDo
	Distinct(cols ...field.Expr) ISmsSeckillSessionDo
	Omit(cols ...field.Expr) ISmsSeckillSessionDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSeckillSessionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSessionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSessionDo
	Group(cols ...field.Expr) ISmsSeckillSessionDo
	Having(conds ...gen.Condition) ISmsSeckillSessionDo
	Limit(limit int) ISmsSeckillSessionDo
	Offset(offset int) ISmsSeckillSessionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillSessionDo
	Unscoped() ISmsSeckillSessionDo
	Create(values ...*model.SmsSeckillSession) error
	CreateInBatches(values []*model.SmsSeckillSession, batchSize int) error
	Save(values ...*model.SmsSeckillSession) error
	First() (*model.SmsSeckillSession, error)
	Take() (*model.SmsSeckillSession, error)
	Last() (*model.SmsSeckillSession, error)
	Find() ([]*model.SmsSeckillSession, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillSession, err error)
	FindInBatches(result *[]*model.SmsSeckillSession, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSeckillSession) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSeckillSessionDo
	Assign(attrs ...field.AssignExpr) ISmsSeckillSessionDo
	Joins(fields ...field.RelationField) ISmsSeckillSessionDo
	Preload(fields ...field.RelationField) ISmsSeckillSessionDo
	FirstOrInit() (*model.SmsSeckillSession, error)
	FirstOrCreate() (*model.SmsSeckillSession, error)
	FindByPage(offset int, limit int) (result []*model.SmsSeckillSession, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSeckillSessionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSeckillSessionDo) Debug() ISmsSeckillSessionDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSeckillSessionDo) WithContext(ctx context.Context) ISmsSeckillSessionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSeckillSessionDo) ReadDB() ISmsSeckillSessionDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSeckillSessionDo) WriteDB() ISmsSeckillSessionDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSeckillSessionDo) Session(config *gorm.Session) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSeckillSessionDo) Clauses(conds ...clause.Expression) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSeckillSessionDo) Returning(value interface{}, columns ...string) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSeckillSessionDo) Not(conds ...gen.Condition) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSeckillSessionDo) Or(conds ...gen.Condition) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSeckillSessionDo) Select(conds ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSeckillSessionDo) Where(conds ...gen.Condition) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSeckillSessionDo) Order(conds ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSeckillSessionDo) Distinct(cols ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSeckillSessionDo) Omit(cols ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSeckillSessionDo) Join(table schema.Tabler, on ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSeckillSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSeckillSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSeckillSessionDo) Group(cols ...field.Expr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSeckillSessionDo) Having(conds ...gen.Condition) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSeckillSessionDo) Limit(limit int) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSeckillSessionDo) Offset(offset int) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSeckillSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSeckillSessionDo) Unscoped() ISmsSeckillSessionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSeckillSessionDo) Create(values ...*model.SmsSeckillSession) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSeckillSessionDo) CreateInBatches(values []*model.SmsSeckillSession, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSeckillSessionDo) Save(values ...*model.SmsSeckillSession) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSeckillSessionDo) First() (*model.SmsSeckillSession, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSession), nil
	}
}

func (s smsSeckillSessionDo) Take() (*model.SmsSeckillSession, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSession), nil
	}
}

func (s smsSeckillSessionDo) Last() (*model.SmsSeckillSession, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSession), nil
	}
}

func (s smsSeckillSessionDo) Find() ([]*model.SmsSeckillSession, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSeckillSession), err
}

func (s smsSeckillSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillSession, err error) {
	buf := make([]*model.SmsSeckillSession, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSeckillSessionDo) FindInBatches(result *[]*model.SmsSeckillSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSeckillSessionDo) Attrs(attrs ...field.AssignExpr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSeckillSessionDo) Assign(attrs ...field.AssignExpr) ISmsSeckillSessionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSeckillSessionDo) Joins(fields ...field.RelationField) ISmsSeckillSessionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSeckillSessionDo) Preload(fields ...field.RelationField) ISmsSeckillSessionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSeckillSessionDo) FirstOrInit() (*model.SmsSeckillSession, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSession), nil
	}
}

func (s smsSeckillSessionDo) FirstOrCreate() (*model.SmsSeckillSession, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSession), nil
	}
}

func (s smsSeckillSessionDo) FindByPage(offset int, limit int) (result []*model.SmsSeckillSession, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSeckillSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSeckillSessionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSeckillSessionDo) Delete(models ...*model.SmsSeckillSession) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSeckillSessionDo) withDO(do gen.Dao) *smsSeckillSessionDo {
	s.DO = *do.(*gen.DO)
	return s
}
