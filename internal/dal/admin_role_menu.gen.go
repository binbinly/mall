// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminRoleMenu(db *gorm.DB, opts ...gen.DOOption) adminRoleMenu {
	_adminRoleMenu := adminRoleMenu{}

	_adminRoleMenu.adminRoleMenuDo.UseDB(db, opts...)
	_adminRoleMenu.adminRoleMenuDo.UseModel(&model.AdminRoleMenu{})

	tableName := _adminRoleMenu.adminRoleMenuDo.TableName()
	_adminRoleMenu.ALL = field.NewAsterisk(tableName)
	_adminRoleMenu.RoleID = field.NewInt64(tableName, "role_id")
	_adminRoleMenu.MenuID = field.NewInt64(tableName, "menu_id")
	_adminRoleMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_adminRoleMenu.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminRoleMenu.fillFieldMap()

	return _adminRoleMenu
}

type adminRoleMenu struct {
	adminRoleMenuDo

	ALL       field.Asterisk
	RoleID    field.Int64
	MenuID    field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminRoleMenu) Table(newTableName string) *adminRoleMenu {
	a.adminRoleMenuDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminRoleMenu) As(alias string) *adminRoleMenu {
	a.adminRoleMenuDo.DO = *(a.adminRoleMenuDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminRoleMenu) updateTableName(table string) *adminRoleMenu {
	a.ALL = field.NewAsterisk(table)
	a.RoleID = field.NewInt64(table, "role_id")
	a.MenuID = field.NewInt64(table, "menu_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminRoleMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminRoleMenu) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["role_id"] = a.RoleID
	a.fieldMap["menu_id"] = a.MenuID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminRoleMenu) clone(db *gorm.DB) adminRoleMenu {
	a.adminRoleMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminRoleMenu) replaceDB(db *gorm.DB) adminRoleMenu {
	a.adminRoleMenuDo.ReplaceDB(db)
	return a
}

type adminRoleMenuDo struct{ gen.DO }

type IAdminRoleMenuDo interface {
	gen.SubQuery
	Debug() IAdminRoleMenuDo
	WithContext(ctx context.Context) IAdminRoleMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminRoleMenuDo
	WriteDB() IAdminRoleMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminRoleMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminRoleMenuDo
	Not(conds ...gen.Condition) IAdminRoleMenuDo
	Or(conds ...gen.Condition) IAdminRoleMenuDo
	Select(conds ...field.Expr) IAdminRoleMenuDo
	Where(conds ...gen.Condition) IAdminRoleMenuDo
	Order(conds ...field.Expr) IAdminRoleMenuDo
	Distinct(cols ...field.Expr) IAdminRoleMenuDo
	Omit(cols ...field.Expr) IAdminRoleMenuDo
	Join(table schema.Tabler, on ...field.Expr) IAdminRoleMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminRoleMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminRoleMenuDo
	Group(cols ...field.Expr) IAdminRoleMenuDo
	Having(conds ...gen.Condition) IAdminRoleMenuDo
	Limit(limit int) IAdminRoleMenuDo
	Offset(offset int) IAdminRoleMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminRoleMenuDo
	Unscoped() IAdminRoleMenuDo
	Create(values ...*model.AdminRoleMenu) error
	CreateInBatches(values []*model.AdminRoleMenu, batchSize int) error
	Save(values ...*model.AdminRoleMenu) error
	First() (*model.AdminRoleMenu, error)
	Take() (*model.AdminRoleMenu, error)
	Last() (*model.AdminRoleMenu, error)
	Find() ([]*model.AdminRoleMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminRoleMenu, err error)
	FindInBatches(result *[]*model.AdminRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminRoleMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminRoleMenuDo
	Assign(attrs ...field.AssignExpr) IAdminRoleMenuDo
	Joins(fields ...field.RelationField) IAdminRoleMenuDo
	Preload(fields ...field.RelationField) IAdminRoleMenuDo
	FirstOrInit() (*model.AdminRoleMenu, error)
	FirstOrCreate() (*model.AdminRoleMenu, error)
	FindByPage(offset int, limit int) (result []*model.AdminRoleMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminRoleMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminRoleMenuDo) Debug() IAdminRoleMenuDo {
	return a.withDO(a.DO.Debug())
}

func (a adminRoleMenuDo) WithContext(ctx context.Context) IAdminRoleMenuDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminRoleMenuDo) ReadDB() IAdminRoleMenuDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminRoleMenuDo) WriteDB() IAdminRoleMenuDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminRoleMenuDo) Session(config *gorm.Session) IAdminRoleMenuDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminRoleMenuDo) Clauses(conds ...clause.Expression) IAdminRoleMenuDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminRoleMenuDo) Returning(value interface{}, columns ...string) IAdminRoleMenuDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminRoleMenuDo) Not(conds ...gen.Condition) IAdminRoleMenuDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminRoleMenuDo) Or(conds ...gen.Condition) IAdminRoleMenuDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminRoleMenuDo) Select(conds ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminRoleMenuDo) Where(conds ...gen.Condition) IAdminRoleMenuDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminRoleMenuDo) Order(conds ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminRoleMenuDo) Distinct(cols ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminRoleMenuDo) Omit(cols ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminRoleMenuDo) Join(table schema.Tabler, on ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminRoleMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminRoleMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminRoleMenuDo) Group(cols ...field.Expr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminRoleMenuDo) Having(conds ...gen.Condition) IAdminRoleMenuDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminRoleMenuDo) Limit(limit int) IAdminRoleMenuDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminRoleMenuDo) Offset(offset int) IAdminRoleMenuDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminRoleMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminRoleMenuDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminRoleMenuDo) Unscoped() IAdminRoleMenuDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminRoleMenuDo) Create(values ...*model.AdminRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminRoleMenuDo) CreateInBatches(values []*model.AdminRoleMenu, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminRoleMenuDo) Save(values ...*model.AdminRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminRoleMenuDo) First() (*model.AdminRoleMenu, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleMenu), nil
	}
}

func (a adminRoleMenuDo) Take() (*model.AdminRoleMenu, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleMenu), nil
	}
}

func (a adminRoleMenuDo) Last() (*model.AdminRoleMenu, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleMenu), nil
	}
}

func (a adminRoleMenuDo) Find() ([]*model.AdminRoleMenu, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminRoleMenu), err
}

func (a adminRoleMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminRoleMenu, err error) {
	buf := make([]*model.AdminRoleMenu, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminRoleMenuDo) FindInBatches(result *[]*model.AdminRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminRoleMenuDo) Attrs(attrs ...field.AssignExpr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminRoleMenuDo) Assign(attrs ...field.AssignExpr) IAdminRoleMenuDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminRoleMenuDo) Joins(fields ...field.RelationField) IAdminRoleMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminRoleMenuDo) Preload(fields ...field.RelationField) IAdminRoleMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminRoleMenuDo) FirstOrInit() (*model.AdminRoleMenu, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleMenu), nil
	}
}

func (a adminRoleMenuDo) FirstOrCreate() (*model.AdminRoleMenu, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleMenu), nil
	}
}

func (a adminRoleMenuDo) FindByPage(offset int, limit int) (result []*model.AdminRoleMenu, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminRoleMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminRoleMenuDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminRoleMenuDo) Delete(models ...*model.AdminRoleMenu) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminRoleMenuDo) withDO(do gen.Dao) *adminRoleMenuDo {
	a.DO = *do.(*gen.DO)
	return a
}
