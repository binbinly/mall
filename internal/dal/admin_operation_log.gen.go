// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminOperationLog(db *gorm.DB, opts ...gen.DOOption) adminOperationLog {
	_adminOperationLog := adminOperationLog{}

	_adminOperationLog.adminOperationLogDo.UseDB(db, opts...)
	_adminOperationLog.adminOperationLogDo.UseModel(&model.AdminOperationLog{})

	tableName := _adminOperationLog.adminOperationLogDo.TableName()
	_adminOperationLog.ALL = field.NewAsterisk(tableName)
	_adminOperationLog.ID = field.NewInt64(tableName, "id")
	_adminOperationLog.UserID = field.NewInt64(tableName, "user_id")
	_adminOperationLog.Path = field.NewString(tableName, "path")
	_adminOperationLog.Method = field.NewString(tableName, "method")
	_adminOperationLog.IP = field.NewString(tableName, "ip")
	_adminOperationLog.Input = field.NewString(tableName, "input")
	_adminOperationLog.CreatedAt = field.NewTime(tableName, "created_at")
	_adminOperationLog.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminOperationLog.fillFieldMap()

	return _adminOperationLog
}

type adminOperationLog struct {
	adminOperationLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64
	Path      field.String
	Method    field.String
	IP        field.String
	Input     field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminOperationLog) Table(newTableName string) *adminOperationLog {
	a.adminOperationLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminOperationLog) As(alias string) *adminOperationLog {
	a.adminOperationLogDo.DO = *(a.adminOperationLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminOperationLog) updateTableName(table string) *adminOperationLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewInt64(table, "user_id")
	a.Path = field.NewString(table, "path")
	a.Method = field.NewString(table, "method")
	a.IP = field.NewString(table, "ip")
	a.Input = field.NewString(table, "input")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminOperationLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminOperationLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["path"] = a.Path
	a.fieldMap["method"] = a.Method
	a.fieldMap["ip"] = a.IP
	a.fieldMap["input"] = a.Input
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminOperationLog) clone(db *gorm.DB) adminOperationLog {
	a.adminOperationLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminOperationLog) replaceDB(db *gorm.DB) adminOperationLog {
	a.adminOperationLogDo.ReplaceDB(db)
	return a
}

type adminOperationLogDo struct{ gen.DO }

type IAdminOperationLogDo interface {
	gen.SubQuery
	Debug() IAdminOperationLogDo
	WithContext(ctx context.Context) IAdminOperationLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminOperationLogDo
	WriteDB() IAdminOperationLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminOperationLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminOperationLogDo
	Not(conds ...gen.Condition) IAdminOperationLogDo
	Or(conds ...gen.Condition) IAdminOperationLogDo
	Select(conds ...field.Expr) IAdminOperationLogDo
	Where(conds ...gen.Condition) IAdminOperationLogDo
	Order(conds ...field.Expr) IAdminOperationLogDo
	Distinct(cols ...field.Expr) IAdminOperationLogDo
	Omit(cols ...field.Expr) IAdminOperationLogDo
	Join(table schema.Tabler, on ...field.Expr) IAdminOperationLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminOperationLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminOperationLogDo
	Group(cols ...field.Expr) IAdminOperationLogDo
	Having(conds ...gen.Condition) IAdminOperationLogDo
	Limit(limit int) IAdminOperationLogDo
	Offset(offset int) IAdminOperationLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminOperationLogDo
	Unscoped() IAdminOperationLogDo
	Create(values ...*model.AdminOperationLog) error
	CreateInBatches(values []*model.AdminOperationLog, batchSize int) error
	Save(values ...*model.AdminOperationLog) error
	First() (*model.AdminOperationLog, error)
	Take() (*model.AdminOperationLog, error)
	Last() (*model.AdminOperationLog, error)
	Find() ([]*model.AdminOperationLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminOperationLog, err error)
	FindInBatches(result *[]*model.AdminOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminOperationLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminOperationLogDo
	Assign(attrs ...field.AssignExpr) IAdminOperationLogDo
	Joins(fields ...field.RelationField) IAdminOperationLogDo
	Preload(fields ...field.RelationField) IAdminOperationLogDo
	FirstOrInit() (*model.AdminOperationLog, error)
	FirstOrCreate() (*model.AdminOperationLog, error)
	FindByPage(offset int, limit int) (result []*model.AdminOperationLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminOperationLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminOperationLogDo) Debug() IAdminOperationLogDo {
	return a.withDO(a.DO.Debug())
}

func (a adminOperationLogDo) WithContext(ctx context.Context) IAdminOperationLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminOperationLogDo) ReadDB() IAdminOperationLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminOperationLogDo) WriteDB() IAdminOperationLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminOperationLogDo) Session(config *gorm.Session) IAdminOperationLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminOperationLogDo) Clauses(conds ...clause.Expression) IAdminOperationLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminOperationLogDo) Returning(value interface{}, columns ...string) IAdminOperationLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminOperationLogDo) Not(conds ...gen.Condition) IAdminOperationLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminOperationLogDo) Or(conds ...gen.Condition) IAdminOperationLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminOperationLogDo) Select(conds ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminOperationLogDo) Where(conds ...gen.Condition) IAdminOperationLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminOperationLogDo) Order(conds ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminOperationLogDo) Distinct(cols ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminOperationLogDo) Omit(cols ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminOperationLogDo) Join(table schema.Tabler, on ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminOperationLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminOperationLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminOperationLogDo) Group(cols ...field.Expr) IAdminOperationLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminOperationLogDo) Having(conds ...gen.Condition) IAdminOperationLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminOperationLogDo) Limit(limit int) IAdminOperationLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminOperationLogDo) Offset(offset int) IAdminOperationLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminOperationLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminOperationLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminOperationLogDo) Unscoped() IAdminOperationLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminOperationLogDo) Create(values ...*model.AdminOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminOperationLogDo) CreateInBatches(values []*model.AdminOperationLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminOperationLogDo) Save(values ...*model.AdminOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminOperationLogDo) First() (*model.AdminOperationLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminOperationLog), nil
	}
}

func (a adminOperationLogDo) Take() (*model.AdminOperationLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminOperationLog), nil
	}
}

func (a adminOperationLogDo) Last() (*model.AdminOperationLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminOperationLog), nil
	}
}

func (a adminOperationLogDo) Find() ([]*model.AdminOperationLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminOperationLog), err
}

func (a adminOperationLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminOperationLog, err error) {
	buf := make([]*model.AdminOperationLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminOperationLogDo) FindInBatches(result *[]*model.AdminOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminOperationLogDo) Attrs(attrs ...field.AssignExpr) IAdminOperationLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminOperationLogDo) Assign(attrs ...field.AssignExpr) IAdminOperationLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminOperationLogDo) Joins(fields ...field.RelationField) IAdminOperationLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminOperationLogDo) Preload(fields ...field.RelationField) IAdminOperationLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminOperationLogDo) FirstOrInit() (*model.AdminOperationLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminOperationLog), nil
	}
}

func (a adminOperationLogDo) FirstOrCreate() (*model.AdminOperationLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminOperationLog), nil
	}
}

func (a adminOperationLogDo) FindByPage(offset int, limit int) (result []*model.AdminOperationLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminOperationLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminOperationLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminOperationLogDo) Delete(models ...*model.AdminOperationLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminOperationLogDo) withDO(do gen.Dao) *adminOperationLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
