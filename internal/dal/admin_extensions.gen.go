// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminExtension(db *gorm.DB, opts ...gen.DOOption) adminExtension {
	_adminExtension := adminExtension{}

	_adminExtension.adminExtensionDo.UseDB(db, opts...)
	_adminExtension.adminExtensionDo.UseModel(&model.AdminExtension{})

	tableName := _adminExtension.adminExtensionDo.TableName()
	_adminExtension.ALL = field.NewAsterisk(tableName)
	_adminExtension.ID = field.NewInt(tableName, "id")
	_adminExtension.Name = field.NewString(tableName, "name")
	_adminExtension.Version = field.NewString(tableName, "version")
	_adminExtension.IsEnabled = field.NewInt8(tableName, "is_enabled")
	_adminExtension.Options = field.NewString(tableName, "options")
	_adminExtension.CreatedAt = field.NewTime(tableName, "created_at")
	_adminExtension.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminExtension.fillFieldMap()

	return _adminExtension
}

type adminExtension struct {
	adminExtensionDo

	ALL       field.Asterisk
	ID        field.Int
	Name      field.String
	Version   field.String
	IsEnabled field.Int8
	Options   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminExtension) Table(newTableName string) *adminExtension {
	a.adminExtensionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminExtension) As(alias string) *adminExtension {
	a.adminExtensionDo.DO = *(a.adminExtensionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminExtension) updateTableName(table string) *adminExtension {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt(table, "id")
	a.Name = field.NewString(table, "name")
	a.Version = field.NewString(table, "version")
	a.IsEnabled = field.NewInt8(table, "is_enabled")
	a.Options = field.NewString(table, "options")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminExtension) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminExtension) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["version"] = a.Version
	a.fieldMap["is_enabled"] = a.IsEnabled
	a.fieldMap["options"] = a.Options
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminExtension) clone(db *gorm.DB) adminExtension {
	a.adminExtensionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminExtension) replaceDB(db *gorm.DB) adminExtension {
	a.adminExtensionDo.ReplaceDB(db)
	return a
}

type adminExtensionDo struct{ gen.DO }

type IAdminExtensionDo interface {
	gen.SubQuery
	Debug() IAdminExtensionDo
	WithContext(ctx context.Context) IAdminExtensionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminExtensionDo
	WriteDB() IAdminExtensionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminExtensionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminExtensionDo
	Not(conds ...gen.Condition) IAdminExtensionDo
	Or(conds ...gen.Condition) IAdminExtensionDo
	Select(conds ...field.Expr) IAdminExtensionDo
	Where(conds ...gen.Condition) IAdminExtensionDo
	Order(conds ...field.Expr) IAdminExtensionDo
	Distinct(cols ...field.Expr) IAdminExtensionDo
	Omit(cols ...field.Expr) IAdminExtensionDo
	Join(table schema.Tabler, on ...field.Expr) IAdminExtensionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionDo
	Group(cols ...field.Expr) IAdminExtensionDo
	Having(conds ...gen.Condition) IAdminExtensionDo
	Limit(limit int) IAdminExtensionDo
	Offset(offset int) IAdminExtensionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminExtensionDo
	Unscoped() IAdminExtensionDo
	Create(values ...*model.AdminExtension) error
	CreateInBatches(values []*model.AdminExtension, batchSize int) error
	Save(values ...*model.AdminExtension) error
	First() (*model.AdminExtension, error)
	Take() (*model.AdminExtension, error)
	Last() (*model.AdminExtension, error)
	Find() ([]*model.AdminExtension, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminExtension, err error)
	FindInBatches(result *[]*model.AdminExtension, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminExtension) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminExtensionDo
	Assign(attrs ...field.AssignExpr) IAdminExtensionDo
	Joins(fields ...field.RelationField) IAdminExtensionDo
	Preload(fields ...field.RelationField) IAdminExtensionDo
	FirstOrInit() (*model.AdminExtension, error)
	FirstOrCreate() (*model.AdminExtension, error)
	FindByPage(offset int, limit int) (result []*model.AdminExtension, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminExtensionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminExtensionDo) Debug() IAdminExtensionDo {
	return a.withDO(a.DO.Debug())
}

func (a adminExtensionDo) WithContext(ctx context.Context) IAdminExtensionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminExtensionDo) ReadDB() IAdminExtensionDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminExtensionDo) WriteDB() IAdminExtensionDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminExtensionDo) Session(config *gorm.Session) IAdminExtensionDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminExtensionDo) Clauses(conds ...clause.Expression) IAdminExtensionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminExtensionDo) Returning(value interface{}, columns ...string) IAdminExtensionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminExtensionDo) Not(conds ...gen.Condition) IAdminExtensionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminExtensionDo) Or(conds ...gen.Condition) IAdminExtensionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminExtensionDo) Select(conds ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminExtensionDo) Where(conds ...gen.Condition) IAdminExtensionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminExtensionDo) Order(conds ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminExtensionDo) Distinct(cols ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminExtensionDo) Omit(cols ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminExtensionDo) Join(table schema.Tabler, on ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminExtensionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminExtensionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminExtensionDo) Group(cols ...field.Expr) IAdminExtensionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminExtensionDo) Having(conds ...gen.Condition) IAdminExtensionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminExtensionDo) Limit(limit int) IAdminExtensionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminExtensionDo) Offset(offset int) IAdminExtensionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminExtensionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminExtensionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminExtensionDo) Unscoped() IAdminExtensionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminExtensionDo) Create(values ...*model.AdminExtension) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminExtensionDo) CreateInBatches(values []*model.AdminExtension, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminExtensionDo) Save(values ...*model.AdminExtension) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminExtensionDo) First() (*model.AdminExtension, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtension), nil
	}
}

func (a adminExtensionDo) Take() (*model.AdminExtension, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtension), nil
	}
}

func (a adminExtensionDo) Last() (*model.AdminExtension, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtension), nil
	}
}

func (a adminExtensionDo) Find() ([]*model.AdminExtension, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminExtension), err
}

func (a adminExtensionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminExtension, err error) {
	buf := make([]*model.AdminExtension, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminExtensionDo) FindInBatches(result *[]*model.AdminExtension, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminExtensionDo) Attrs(attrs ...field.AssignExpr) IAdminExtensionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminExtensionDo) Assign(attrs ...field.AssignExpr) IAdminExtensionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminExtensionDo) Joins(fields ...field.RelationField) IAdminExtensionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminExtensionDo) Preload(fields ...field.RelationField) IAdminExtensionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminExtensionDo) FirstOrInit() (*model.AdminExtension, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtension), nil
	}
}

func (a adminExtensionDo) FirstOrCreate() (*model.AdminExtension, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExtension), nil
	}
}

func (a adminExtensionDo) FindByPage(offset int, limit int) (result []*model.AdminExtension, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminExtensionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminExtensionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminExtensionDo) Delete(models ...*model.AdminExtension) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminExtensionDo) withDO(do gen.Dao) *adminExtensionDo {
	a.DO = *do.(*gen.DO)
	return a
}
