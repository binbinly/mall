// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newWmsWareTask(db *gorm.DB, opts ...gen.DOOption) wmsWareTask {
	_wmsWareTask := wmsWareTask{}

	_wmsWareTask.wmsWareTaskDo.UseDB(db, opts...)
	_wmsWareTask.wmsWareTaskDo.UseModel(&model.WmsWareTask{})

	tableName := _wmsWareTask.wmsWareTaskDo.TableName()
	_wmsWareTask.ALL = field.NewAsterisk(tableName)
	_wmsWareTask.ID = field.NewInt(tableName, "id")
	_wmsWareTask.OrderID = field.NewInt(tableName, "order_id")
	_wmsWareTask.OrderNo = field.NewString(tableName, "order_no")
	_wmsWareTask.Consignee = field.NewString(tableName, "consignee")
	_wmsWareTask.Phone = field.NewString(tableName, "phone")
	_wmsWareTask.Address = field.NewString(tableName, "address")
	_wmsWareTask.Note = field.NewString(tableName, "note")
	_wmsWareTask.Remark = field.NewString(tableName, "remark")
	_wmsWareTask.Status = field.NewInt8(tableName, "status")
	_wmsWareTask.CreatedAt = field.NewTime(tableName, "created_at")
	_wmsWareTask.UpdatedAt = field.NewTime(tableName, "updated_at")

	_wmsWareTask.fillFieldMap()

	return _wmsWareTask
}

type wmsWareTask struct {
	wmsWareTaskDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	OrderID   field.Int    // order_id
	OrderNo   field.String // 单号
	Consignee field.String // 收货人
	Phone     field.String // 收货人手机号
	Address   field.String // 配送地址
	Note      field.String // 备注
	Remark    field.String // 任务备注
	Status    field.Int8   // 状态 1=锁定 2=解锁 3=扣减
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (w wmsWareTask) Table(newTableName string) *wmsWareTask {
	w.wmsWareTaskDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wmsWareTask) As(alias string) *wmsWareTask {
	w.wmsWareTaskDo.DO = *(w.wmsWareTaskDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wmsWareTask) updateTableName(table string) *wmsWareTask {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt(table, "id")
	w.OrderID = field.NewInt(table, "order_id")
	w.OrderNo = field.NewString(table, "order_no")
	w.Consignee = field.NewString(table, "consignee")
	w.Phone = field.NewString(table, "phone")
	w.Address = field.NewString(table, "address")
	w.Note = field.NewString(table, "note")
	w.Remark = field.NewString(table, "remark")
	w.Status = field.NewInt8(table, "status")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *wmsWareTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wmsWareTask) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["order_id"] = w.OrderID
	w.fieldMap["order_no"] = w.OrderNo
	w.fieldMap["consignee"] = w.Consignee
	w.fieldMap["phone"] = w.Phone
	w.fieldMap["address"] = w.Address
	w.fieldMap["note"] = w.Note
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w wmsWareTask) clone(db *gorm.DB) wmsWareTask {
	w.wmsWareTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wmsWareTask) replaceDB(db *gorm.DB) wmsWareTask {
	w.wmsWareTaskDo.ReplaceDB(db)
	return w
}

type wmsWareTaskDo struct{ gen.DO }

type IWmsWareTaskDo interface {
	gen.SubQuery
	Debug() IWmsWareTaskDo
	WithContext(ctx context.Context) IWmsWareTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWmsWareTaskDo
	WriteDB() IWmsWareTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWmsWareTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWmsWareTaskDo
	Not(conds ...gen.Condition) IWmsWareTaskDo
	Or(conds ...gen.Condition) IWmsWareTaskDo
	Select(conds ...field.Expr) IWmsWareTaskDo
	Where(conds ...gen.Condition) IWmsWareTaskDo
	Order(conds ...field.Expr) IWmsWareTaskDo
	Distinct(cols ...field.Expr) IWmsWareTaskDo
	Omit(cols ...field.Expr) IWmsWareTaskDo
	Join(table schema.Tabler, on ...field.Expr) IWmsWareTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDo
	Group(cols ...field.Expr) IWmsWareTaskDo
	Having(conds ...gen.Condition) IWmsWareTaskDo
	Limit(limit int) IWmsWareTaskDo
	Offset(offset int) IWmsWareTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareTaskDo
	Unscoped() IWmsWareTaskDo
	Create(values ...*model.WmsWareTask) error
	CreateInBatches(values []*model.WmsWareTask, batchSize int) error
	Save(values ...*model.WmsWareTask) error
	First() (*model.WmsWareTask, error)
	Take() (*model.WmsWareTask, error)
	Last() (*model.WmsWareTask, error)
	Find() ([]*model.WmsWareTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWareTask, err error)
	FindInBatches(result *[]*model.WmsWareTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WmsWareTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWmsWareTaskDo
	Assign(attrs ...field.AssignExpr) IWmsWareTaskDo
	Joins(fields ...field.RelationField) IWmsWareTaskDo
	Preload(fields ...field.RelationField) IWmsWareTaskDo
	FirstOrInit() (*model.WmsWareTask, error)
	FirstOrCreate() (*model.WmsWareTask, error)
	FindByPage(offset int, limit int) (result []*model.WmsWareTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWmsWareTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wmsWareTaskDo) Debug() IWmsWareTaskDo {
	return w.withDO(w.DO.Debug())
}

func (w wmsWareTaskDo) WithContext(ctx context.Context) IWmsWareTaskDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wmsWareTaskDo) ReadDB() IWmsWareTaskDo {
	return w.Clauses(dbresolver.Read)
}

func (w wmsWareTaskDo) WriteDB() IWmsWareTaskDo {
	return w.Clauses(dbresolver.Write)
}

func (w wmsWareTaskDo) Session(config *gorm.Session) IWmsWareTaskDo {
	return w.withDO(w.DO.Session(config))
}

func (w wmsWareTaskDo) Clauses(conds ...clause.Expression) IWmsWareTaskDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wmsWareTaskDo) Returning(value interface{}, columns ...string) IWmsWareTaskDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wmsWareTaskDo) Not(conds ...gen.Condition) IWmsWareTaskDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wmsWareTaskDo) Or(conds ...gen.Condition) IWmsWareTaskDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wmsWareTaskDo) Select(conds ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wmsWareTaskDo) Where(conds ...gen.Condition) IWmsWareTaskDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wmsWareTaskDo) Order(conds ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wmsWareTaskDo) Distinct(cols ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wmsWareTaskDo) Omit(cols ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wmsWareTaskDo) Join(table schema.Tabler, on ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wmsWareTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wmsWareTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wmsWareTaskDo) Group(cols ...field.Expr) IWmsWareTaskDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wmsWareTaskDo) Having(conds ...gen.Condition) IWmsWareTaskDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wmsWareTaskDo) Limit(limit int) IWmsWareTaskDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wmsWareTaskDo) Offset(offset int) IWmsWareTaskDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wmsWareTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareTaskDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wmsWareTaskDo) Unscoped() IWmsWareTaskDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wmsWareTaskDo) Create(values ...*model.WmsWareTask) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wmsWareTaskDo) CreateInBatches(values []*model.WmsWareTask, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wmsWareTaskDo) Save(values ...*model.WmsWareTask) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wmsWareTaskDo) First() (*model.WmsWareTask, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTask), nil
	}
}

func (w wmsWareTaskDo) Take() (*model.WmsWareTask, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTask), nil
	}
}

func (w wmsWareTaskDo) Last() (*model.WmsWareTask, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTask), nil
	}
}

func (w wmsWareTaskDo) Find() ([]*model.WmsWareTask, error) {
	result, err := w.DO.Find()
	return result.([]*model.WmsWareTask), err
}

func (w wmsWareTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWareTask, err error) {
	buf := make([]*model.WmsWareTask, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wmsWareTaskDo) FindInBatches(result *[]*model.WmsWareTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wmsWareTaskDo) Attrs(attrs ...field.AssignExpr) IWmsWareTaskDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wmsWareTaskDo) Assign(attrs ...field.AssignExpr) IWmsWareTaskDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wmsWareTaskDo) Joins(fields ...field.RelationField) IWmsWareTaskDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wmsWareTaskDo) Preload(fields ...field.RelationField) IWmsWareTaskDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wmsWareTaskDo) FirstOrInit() (*model.WmsWareTask, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTask), nil
	}
}

func (w wmsWareTaskDo) FirstOrCreate() (*model.WmsWareTask, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTask), nil
	}
}

func (w wmsWareTaskDo) FindByPage(offset int, limit int) (result []*model.WmsWareTask, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wmsWareTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wmsWareTaskDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wmsWareTaskDo) Delete(models ...*model.WmsWareTask) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wmsWareTaskDo) withDO(do gen.Dao) *wmsWareTaskDo {
	w.DO = *do.(*gen.DO)
	return w
}
