// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newUmsCollectSubject(db *gorm.DB, opts ...gen.DOOption) umsCollectSubject {
	_umsCollectSubject := umsCollectSubject{}

	_umsCollectSubject.umsCollectSubjectDo.UseDB(db, opts...)
	_umsCollectSubject.umsCollectSubjectDo.UseModel(&model.UmsCollectSubject{})

	tableName := _umsCollectSubject.umsCollectSubjectDo.TableName()
	_umsCollectSubject.ALL = field.NewAsterisk(tableName)
	_umsCollectSubject.ID = field.NewInt(tableName, "id")
	_umsCollectSubject.MemberID = field.NewInt(tableName, "member_id")
	_umsCollectSubject.SubjectID = field.NewInt64(tableName, "subject_id")
	_umsCollectSubject.SubjectName = field.NewString(tableName, "subject_name")
	_umsCollectSubject.SubjectImg = field.NewString(tableName, "subject_img")
	_umsCollectSubject.SubjectURL = field.NewString(tableName, "subject_url")
	_umsCollectSubject.CreatedAt = field.NewInt(tableName, "created_at")
	_umsCollectSubject.DeletedAt = field.NewField(tableName, "deleted_at")

	_umsCollectSubject.fillFieldMap()

	return _umsCollectSubject
}

type umsCollectSubject struct {
	umsCollectSubjectDo

	ALL         field.Asterisk
	ID          field.Int    // ID
	MemberID    field.Int    // 用户id
	SubjectID   field.Int64  // 活动id
	SubjectName field.String // 活动名
	SubjectImg  field.String // 活动封面
	SubjectURL  field.String // 活动url
	CreatedAt   field.Int    // 创建时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u umsCollectSubject) Table(newTableName string) *umsCollectSubject {
	u.umsCollectSubjectDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsCollectSubject) As(alias string) *umsCollectSubject {
	u.umsCollectSubjectDo.DO = *(u.umsCollectSubjectDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsCollectSubject) updateTableName(table string) *umsCollectSubject {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.MemberID = field.NewInt(table, "member_id")
	u.SubjectID = field.NewInt64(table, "subject_id")
	u.SubjectName = field.NewString(table, "subject_name")
	u.SubjectImg = field.NewString(table, "subject_img")
	u.SubjectURL = field.NewString(table, "subject_url")
	u.CreatedAt = field.NewInt(table, "created_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *umsCollectSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsCollectSubject) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["subject_id"] = u.SubjectID
	u.fieldMap["subject_name"] = u.SubjectName
	u.fieldMap["subject_img"] = u.SubjectImg
	u.fieldMap["subject_url"] = u.SubjectURL
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u umsCollectSubject) clone(db *gorm.DB) umsCollectSubject {
	u.umsCollectSubjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsCollectSubject) replaceDB(db *gorm.DB) umsCollectSubject {
	u.umsCollectSubjectDo.ReplaceDB(db)
	return u
}

type umsCollectSubjectDo struct{ gen.DO }

type IUmsCollectSubjectDo interface {
	gen.SubQuery
	Debug() IUmsCollectSubjectDo
	WithContext(ctx context.Context) IUmsCollectSubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsCollectSubjectDo
	WriteDB() IUmsCollectSubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsCollectSubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsCollectSubjectDo
	Not(conds ...gen.Condition) IUmsCollectSubjectDo
	Or(conds ...gen.Condition) IUmsCollectSubjectDo
	Select(conds ...field.Expr) IUmsCollectSubjectDo
	Where(conds ...gen.Condition) IUmsCollectSubjectDo
	Order(conds ...field.Expr) IUmsCollectSubjectDo
	Distinct(cols ...field.Expr) IUmsCollectSubjectDo
	Omit(cols ...field.Expr) IUmsCollectSubjectDo
	Join(table schema.Tabler, on ...field.Expr) IUmsCollectSubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSubjectDo
	Group(cols ...field.Expr) IUmsCollectSubjectDo
	Having(conds ...gen.Condition) IUmsCollectSubjectDo
	Limit(limit int) IUmsCollectSubjectDo
	Offset(offset int) IUmsCollectSubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsCollectSubjectDo
	Unscoped() IUmsCollectSubjectDo
	Create(values ...*model.UmsCollectSubject) error
	CreateInBatches(values []*model.UmsCollectSubject, batchSize int) error
	Save(values ...*model.UmsCollectSubject) error
	First() (*model.UmsCollectSubject, error)
	Take() (*model.UmsCollectSubject, error)
	Last() (*model.UmsCollectSubject, error)
	Find() ([]*model.UmsCollectSubject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsCollectSubject, err error)
	FindInBatches(result *[]*model.UmsCollectSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsCollectSubject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsCollectSubjectDo
	Assign(attrs ...field.AssignExpr) IUmsCollectSubjectDo
	Joins(fields ...field.RelationField) IUmsCollectSubjectDo
	Preload(fields ...field.RelationField) IUmsCollectSubjectDo
	FirstOrInit() (*model.UmsCollectSubject, error)
	FirstOrCreate() (*model.UmsCollectSubject, error)
	FindByPage(offset int, limit int) (result []*model.UmsCollectSubject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsCollectSubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsCollectSubjectDo) Debug() IUmsCollectSubjectDo {
	return u.withDO(u.DO.Debug())
}

func (u umsCollectSubjectDo) WithContext(ctx context.Context) IUmsCollectSubjectDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsCollectSubjectDo) ReadDB() IUmsCollectSubjectDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsCollectSubjectDo) WriteDB() IUmsCollectSubjectDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsCollectSubjectDo) Session(config *gorm.Session) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsCollectSubjectDo) Clauses(conds ...clause.Expression) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsCollectSubjectDo) Returning(value interface{}, columns ...string) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsCollectSubjectDo) Not(conds ...gen.Condition) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsCollectSubjectDo) Or(conds ...gen.Condition) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsCollectSubjectDo) Select(conds ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsCollectSubjectDo) Where(conds ...gen.Condition) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsCollectSubjectDo) Order(conds ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsCollectSubjectDo) Distinct(cols ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsCollectSubjectDo) Omit(cols ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsCollectSubjectDo) Join(table schema.Tabler, on ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsCollectSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsCollectSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsCollectSubjectDo) Group(cols ...field.Expr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsCollectSubjectDo) Having(conds ...gen.Condition) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsCollectSubjectDo) Limit(limit int) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsCollectSubjectDo) Offset(offset int) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsCollectSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsCollectSubjectDo) Unscoped() IUmsCollectSubjectDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsCollectSubjectDo) Create(values ...*model.UmsCollectSubject) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsCollectSubjectDo) CreateInBatches(values []*model.UmsCollectSubject, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsCollectSubjectDo) Save(values ...*model.UmsCollectSubject) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsCollectSubjectDo) First() (*model.UmsCollectSubject, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSubject), nil
	}
}

func (u umsCollectSubjectDo) Take() (*model.UmsCollectSubject, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSubject), nil
	}
}

func (u umsCollectSubjectDo) Last() (*model.UmsCollectSubject, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSubject), nil
	}
}

func (u umsCollectSubjectDo) Find() ([]*model.UmsCollectSubject, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsCollectSubject), err
}

func (u umsCollectSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsCollectSubject, err error) {
	buf := make([]*model.UmsCollectSubject, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsCollectSubjectDo) FindInBatches(result *[]*model.UmsCollectSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsCollectSubjectDo) Attrs(attrs ...field.AssignExpr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsCollectSubjectDo) Assign(attrs ...field.AssignExpr) IUmsCollectSubjectDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsCollectSubjectDo) Joins(fields ...field.RelationField) IUmsCollectSubjectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsCollectSubjectDo) Preload(fields ...field.RelationField) IUmsCollectSubjectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsCollectSubjectDo) FirstOrInit() (*model.UmsCollectSubject, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSubject), nil
	}
}

func (u umsCollectSubjectDo) FirstOrCreate() (*model.UmsCollectSubject, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsCollectSubject), nil
	}
}

func (u umsCollectSubjectDo) FindByPage(offset int, limit int) (result []*model.UmsCollectSubject, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsCollectSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsCollectSubjectDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsCollectSubjectDo) Delete(models ...*model.UmsCollectSubject) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsCollectSubjectDo) withDO(do gen.Dao) *umsCollectSubjectDo {
	u.DO = *do.(*gen.DO)
	return u
}
