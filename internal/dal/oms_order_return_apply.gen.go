// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newOmsOrderReturnApply(db *gorm.DB, opts ...gen.DOOption) omsOrderReturnApply {
	_omsOrderReturnApply := omsOrderReturnApply{}

	_omsOrderReturnApply.omsOrderReturnApplyDo.UseDB(db, opts...)
	_omsOrderReturnApply.omsOrderReturnApplyDo.UseModel(&model.OmsOrderReturnApply{})

	tableName := _omsOrderReturnApply.omsOrderReturnApplyDo.TableName()
	_omsOrderReturnApply.ALL = field.NewAsterisk(tableName)
	_omsOrderReturnApply.ID = field.NewInt(tableName, "id")
	_omsOrderReturnApply.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderReturnApply.OrderNo = field.NewString(tableName, "order_no")
	_omsOrderReturnApply.SkuID = field.NewInt64(tableName, "sku_id")
	_omsOrderReturnApply.Username = field.NewString(tableName, "username")
	_omsOrderReturnApply.Amount = field.NewInt64(tableName, "amount")
	_omsOrderReturnApply.ReturnName = field.NewString(tableName, "return_name")
	_omsOrderReturnApply.ReturnPhone = field.NewString(tableName, "return_phone")
	_omsOrderReturnApply.Status = field.NewInt8(tableName, "status")
	_omsOrderReturnApply.SkuName = field.NewString(tableName, "sku_name")
	_omsOrderReturnApply.SkuImg = field.NewString(tableName, "sku_img")
	_omsOrderReturnApply.SkuPrice = field.NewInt64(tableName, "sku_price")
	_omsOrderReturnApply.SkuAttrs = field.NewString(tableName, "sku_attrs")
	_omsOrderReturnApply.PayAmount = field.NewInt64(tableName, "pay_amount")
	_omsOrderReturnApply.SkuNum = field.NewInt64(tableName, "sku_num")
	_omsOrderReturnApply.SpuBrand = field.NewString(tableName, "spu_brand")
	_omsOrderReturnApply.Reason = field.NewString(tableName, "reason")
	_omsOrderReturnApply.Desc = field.NewString(tableName, "desc")
	_omsOrderReturnApply.DescPics = field.NewString(tableName, "desc_pics")
	_omsOrderReturnApply.HandleAt = field.NewInt64(tableName, "handle_at")
	_omsOrderReturnApply.HandleNote = field.NewString(tableName, "handle_note")
	_omsOrderReturnApply.HandleBy = field.NewString(tableName, "handle_by")
	_omsOrderReturnApply.ReceiveName = field.NewString(tableName, "receive_name")
	_omsOrderReturnApply.ReceivePhone = field.NewString(tableName, "receive_phone")
	_omsOrderReturnApply.ReceiveNote = field.NewString(tableName, "receive_note")
	_omsOrderReturnApply.ReceiveAt = field.NewInt64(tableName, "receive_at")
	_omsOrderReturnApply.AddressDetail = field.NewString(tableName, "address_detail")
	_omsOrderReturnApply.CreatedAt = field.NewInt(tableName, "created_at")
	_omsOrderReturnApply.UpdatedAt = field.NewInt(tableName, "updated_at")

	_omsOrderReturnApply.fillFieldMap()

	return _omsOrderReturnApply
}

type omsOrderReturnApply struct {
	omsOrderReturnApplyDo

	ALL           field.Asterisk
	ID            field.Int    // ID
	OrderID       field.Int64  // 订单id
	OrderNo       field.String // 订单号
	SkuID         field.Int64  // sku_id
	Username      field.String // 用户名
	Amount        field.Int64  // 退款金额
	ReturnName    field.String // 退款人姓名
	ReturnPhone   field.String // 退款人手机号
	Status        field.Int8   // 订单状态
	SkuName       field.String // 商品sku名
	SkuImg        field.String // 商品sku图片
	SkuPrice      field.Int64  // 商品单价/分
	SkuAttrs      field.String // 商品销售属性组合（JSON）
	PayAmount     field.Int64  // 支付金额
	SkuNum        field.Int64  // 退货数量
	SpuBrand      field.String // 品牌
	Reason        field.String // 原因
	Desc          field.String // 描述
	DescPics      field.String // 凭证图片多个逗号连接
	HandleAt      field.Int64  // 处理时间
	HandleNote    field.String // 处理备注
	HandleBy      field.String // 处理人
	ReceiveName   field.String // 收货人姓名
	ReceivePhone  field.String // 收货人手机
	ReceiveNote   field.String // 收货备注
	ReceiveAt     field.Int64  // 收货时间
	AddressDetail field.String // 收货地址
	CreatedAt     field.Int    // 创建时间
	UpdatedAt     field.Int    // 更新时间

	fieldMap map[string]field.Expr
}

func (o omsOrderReturnApply) Table(newTableName string) *omsOrderReturnApply {
	o.omsOrderReturnApplyDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderReturnApply) As(alias string) *omsOrderReturnApply {
	o.omsOrderReturnApplyDo.DO = *(o.omsOrderReturnApplyDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderReturnApply) updateTableName(table string) *omsOrderReturnApply {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.SkuID = field.NewInt64(table, "sku_id")
	o.Username = field.NewString(table, "username")
	o.Amount = field.NewInt64(table, "amount")
	o.ReturnName = field.NewString(table, "return_name")
	o.ReturnPhone = field.NewString(table, "return_phone")
	o.Status = field.NewInt8(table, "status")
	o.SkuName = field.NewString(table, "sku_name")
	o.SkuImg = field.NewString(table, "sku_img")
	o.SkuPrice = field.NewInt64(table, "sku_price")
	o.SkuAttrs = field.NewString(table, "sku_attrs")
	o.PayAmount = field.NewInt64(table, "pay_amount")
	o.SkuNum = field.NewInt64(table, "sku_num")
	o.SpuBrand = field.NewString(table, "spu_brand")
	o.Reason = field.NewString(table, "reason")
	o.Desc = field.NewString(table, "desc")
	o.DescPics = field.NewString(table, "desc_pics")
	o.HandleAt = field.NewInt64(table, "handle_at")
	o.HandleNote = field.NewString(table, "handle_note")
	o.HandleBy = field.NewString(table, "handle_by")
	o.ReceiveName = field.NewString(table, "receive_name")
	o.ReceivePhone = field.NewString(table, "receive_phone")
	o.ReceiveNote = field.NewString(table, "receive_note")
	o.ReceiveAt = field.NewInt64(table, "receive_at")
	o.AddressDetail = field.NewString(table, "address_detail")
	o.CreatedAt = field.NewInt(table, "created_at")
	o.UpdatedAt = field.NewInt(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *omsOrderReturnApply) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderReturnApply) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 29)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["sku_id"] = o.SkuID
	o.fieldMap["username"] = o.Username
	o.fieldMap["amount"] = o.Amount
	o.fieldMap["return_name"] = o.ReturnName
	o.fieldMap["return_phone"] = o.ReturnPhone
	o.fieldMap["status"] = o.Status
	o.fieldMap["sku_name"] = o.SkuName
	o.fieldMap["sku_img"] = o.SkuImg
	o.fieldMap["sku_price"] = o.SkuPrice
	o.fieldMap["sku_attrs"] = o.SkuAttrs
	o.fieldMap["pay_amount"] = o.PayAmount
	o.fieldMap["sku_num"] = o.SkuNum
	o.fieldMap["spu_brand"] = o.SpuBrand
	o.fieldMap["reason"] = o.Reason
	o.fieldMap["desc"] = o.Desc
	o.fieldMap["desc_pics"] = o.DescPics
	o.fieldMap["handle_at"] = o.HandleAt
	o.fieldMap["handle_note"] = o.HandleNote
	o.fieldMap["handle_by"] = o.HandleBy
	o.fieldMap["receive_name"] = o.ReceiveName
	o.fieldMap["receive_phone"] = o.ReceivePhone
	o.fieldMap["receive_note"] = o.ReceiveNote
	o.fieldMap["receive_at"] = o.ReceiveAt
	o.fieldMap["address_detail"] = o.AddressDetail
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o omsOrderReturnApply) clone(db *gorm.DB) omsOrderReturnApply {
	o.omsOrderReturnApplyDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderReturnApply) replaceDB(db *gorm.DB) omsOrderReturnApply {
	o.omsOrderReturnApplyDo.ReplaceDB(db)
	return o
}

type omsOrderReturnApplyDo struct{ gen.DO }

type IOmsOrderReturnApplyDo interface {
	gen.SubQuery
	Debug() IOmsOrderReturnApplyDo
	WithContext(ctx context.Context) IOmsOrderReturnApplyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderReturnApplyDo
	WriteDB() IOmsOrderReturnApplyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderReturnApplyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderReturnApplyDo
	Not(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Or(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Select(conds ...field.Expr) IOmsOrderReturnApplyDo
	Where(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Order(conds ...field.Expr) IOmsOrderReturnApplyDo
	Distinct(cols ...field.Expr) IOmsOrderReturnApplyDo
	Omit(cols ...field.Expr) IOmsOrderReturnApplyDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo
	Group(cols ...field.Expr) IOmsOrderReturnApplyDo
	Having(conds ...gen.Condition) IOmsOrderReturnApplyDo
	Limit(limit int) IOmsOrderReturnApplyDo
	Offset(offset int) IOmsOrderReturnApplyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderReturnApplyDo
	Unscoped() IOmsOrderReturnApplyDo
	Create(values ...*model.OmsOrderReturnApply) error
	CreateInBatches(values []*model.OmsOrderReturnApply, batchSize int) error
	Save(values ...*model.OmsOrderReturnApply) error
	First() (*model.OmsOrderReturnApply, error)
	Take() (*model.OmsOrderReturnApply, error)
	Last() (*model.OmsOrderReturnApply, error)
	Find() ([]*model.OmsOrderReturnApply, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderReturnApply, err error)
	FindInBatches(result *[]*model.OmsOrderReturnApply, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderReturnApply) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo
	Assign(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo
	Joins(fields ...field.RelationField) IOmsOrderReturnApplyDo
	Preload(fields ...field.RelationField) IOmsOrderReturnApplyDo
	FirstOrInit() (*model.OmsOrderReturnApply, error)
	FirstOrCreate() (*model.OmsOrderReturnApply, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderReturnApply, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderReturnApplyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderReturnApplyDo) Debug() IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderReturnApplyDo) WithContext(ctx context.Context) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderReturnApplyDo) ReadDB() IOmsOrderReturnApplyDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderReturnApplyDo) WriteDB() IOmsOrderReturnApplyDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderReturnApplyDo) Session(config *gorm.Session) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderReturnApplyDo) Clauses(conds ...clause.Expression) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderReturnApplyDo) Returning(value interface{}, columns ...string) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderReturnApplyDo) Not(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderReturnApplyDo) Or(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderReturnApplyDo) Select(conds ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderReturnApplyDo) Where(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderReturnApplyDo) Order(conds ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderReturnApplyDo) Distinct(cols ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderReturnApplyDo) Omit(cols ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderReturnApplyDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderReturnApplyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderReturnApplyDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderReturnApplyDo) Group(cols ...field.Expr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderReturnApplyDo) Having(conds ...gen.Condition) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderReturnApplyDo) Limit(limit int) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderReturnApplyDo) Offset(offset int) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderReturnApplyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderReturnApplyDo) Unscoped() IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderReturnApplyDo) Create(values ...*model.OmsOrderReturnApply) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderReturnApplyDo) CreateInBatches(values []*model.OmsOrderReturnApply, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderReturnApplyDo) Save(values ...*model.OmsOrderReturnApply) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderReturnApplyDo) First() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) Take() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) Last() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) Find() ([]*model.OmsOrderReturnApply, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderReturnApply), err
}

func (o omsOrderReturnApplyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderReturnApply, err error) {
	buf := make([]*model.OmsOrderReturnApply, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderReturnApplyDo) FindInBatches(result *[]*model.OmsOrderReturnApply, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderReturnApplyDo) Attrs(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderReturnApplyDo) Assign(attrs ...field.AssignExpr) IOmsOrderReturnApplyDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderReturnApplyDo) Joins(fields ...field.RelationField) IOmsOrderReturnApplyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderReturnApplyDo) Preload(fields ...field.RelationField) IOmsOrderReturnApplyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderReturnApplyDo) FirstOrInit() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) FirstOrCreate() (*model.OmsOrderReturnApply, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnApply), nil
	}
}

func (o omsOrderReturnApplyDo) FindByPage(offset int, limit int) (result []*model.OmsOrderReturnApply, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderReturnApplyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderReturnApplyDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderReturnApplyDo) Delete(models ...*model.OmsOrderReturnApply) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderReturnApplyDo) withDO(do gen.Dao) *omsOrderReturnApplyDo {
	o.DO = *do.(*gen.DO)
	return o
}
