// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminExceptionLog(db *gorm.DB, opts ...gen.DOOption) adminExceptionLog {
	_adminExceptionLog := adminExceptionLog{}

	_adminExceptionLog.adminExceptionLogDo.UseDB(db, opts...)
	_adminExceptionLog.adminExceptionLogDo.UseModel(&model.AdminExceptionLog{})

	tableName := _adminExceptionLog.adminExceptionLogDo.TableName()
	_adminExceptionLog.ALL = field.NewAsterisk(tableName)
	_adminExceptionLog.ID = field.NewInt(tableName, "id")
	_adminExceptionLog.Type = field.NewString(tableName, "type")
	_adminExceptionLog.Code = field.NewString(tableName, "code")
	_adminExceptionLog.Message = field.NewString(tableName, "message")
	_adminExceptionLog.File = field.NewString(tableName, "file")
	_adminExceptionLog.Line = field.NewInt(tableName, "line")
	_adminExceptionLog.Trace = field.NewString(tableName, "trace")
	_adminExceptionLog.Method = field.NewString(tableName, "method")
	_adminExceptionLog.Path = field.NewString(tableName, "path")
	_adminExceptionLog.Query = field.NewString(tableName, "query")
	_adminExceptionLog.Body = field.NewString(tableName, "body")
	_adminExceptionLog.Cookies = field.NewString(tableName, "cookies")
	_adminExceptionLog.Headers = field.NewString(tableName, "headers")
	_adminExceptionLog.IP = field.NewString(tableName, "ip")
	_adminExceptionLog.CreatedAt = field.NewTime(tableName, "created_at")
	_adminExceptionLog.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminExceptionLog.fillFieldMap()

	return _adminExceptionLog
}

type adminExceptionLog struct {
	adminExceptionLogDo

	ALL       field.Asterisk
	ID        field.Int
	Type      field.String
	Code      field.String
	Message   field.String
	File      field.String
	Line      field.Int
	Trace     field.String
	Method    field.String
	Path      field.String
	Query     field.String
	Body      field.String
	Cookies   field.String
	Headers   field.String
	IP        field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminExceptionLog) Table(newTableName string) *adminExceptionLog {
	a.adminExceptionLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminExceptionLog) As(alias string) *adminExceptionLog {
	a.adminExceptionLogDo.DO = *(a.adminExceptionLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminExceptionLog) updateTableName(table string) *adminExceptionLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt(table, "id")
	a.Type = field.NewString(table, "type")
	a.Code = field.NewString(table, "code")
	a.Message = field.NewString(table, "message")
	a.File = field.NewString(table, "file")
	a.Line = field.NewInt(table, "line")
	a.Trace = field.NewString(table, "trace")
	a.Method = field.NewString(table, "method")
	a.Path = field.NewString(table, "path")
	a.Query = field.NewString(table, "query")
	a.Body = field.NewString(table, "body")
	a.Cookies = field.NewString(table, "cookies")
	a.Headers = field.NewString(table, "headers")
	a.IP = field.NewString(table, "ip")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminExceptionLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminExceptionLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["type"] = a.Type
	a.fieldMap["code"] = a.Code
	a.fieldMap["message"] = a.Message
	a.fieldMap["file"] = a.File
	a.fieldMap["line"] = a.Line
	a.fieldMap["trace"] = a.Trace
	a.fieldMap["method"] = a.Method
	a.fieldMap["path"] = a.Path
	a.fieldMap["query"] = a.Query
	a.fieldMap["body"] = a.Body
	a.fieldMap["cookies"] = a.Cookies
	a.fieldMap["headers"] = a.Headers
	a.fieldMap["ip"] = a.IP
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminExceptionLog) clone(db *gorm.DB) adminExceptionLog {
	a.adminExceptionLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminExceptionLog) replaceDB(db *gorm.DB) adminExceptionLog {
	a.adminExceptionLogDo.ReplaceDB(db)
	return a
}

type adminExceptionLogDo struct{ gen.DO }

type IAdminExceptionLogDo interface {
	gen.SubQuery
	Debug() IAdminExceptionLogDo
	WithContext(ctx context.Context) IAdminExceptionLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminExceptionLogDo
	WriteDB() IAdminExceptionLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminExceptionLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminExceptionLogDo
	Not(conds ...gen.Condition) IAdminExceptionLogDo
	Or(conds ...gen.Condition) IAdminExceptionLogDo
	Select(conds ...field.Expr) IAdminExceptionLogDo
	Where(conds ...gen.Condition) IAdminExceptionLogDo
	Order(conds ...field.Expr) IAdminExceptionLogDo
	Distinct(cols ...field.Expr) IAdminExceptionLogDo
	Omit(cols ...field.Expr) IAdminExceptionLogDo
	Join(table schema.Tabler, on ...field.Expr) IAdminExceptionLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminExceptionLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminExceptionLogDo
	Group(cols ...field.Expr) IAdminExceptionLogDo
	Having(conds ...gen.Condition) IAdminExceptionLogDo
	Limit(limit int) IAdminExceptionLogDo
	Offset(offset int) IAdminExceptionLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminExceptionLogDo
	Unscoped() IAdminExceptionLogDo
	Create(values ...*model.AdminExceptionLog) error
	CreateInBatches(values []*model.AdminExceptionLog, batchSize int) error
	Save(values ...*model.AdminExceptionLog) error
	First() (*model.AdminExceptionLog, error)
	Take() (*model.AdminExceptionLog, error)
	Last() (*model.AdminExceptionLog, error)
	Find() ([]*model.AdminExceptionLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminExceptionLog, err error)
	FindInBatches(result *[]*model.AdminExceptionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminExceptionLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminExceptionLogDo
	Assign(attrs ...field.AssignExpr) IAdminExceptionLogDo
	Joins(fields ...field.RelationField) IAdminExceptionLogDo
	Preload(fields ...field.RelationField) IAdminExceptionLogDo
	FirstOrInit() (*model.AdminExceptionLog, error)
	FirstOrCreate() (*model.AdminExceptionLog, error)
	FindByPage(offset int, limit int) (result []*model.AdminExceptionLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminExceptionLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminExceptionLogDo) Debug() IAdminExceptionLogDo {
	return a.withDO(a.DO.Debug())
}

func (a adminExceptionLogDo) WithContext(ctx context.Context) IAdminExceptionLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminExceptionLogDo) ReadDB() IAdminExceptionLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminExceptionLogDo) WriteDB() IAdminExceptionLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminExceptionLogDo) Session(config *gorm.Session) IAdminExceptionLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminExceptionLogDo) Clauses(conds ...clause.Expression) IAdminExceptionLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminExceptionLogDo) Returning(value interface{}, columns ...string) IAdminExceptionLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminExceptionLogDo) Not(conds ...gen.Condition) IAdminExceptionLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminExceptionLogDo) Or(conds ...gen.Condition) IAdminExceptionLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminExceptionLogDo) Select(conds ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminExceptionLogDo) Where(conds ...gen.Condition) IAdminExceptionLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminExceptionLogDo) Order(conds ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminExceptionLogDo) Distinct(cols ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminExceptionLogDo) Omit(cols ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminExceptionLogDo) Join(table schema.Tabler, on ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminExceptionLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminExceptionLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminExceptionLogDo) Group(cols ...field.Expr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminExceptionLogDo) Having(conds ...gen.Condition) IAdminExceptionLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminExceptionLogDo) Limit(limit int) IAdminExceptionLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminExceptionLogDo) Offset(offset int) IAdminExceptionLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminExceptionLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminExceptionLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminExceptionLogDo) Unscoped() IAdminExceptionLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminExceptionLogDo) Create(values ...*model.AdminExceptionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminExceptionLogDo) CreateInBatches(values []*model.AdminExceptionLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminExceptionLogDo) Save(values ...*model.AdminExceptionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminExceptionLogDo) First() (*model.AdminExceptionLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExceptionLog), nil
	}
}

func (a adminExceptionLogDo) Take() (*model.AdminExceptionLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExceptionLog), nil
	}
}

func (a adminExceptionLogDo) Last() (*model.AdminExceptionLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExceptionLog), nil
	}
}

func (a adminExceptionLogDo) Find() ([]*model.AdminExceptionLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminExceptionLog), err
}

func (a adminExceptionLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminExceptionLog, err error) {
	buf := make([]*model.AdminExceptionLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminExceptionLogDo) FindInBatches(result *[]*model.AdminExceptionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminExceptionLogDo) Attrs(attrs ...field.AssignExpr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminExceptionLogDo) Assign(attrs ...field.AssignExpr) IAdminExceptionLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminExceptionLogDo) Joins(fields ...field.RelationField) IAdminExceptionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminExceptionLogDo) Preload(fields ...field.RelationField) IAdminExceptionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminExceptionLogDo) FirstOrInit() (*model.AdminExceptionLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExceptionLog), nil
	}
}

func (a adminExceptionLogDo) FirstOrCreate() (*model.AdminExceptionLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminExceptionLog), nil
	}
}

func (a adminExceptionLogDo) FindByPage(offset int, limit int) (result []*model.AdminExceptionLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminExceptionLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminExceptionLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminExceptionLogDo) Delete(models ...*model.AdminExceptionLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminExceptionLogDo) withDO(do gen.Dao) *adminExceptionLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
