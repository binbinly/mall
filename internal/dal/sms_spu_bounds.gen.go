// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsSpuBound(db *gorm.DB, opts ...gen.DOOption) smsSpuBound {
	_smsSpuBound := smsSpuBound{}

	_smsSpuBound.smsSpuBoundDo.UseDB(db, opts...)
	_smsSpuBound.smsSpuBoundDo.UseModel(&model.SmsSpuBound{})

	tableName := _smsSpuBound.smsSpuBoundDo.TableName()
	_smsSpuBound.ALL = field.NewAsterisk(tableName)
	_smsSpuBound.ID = field.NewInt(tableName, "id")
	_smsSpuBound.SpuID = field.NewInt64(tableName, "spu_id")
	_smsSpuBound.GrowBounds = field.NewInt64(tableName, "grow_bounds")
	_smsSpuBound.BuyBounds = field.NewInt64(tableName, "buy_bounds")
	_smsSpuBound.Work = field.NewInt8(tableName, "work")

	_smsSpuBound.fillFieldMap()

	return _smsSpuBound
}

type smsSpuBound struct {
	smsSpuBoundDo

	ALL        field.Asterisk
	ID         field.Int   // ID
	SpuID      field.Int64 // spu_id
	GrowBounds field.Int64 // 成长积分
	BuyBounds  field.Int64 // 购物积分
	Work       field.Int8  // 优惠生效情况[0 - 无优惠，成长积分是否赠送

	fieldMap map[string]field.Expr
}

func (s smsSpuBound) Table(newTableName string) *smsSpuBound {
	s.smsSpuBoundDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSpuBound) As(alias string) *smsSpuBound {
	s.smsSpuBoundDo.DO = *(s.smsSpuBoundDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSpuBound) updateTableName(table string) *smsSpuBound {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.SpuID = field.NewInt64(table, "spu_id")
	s.GrowBounds = field.NewInt64(table, "grow_bounds")
	s.BuyBounds = field.NewInt64(table, "buy_bounds")
	s.Work = field.NewInt8(table, "work")

	s.fillFieldMap()

	return s
}

func (s *smsSpuBound) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSpuBound) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["grow_bounds"] = s.GrowBounds
	s.fieldMap["buy_bounds"] = s.BuyBounds
	s.fieldMap["work"] = s.Work
}

func (s smsSpuBound) clone(db *gorm.DB) smsSpuBound {
	s.smsSpuBoundDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSpuBound) replaceDB(db *gorm.DB) smsSpuBound {
	s.smsSpuBoundDo.ReplaceDB(db)
	return s
}

type smsSpuBoundDo struct{ gen.DO }

type ISmsSpuBoundDo interface {
	gen.SubQuery
	Debug() ISmsSpuBoundDo
	WithContext(ctx context.Context) ISmsSpuBoundDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSpuBoundDo
	WriteDB() ISmsSpuBoundDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSpuBoundDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSpuBoundDo
	Not(conds ...gen.Condition) ISmsSpuBoundDo
	Or(conds ...gen.Condition) ISmsSpuBoundDo
	Select(conds ...field.Expr) ISmsSpuBoundDo
	Where(conds ...gen.Condition) ISmsSpuBoundDo
	Order(conds ...field.Expr) ISmsSpuBoundDo
	Distinct(cols ...field.Expr) ISmsSpuBoundDo
	Omit(cols ...field.Expr) ISmsSpuBoundDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSpuBoundDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSpuBoundDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSpuBoundDo
	Group(cols ...field.Expr) ISmsSpuBoundDo
	Having(conds ...gen.Condition) ISmsSpuBoundDo
	Limit(limit int) ISmsSpuBoundDo
	Offset(offset int) ISmsSpuBoundDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSpuBoundDo
	Unscoped() ISmsSpuBoundDo
	Create(values ...*model.SmsSpuBound) error
	CreateInBatches(values []*model.SmsSpuBound, batchSize int) error
	Save(values ...*model.SmsSpuBound) error
	First() (*model.SmsSpuBound, error)
	Take() (*model.SmsSpuBound, error)
	Last() (*model.SmsSpuBound, error)
	Find() ([]*model.SmsSpuBound, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSpuBound, err error)
	FindInBatches(result *[]*model.SmsSpuBound, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSpuBound) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSpuBoundDo
	Assign(attrs ...field.AssignExpr) ISmsSpuBoundDo
	Joins(fields ...field.RelationField) ISmsSpuBoundDo
	Preload(fields ...field.RelationField) ISmsSpuBoundDo
	FirstOrInit() (*model.SmsSpuBound, error)
	FirstOrCreate() (*model.SmsSpuBound, error)
	FindByPage(offset int, limit int) (result []*model.SmsSpuBound, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSpuBoundDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSpuBoundDo) Debug() ISmsSpuBoundDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSpuBoundDo) WithContext(ctx context.Context) ISmsSpuBoundDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSpuBoundDo) ReadDB() ISmsSpuBoundDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSpuBoundDo) WriteDB() ISmsSpuBoundDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSpuBoundDo) Session(config *gorm.Session) ISmsSpuBoundDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSpuBoundDo) Clauses(conds ...clause.Expression) ISmsSpuBoundDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSpuBoundDo) Returning(value interface{}, columns ...string) ISmsSpuBoundDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSpuBoundDo) Not(conds ...gen.Condition) ISmsSpuBoundDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSpuBoundDo) Or(conds ...gen.Condition) ISmsSpuBoundDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSpuBoundDo) Select(conds ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSpuBoundDo) Where(conds ...gen.Condition) ISmsSpuBoundDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSpuBoundDo) Order(conds ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSpuBoundDo) Distinct(cols ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSpuBoundDo) Omit(cols ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSpuBoundDo) Join(table schema.Tabler, on ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSpuBoundDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSpuBoundDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSpuBoundDo) Group(cols ...field.Expr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSpuBoundDo) Having(conds ...gen.Condition) ISmsSpuBoundDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSpuBoundDo) Limit(limit int) ISmsSpuBoundDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSpuBoundDo) Offset(offset int) ISmsSpuBoundDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSpuBoundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSpuBoundDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSpuBoundDo) Unscoped() ISmsSpuBoundDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSpuBoundDo) Create(values ...*model.SmsSpuBound) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSpuBoundDo) CreateInBatches(values []*model.SmsSpuBound, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSpuBoundDo) Save(values ...*model.SmsSpuBound) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSpuBoundDo) First() (*model.SmsSpuBound, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSpuBound), nil
	}
}

func (s smsSpuBoundDo) Take() (*model.SmsSpuBound, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSpuBound), nil
	}
}

func (s smsSpuBoundDo) Last() (*model.SmsSpuBound, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSpuBound), nil
	}
}

func (s smsSpuBoundDo) Find() ([]*model.SmsSpuBound, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSpuBound), err
}

func (s smsSpuBoundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSpuBound, err error) {
	buf := make([]*model.SmsSpuBound, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSpuBoundDo) FindInBatches(result *[]*model.SmsSpuBound, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSpuBoundDo) Attrs(attrs ...field.AssignExpr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSpuBoundDo) Assign(attrs ...field.AssignExpr) ISmsSpuBoundDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSpuBoundDo) Joins(fields ...field.RelationField) ISmsSpuBoundDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSpuBoundDo) Preload(fields ...field.RelationField) ISmsSpuBoundDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSpuBoundDo) FirstOrInit() (*model.SmsSpuBound, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSpuBound), nil
	}
}

func (s smsSpuBoundDo) FirstOrCreate() (*model.SmsSpuBound, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSpuBound), nil
	}
}

func (s smsSpuBoundDo) FindByPage(offset int, limit int) (result []*model.SmsSpuBound, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSpuBoundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSpuBoundDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSpuBoundDo) Delete(models ...*model.SmsSpuBound) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSpuBoundDo) withDO(do gen.Dao) *smsSpuBoundDo {
	s.DO = *do.(*gen.DO)
	return s
}
