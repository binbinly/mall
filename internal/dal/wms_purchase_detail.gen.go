// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newWmsPurchaseDetail(db *gorm.DB, opts ...gen.DOOption) wmsPurchaseDetail {
	_wmsPurchaseDetail := wmsPurchaseDetail{}

	_wmsPurchaseDetail.wmsPurchaseDetailDo.UseDB(db, opts...)
	_wmsPurchaseDetail.wmsPurchaseDetailDo.UseModel(&model.WmsPurchaseDetail{})

	tableName := _wmsPurchaseDetail.wmsPurchaseDetailDo.TableName()
	_wmsPurchaseDetail.ALL = field.NewAsterisk(tableName)
	_wmsPurchaseDetail.ID = field.NewInt(tableName, "id")
	_wmsPurchaseDetail.PurchaseID = field.NewInt(tableName, "purchase_id")
	_wmsPurchaseDetail.SkuID = field.NewInt(tableName, "sku_id")
	_wmsPurchaseDetail.SkuNum = field.NewInt(tableName, "sku_num")
	_wmsPurchaseDetail.SkuPrice = field.NewInt(tableName, "sku_price")
	_wmsPurchaseDetail.WareID = field.NewInt(tableName, "ware_id")
	_wmsPurchaseDetail.Status = field.NewInt8(tableName, "status")
	_wmsPurchaseDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_wmsPurchaseDetail.UpdatedAt = field.NewTime(tableName, "updated_at")

	_wmsPurchaseDetail.fillFieldMap()

	return _wmsPurchaseDetail
}

type wmsPurchaseDetail struct {
	wmsPurchaseDetailDo

	ALL        field.Asterisk
	ID         field.Int  // ID
	PurchaseID field.Int  // 采购单id
	SkuID      field.Int  // 采购商品id
	SkuNum     field.Int  // 采购数量
	SkuPrice   field.Int  // 采购金额/分
	WareID     field.Int  // 仓库id
	Status     field.Int8 // 状态[0新建，1已分配，2正在采购，3已完成，4采购失败]
	CreatedAt  field.Time // 创建时间
	UpdatedAt  field.Time // 更新时间

	fieldMap map[string]field.Expr
}

func (w wmsPurchaseDetail) Table(newTableName string) *wmsPurchaseDetail {
	w.wmsPurchaseDetailDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wmsPurchaseDetail) As(alias string) *wmsPurchaseDetail {
	w.wmsPurchaseDetailDo.DO = *(w.wmsPurchaseDetailDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wmsPurchaseDetail) updateTableName(table string) *wmsPurchaseDetail {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt(table, "id")
	w.PurchaseID = field.NewInt(table, "purchase_id")
	w.SkuID = field.NewInt(table, "sku_id")
	w.SkuNum = field.NewInt(table, "sku_num")
	w.SkuPrice = field.NewInt(table, "sku_price")
	w.WareID = field.NewInt(table, "ware_id")
	w.Status = field.NewInt8(table, "status")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *wmsPurchaseDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wmsPurchaseDetail) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["purchase_id"] = w.PurchaseID
	w.fieldMap["sku_id"] = w.SkuID
	w.fieldMap["sku_num"] = w.SkuNum
	w.fieldMap["sku_price"] = w.SkuPrice
	w.fieldMap["ware_id"] = w.WareID
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w wmsPurchaseDetail) clone(db *gorm.DB) wmsPurchaseDetail {
	w.wmsPurchaseDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wmsPurchaseDetail) replaceDB(db *gorm.DB) wmsPurchaseDetail {
	w.wmsPurchaseDetailDo.ReplaceDB(db)
	return w
}

type wmsPurchaseDetailDo struct{ gen.DO }

type IWmsPurchaseDetailDo interface {
	gen.SubQuery
	Debug() IWmsPurchaseDetailDo
	WithContext(ctx context.Context) IWmsPurchaseDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWmsPurchaseDetailDo
	WriteDB() IWmsPurchaseDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWmsPurchaseDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWmsPurchaseDetailDo
	Not(conds ...gen.Condition) IWmsPurchaseDetailDo
	Or(conds ...gen.Condition) IWmsPurchaseDetailDo
	Select(conds ...field.Expr) IWmsPurchaseDetailDo
	Where(conds ...gen.Condition) IWmsPurchaseDetailDo
	Order(conds ...field.Expr) IWmsPurchaseDetailDo
	Distinct(cols ...field.Expr) IWmsPurchaseDetailDo
	Omit(cols ...field.Expr) IWmsPurchaseDetailDo
	Join(table schema.Tabler, on ...field.Expr) IWmsPurchaseDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWmsPurchaseDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWmsPurchaseDetailDo
	Group(cols ...field.Expr) IWmsPurchaseDetailDo
	Having(conds ...gen.Condition) IWmsPurchaseDetailDo
	Limit(limit int) IWmsPurchaseDetailDo
	Offset(offset int) IWmsPurchaseDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsPurchaseDetailDo
	Unscoped() IWmsPurchaseDetailDo
	Create(values ...*model.WmsPurchaseDetail) error
	CreateInBatches(values []*model.WmsPurchaseDetail, batchSize int) error
	Save(values ...*model.WmsPurchaseDetail) error
	First() (*model.WmsPurchaseDetail, error)
	Take() (*model.WmsPurchaseDetail, error)
	Last() (*model.WmsPurchaseDetail, error)
	Find() ([]*model.WmsPurchaseDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsPurchaseDetail, err error)
	FindInBatches(result *[]*model.WmsPurchaseDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WmsPurchaseDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWmsPurchaseDetailDo
	Assign(attrs ...field.AssignExpr) IWmsPurchaseDetailDo
	Joins(fields ...field.RelationField) IWmsPurchaseDetailDo
	Preload(fields ...field.RelationField) IWmsPurchaseDetailDo
	FirstOrInit() (*model.WmsPurchaseDetail, error)
	FirstOrCreate() (*model.WmsPurchaseDetail, error)
	FindByPage(offset int, limit int) (result []*model.WmsPurchaseDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWmsPurchaseDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wmsPurchaseDetailDo) Debug() IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Debug())
}

func (w wmsPurchaseDetailDo) WithContext(ctx context.Context) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wmsPurchaseDetailDo) ReadDB() IWmsPurchaseDetailDo {
	return w.Clauses(dbresolver.Read)
}

func (w wmsPurchaseDetailDo) WriteDB() IWmsPurchaseDetailDo {
	return w.Clauses(dbresolver.Write)
}

func (w wmsPurchaseDetailDo) Session(config *gorm.Session) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Session(config))
}

func (w wmsPurchaseDetailDo) Clauses(conds ...clause.Expression) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wmsPurchaseDetailDo) Returning(value interface{}, columns ...string) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wmsPurchaseDetailDo) Not(conds ...gen.Condition) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wmsPurchaseDetailDo) Or(conds ...gen.Condition) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wmsPurchaseDetailDo) Select(conds ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wmsPurchaseDetailDo) Where(conds ...gen.Condition) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wmsPurchaseDetailDo) Order(conds ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wmsPurchaseDetailDo) Distinct(cols ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wmsPurchaseDetailDo) Omit(cols ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wmsPurchaseDetailDo) Join(table schema.Tabler, on ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wmsPurchaseDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wmsPurchaseDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wmsPurchaseDetailDo) Group(cols ...field.Expr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wmsPurchaseDetailDo) Having(conds ...gen.Condition) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wmsPurchaseDetailDo) Limit(limit int) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wmsPurchaseDetailDo) Offset(offset int) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wmsPurchaseDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wmsPurchaseDetailDo) Unscoped() IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wmsPurchaseDetailDo) Create(values ...*model.WmsPurchaseDetail) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wmsPurchaseDetailDo) CreateInBatches(values []*model.WmsPurchaseDetail, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wmsPurchaseDetailDo) Save(values ...*model.WmsPurchaseDetail) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wmsPurchaseDetailDo) First() (*model.WmsPurchaseDetail, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsPurchaseDetail), nil
	}
}

func (w wmsPurchaseDetailDo) Take() (*model.WmsPurchaseDetail, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsPurchaseDetail), nil
	}
}

func (w wmsPurchaseDetailDo) Last() (*model.WmsPurchaseDetail, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsPurchaseDetail), nil
	}
}

func (w wmsPurchaseDetailDo) Find() ([]*model.WmsPurchaseDetail, error) {
	result, err := w.DO.Find()
	return result.([]*model.WmsPurchaseDetail), err
}

func (w wmsPurchaseDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsPurchaseDetail, err error) {
	buf := make([]*model.WmsPurchaseDetail, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wmsPurchaseDetailDo) FindInBatches(result *[]*model.WmsPurchaseDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wmsPurchaseDetailDo) Attrs(attrs ...field.AssignExpr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wmsPurchaseDetailDo) Assign(attrs ...field.AssignExpr) IWmsPurchaseDetailDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wmsPurchaseDetailDo) Joins(fields ...field.RelationField) IWmsPurchaseDetailDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wmsPurchaseDetailDo) Preload(fields ...field.RelationField) IWmsPurchaseDetailDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wmsPurchaseDetailDo) FirstOrInit() (*model.WmsPurchaseDetail, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsPurchaseDetail), nil
	}
}

func (w wmsPurchaseDetailDo) FirstOrCreate() (*model.WmsPurchaseDetail, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsPurchaseDetail), nil
	}
}

func (w wmsPurchaseDetailDo) FindByPage(offset int, limit int) (result []*model.WmsPurchaseDetail, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wmsPurchaseDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wmsPurchaseDetailDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wmsPurchaseDetailDo) Delete(models ...*model.WmsPurchaseDetail) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wmsPurchaseDetailDo) withDO(do gen.Dao) *wmsPurchaseDetailDo {
	w.DO = *do.(*gen.DO)
	return w
}
