// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsHomeSubject(db *gorm.DB, opts ...gen.DOOption) smsHomeSubject {
	_smsHomeSubject := smsHomeSubject{}

	_smsHomeSubject.smsHomeSubjectDo.UseDB(db, opts...)
	_smsHomeSubject.smsHomeSubjectDo.UseModel(&model.SmsHomeSubject{})

	tableName := _smsHomeSubject.smsHomeSubjectDo.TableName()
	_smsHomeSubject.ALL = field.NewAsterisk(tableName)
	_smsHomeSubject.ID = field.NewInt(tableName, "id")
	_smsHomeSubject.Title = field.NewString(tableName, "title")
	_smsHomeSubject.Subtitle = field.NewString(tableName, "subtitle")
	_smsHomeSubject.Img = field.NewString(tableName, "img")
	_smsHomeSubject.Status = field.NewInt8(tableName, "status")
	_smsHomeSubject.URL = field.NewString(tableName, "url")
	_smsHomeSubject.Note = field.NewString(tableName, "note")
	_smsHomeSubject.Sort = field.NewInt(tableName, "sort")
	_smsHomeSubject.CreatedAt = field.NewInt(tableName, "created_at")
	_smsHomeSubject.UpdatedAt = field.NewInt(tableName, "updated_at")

	_smsHomeSubject.fillFieldMap()

	return _smsHomeSubject
}

type smsHomeSubject struct {
	smsHomeSubjectDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	Title     field.String // 标题
	Subtitle  field.String // 副标题
	Img       field.String // 图片
	Status    field.Int8   // 状态
	URL       field.String // 链接地址
	Note      field.String // 备注
	Sort      field.Int    // 排序
	CreatedAt field.Int    // 创建时间
	UpdatedAt field.Int    // 更新时间

	fieldMap map[string]field.Expr
}

func (s smsHomeSubject) Table(newTableName string) *smsHomeSubject {
	s.smsHomeSubjectDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsHomeSubject) As(alias string) *smsHomeSubject {
	s.smsHomeSubjectDo.DO = *(s.smsHomeSubjectDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsHomeSubject) updateTableName(table string) *smsHomeSubject {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Title = field.NewString(table, "title")
	s.Subtitle = field.NewString(table, "subtitle")
	s.Img = field.NewString(table, "img")
	s.Status = field.NewInt8(table, "status")
	s.URL = field.NewString(table, "url")
	s.Note = field.NewString(table, "note")
	s.Sort = field.NewInt(table, "sort")
	s.CreatedAt = field.NewInt(table, "created_at")
	s.UpdatedAt = field.NewInt(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *smsHomeSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsHomeSubject) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["subtitle"] = s.Subtitle
	s.fieldMap["img"] = s.Img
	s.fieldMap["status"] = s.Status
	s.fieldMap["url"] = s.URL
	s.fieldMap["note"] = s.Note
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s smsHomeSubject) clone(db *gorm.DB) smsHomeSubject {
	s.smsHomeSubjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsHomeSubject) replaceDB(db *gorm.DB) smsHomeSubject {
	s.smsHomeSubjectDo.ReplaceDB(db)
	return s
}

type smsHomeSubjectDo struct{ gen.DO }

type ISmsHomeSubjectDo interface {
	gen.SubQuery
	Debug() ISmsHomeSubjectDo
	WithContext(ctx context.Context) ISmsHomeSubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsHomeSubjectDo
	WriteDB() ISmsHomeSubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsHomeSubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsHomeSubjectDo
	Not(conds ...gen.Condition) ISmsHomeSubjectDo
	Or(conds ...gen.Condition) ISmsHomeSubjectDo
	Select(conds ...field.Expr) ISmsHomeSubjectDo
	Where(conds ...gen.Condition) ISmsHomeSubjectDo
	Order(conds ...field.Expr) ISmsHomeSubjectDo
	Distinct(cols ...field.Expr) ISmsHomeSubjectDo
	Omit(cols ...field.Expr) ISmsHomeSubjectDo
	Join(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectDo
	Group(cols ...field.Expr) ISmsHomeSubjectDo
	Having(conds ...gen.Condition) ISmsHomeSubjectDo
	Limit(limit int) ISmsHomeSubjectDo
	Offset(offset int) ISmsHomeSubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeSubjectDo
	Unscoped() ISmsHomeSubjectDo
	Create(values ...*model.SmsHomeSubject) error
	CreateInBatches(values []*model.SmsHomeSubject, batchSize int) error
	Save(values ...*model.SmsHomeSubject) error
	First() (*model.SmsHomeSubject, error)
	Take() (*model.SmsHomeSubject, error)
	Last() (*model.SmsHomeSubject, error)
	Find() ([]*model.SmsHomeSubject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeSubject, err error)
	FindInBatches(result *[]*model.SmsHomeSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsHomeSubject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsHomeSubjectDo
	Assign(attrs ...field.AssignExpr) ISmsHomeSubjectDo
	Joins(fields ...field.RelationField) ISmsHomeSubjectDo
	Preload(fields ...field.RelationField) ISmsHomeSubjectDo
	FirstOrInit() (*model.SmsHomeSubject, error)
	FirstOrCreate() (*model.SmsHomeSubject, error)
	FindByPage(offset int, limit int) (result []*model.SmsHomeSubject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsHomeSubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsHomeSubjectDo) Debug() ISmsHomeSubjectDo {
	return s.withDO(s.DO.Debug())
}

func (s smsHomeSubjectDo) WithContext(ctx context.Context) ISmsHomeSubjectDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsHomeSubjectDo) ReadDB() ISmsHomeSubjectDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsHomeSubjectDo) WriteDB() ISmsHomeSubjectDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsHomeSubjectDo) Session(config *gorm.Session) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsHomeSubjectDo) Clauses(conds ...clause.Expression) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsHomeSubjectDo) Returning(value interface{}, columns ...string) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsHomeSubjectDo) Not(conds ...gen.Condition) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsHomeSubjectDo) Or(conds ...gen.Condition) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsHomeSubjectDo) Select(conds ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsHomeSubjectDo) Where(conds ...gen.Condition) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsHomeSubjectDo) Order(conds ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsHomeSubjectDo) Distinct(cols ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsHomeSubjectDo) Omit(cols ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsHomeSubjectDo) Join(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsHomeSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsHomeSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsHomeSubjectDo) Group(cols ...field.Expr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsHomeSubjectDo) Having(conds ...gen.Condition) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsHomeSubjectDo) Limit(limit int) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsHomeSubjectDo) Offset(offset int) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsHomeSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsHomeSubjectDo) Unscoped() ISmsHomeSubjectDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsHomeSubjectDo) Create(values ...*model.SmsHomeSubject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsHomeSubjectDo) CreateInBatches(values []*model.SmsHomeSubject, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsHomeSubjectDo) Save(values ...*model.SmsHomeSubject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsHomeSubjectDo) First() (*model.SmsHomeSubject, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubject), nil
	}
}

func (s smsHomeSubjectDo) Take() (*model.SmsHomeSubject, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubject), nil
	}
}

func (s smsHomeSubjectDo) Last() (*model.SmsHomeSubject, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubject), nil
	}
}

func (s smsHomeSubjectDo) Find() ([]*model.SmsHomeSubject, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsHomeSubject), err
}

func (s smsHomeSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeSubject, err error) {
	buf := make([]*model.SmsHomeSubject, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsHomeSubjectDo) FindInBatches(result *[]*model.SmsHomeSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsHomeSubjectDo) Attrs(attrs ...field.AssignExpr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsHomeSubjectDo) Assign(attrs ...field.AssignExpr) ISmsHomeSubjectDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsHomeSubjectDo) Joins(fields ...field.RelationField) ISmsHomeSubjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsHomeSubjectDo) Preload(fields ...field.RelationField) ISmsHomeSubjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsHomeSubjectDo) FirstOrInit() (*model.SmsHomeSubject, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubject), nil
	}
}

func (s smsHomeSubjectDo) FirstOrCreate() (*model.SmsHomeSubject, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubject), nil
	}
}

func (s smsHomeSubjectDo) FindByPage(offset int, limit int) (result []*model.SmsHomeSubject, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsHomeSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsHomeSubjectDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsHomeSubjectDo) Delete(models ...*model.SmsHomeSubject) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsHomeSubjectDo) withDO(do gen.Dao) *smsHomeSubjectDo {
	s.DO = *do.(*gen.DO)
	return s
}
