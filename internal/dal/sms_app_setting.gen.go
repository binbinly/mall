// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsAppSetting(db *gorm.DB, opts ...gen.DOOption) smsAppSetting {
	_smsAppSetting := smsAppSetting{}

	_smsAppSetting.smsAppSettingDo.UseDB(db, opts...)
	_smsAppSetting.smsAppSettingDo.UseModel(&model.SmsAppSetting{})

	tableName := _smsAppSetting.smsAppSettingDo.TableName()
	_smsAppSetting.ALL = field.NewAsterisk(tableName)
	_smsAppSetting.ID = field.NewInt(tableName, "id")
	_smsAppSetting.CatID = field.NewInt(tableName, "cat_id")
	_smsAppSetting.Page = field.NewInt8(tableName, "page")
	_smsAppSetting.Type = field.NewInt8(tableName, "type")
	_smsAppSetting.Data = field.NewString(tableName, "data")
	_smsAppSetting.Sort = field.NewInt(tableName, "sort")
	_smsAppSetting.CreateBy = field.NewInt(tableName, "create_by")
	_smsAppSetting.UpdateBy = field.NewInt(tableName, "update_by")
	_smsAppSetting.CreatedAt = field.NewInt(tableName, "created_at")
	_smsAppSetting.UpdatedAt = field.NewInt(tableName, "updated_at")

	_smsAppSetting.fillFieldMap()

	return _smsAppSetting
}

type smsAppSetting struct {
	smsAppSettingDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	CatID     field.Int    // 产品分类
	Page      field.Int8   // 页面
	Type      field.Int8   // 类型
	Data      field.String // 数据
	Sort      field.Int    // 排序
	CreateBy  field.Int    // 创建者
	UpdateBy  field.Int    // 更新者
	CreatedAt field.Int    // 创建时间
	UpdatedAt field.Int    // 更新时间

	fieldMap map[string]field.Expr
}

func (s smsAppSetting) Table(newTableName string) *smsAppSetting {
	s.smsAppSettingDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsAppSetting) As(alias string) *smsAppSetting {
	s.smsAppSettingDo.DO = *(s.smsAppSettingDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsAppSetting) updateTableName(table string) *smsAppSetting {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.CatID = field.NewInt(table, "cat_id")
	s.Page = field.NewInt8(table, "page")
	s.Type = field.NewInt8(table, "type")
	s.Data = field.NewString(table, "data")
	s.Sort = field.NewInt(table, "sort")
	s.CreateBy = field.NewInt(table, "create_by")
	s.UpdateBy = field.NewInt(table, "update_by")
	s.CreatedAt = field.NewInt(table, "created_at")
	s.UpdatedAt = field.NewInt(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *smsAppSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsAppSetting) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["cat_id"] = s.CatID
	s.fieldMap["page"] = s.Page
	s.fieldMap["type"] = s.Type
	s.fieldMap["data"] = s.Data
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s smsAppSetting) clone(db *gorm.DB) smsAppSetting {
	s.smsAppSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsAppSetting) replaceDB(db *gorm.DB) smsAppSetting {
	s.smsAppSettingDo.ReplaceDB(db)
	return s
}

type smsAppSettingDo struct{ gen.DO }

type ISmsAppSettingDo interface {
	gen.SubQuery
	Debug() ISmsAppSettingDo
	WithContext(ctx context.Context) ISmsAppSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsAppSettingDo
	WriteDB() ISmsAppSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsAppSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsAppSettingDo
	Not(conds ...gen.Condition) ISmsAppSettingDo
	Or(conds ...gen.Condition) ISmsAppSettingDo
	Select(conds ...field.Expr) ISmsAppSettingDo
	Where(conds ...gen.Condition) ISmsAppSettingDo
	Order(conds ...field.Expr) ISmsAppSettingDo
	Distinct(cols ...field.Expr) ISmsAppSettingDo
	Omit(cols ...field.Expr) ISmsAppSettingDo
	Join(table schema.Tabler, on ...field.Expr) ISmsAppSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsAppSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsAppSettingDo
	Group(cols ...field.Expr) ISmsAppSettingDo
	Having(conds ...gen.Condition) ISmsAppSettingDo
	Limit(limit int) ISmsAppSettingDo
	Offset(offset int) ISmsAppSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsAppSettingDo
	Unscoped() ISmsAppSettingDo
	Create(values ...*model.SmsAppSetting) error
	CreateInBatches(values []*model.SmsAppSetting, batchSize int) error
	Save(values ...*model.SmsAppSetting) error
	First() (*model.SmsAppSetting, error)
	Take() (*model.SmsAppSetting, error)
	Last() (*model.SmsAppSetting, error)
	Find() ([]*model.SmsAppSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsAppSetting, err error)
	FindInBatches(result *[]*model.SmsAppSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsAppSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsAppSettingDo
	Assign(attrs ...field.AssignExpr) ISmsAppSettingDo
	Joins(fields ...field.RelationField) ISmsAppSettingDo
	Preload(fields ...field.RelationField) ISmsAppSettingDo
	FirstOrInit() (*model.SmsAppSetting, error)
	FirstOrCreate() (*model.SmsAppSetting, error)
	FindByPage(offset int, limit int) (result []*model.SmsAppSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsAppSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsAppSettingDo) Debug() ISmsAppSettingDo {
	return s.withDO(s.DO.Debug())
}

func (s smsAppSettingDo) WithContext(ctx context.Context) ISmsAppSettingDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsAppSettingDo) ReadDB() ISmsAppSettingDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsAppSettingDo) WriteDB() ISmsAppSettingDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsAppSettingDo) Session(config *gorm.Session) ISmsAppSettingDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsAppSettingDo) Clauses(conds ...clause.Expression) ISmsAppSettingDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsAppSettingDo) Returning(value interface{}, columns ...string) ISmsAppSettingDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsAppSettingDo) Not(conds ...gen.Condition) ISmsAppSettingDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsAppSettingDo) Or(conds ...gen.Condition) ISmsAppSettingDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsAppSettingDo) Select(conds ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsAppSettingDo) Where(conds ...gen.Condition) ISmsAppSettingDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsAppSettingDo) Order(conds ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsAppSettingDo) Distinct(cols ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsAppSettingDo) Omit(cols ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsAppSettingDo) Join(table schema.Tabler, on ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsAppSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsAppSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsAppSettingDo) Group(cols ...field.Expr) ISmsAppSettingDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsAppSettingDo) Having(conds ...gen.Condition) ISmsAppSettingDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsAppSettingDo) Limit(limit int) ISmsAppSettingDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsAppSettingDo) Offset(offset int) ISmsAppSettingDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsAppSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsAppSettingDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsAppSettingDo) Unscoped() ISmsAppSettingDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsAppSettingDo) Create(values ...*model.SmsAppSetting) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsAppSettingDo) CreateInBatches(values []*model.SmsAppSetting, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsAppSettingDo) Save(values ...*model.SmsAppSetting) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsAppSettingDo) First() (*model.SmsAppSetting, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppSetting), nil
	}
}

func (s smsAppSettingDo) Take() (*model.SmsAppSetting, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppSetting), nil
	}
}

func (s smsAppSettingDo) Last() (*model.SmsAppSetting, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppSetting), nil
	}
}

func (s smsAppSettingDo) Find() ([]*model.SmsAppSetting, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsAppSetting), err
}

func (s smsAppSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsAppSetting, err error) {
	buf := make([]*model.SmsAppSetting, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsAppSettingDo) FindInBatches(result *[]*model.SmsAppSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsAppSettingDo) Attrs(attrs ...field.AssignExpr) ISmsAppSettingDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsAppSettingDo) Assign(attrs ...field.AssignExpr) ISmsAppSettingDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsAppSettingDo) Joins(fields ...field.RelationField) ISmsAppSettingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsAppSettingDo) Preload(fields ...field.RelationField) ISmsAppSettingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsAppSettingDo) FirstOrInit() (*model.SmsAppSetting, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppSetting), nil
	}
}

func (s smsAppSettingDo) FirstOrCreate() (*model.SmsAppSetting, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppSetting), nil
	}
}

func (s smsAppSettingDo) FindByPage(offset int, limit int) (result []*model.SmsAppSetting, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsAppSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsAppSettingDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsAppSettingDo) Delete(models ...*model.SmsAppSetting) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsAppSettingDo) withDO(do gen.Dao) *smsAppSettingDo {
	s.DO = *do.(*gen.DO)
	return s
}
