// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminRoleUser(db *gorm.DB, opts ...gen.DOOption) adminRoleUser {
	_adminRoleUser := adminRoleUser{}

	_adminRoleUser.adminRoleUserDo.UseDB(db, opts...)
	_adminRoleUser.adminRoleUserDo.UseModel(&model.AdminRoleUser{})

	tableName := _adminRoleUser.adminRoleUserDo.TableName()
	_adminRoleUser.ALL = field.NewAsterisk(tableName)
	_adminRoleUser.RoleID = field.NewInt64(tableName, "role_id")
	_adminRoleUser.UserID = field.NewInt64(tableName, "user_id")
	_adminRoleUser.CreatedAt = field.NewTime(tableName, "created_at")
	_adminRoleUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminRoleUser.fillFieldMap()

	return _adminRoleUser
}

type adminRoleUser struct {
	adminRoleUserDo

	ALL       field.Asterisk
	RoleID    field.Int64
	UserID    field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminRoleUser) Table(newTableName string) *adminRoleUser {
	a.adminRoleUserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminRoleUser) As(alias string) *adminRoleUser {
	a.adminRoleUserDo.DO = *(a.adminRoleUserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminRoleUser) updateTableName(table string) *adminRoleUser {
	a.ALL = field.NewAsterisk(table)
	a.RoleID = field.NewInt64(table, "role_id")
	a.UserID = field.NewInt64(table, "user_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminRoleUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminRoleUser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["role_id"] = a.RoleID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminRoleUser) clone(db *gorm.DB) adminRoleUser {
	a.adminRoleUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminRoleUser) replaceDB(db *gorm.DB) adminRoleUser {
	a.adminRoleUserDo.ReplaceDB(db)
	return a
}

type adminRoleUserDo struct{ gen.DO }

type IAdminRoleUserDo interface {
	gen.SubQuery
	Debug() IAdminRoleUserDo
	WithContext(ctx context.Context) IAdminRoleUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminRoleUserDo
	WriteDB() IAdminRoleUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminRoleUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminRoleUserDo
	Not(conds ...gen.Condition) IAdminRoleUserDo
	Or(conds ...gen.Condition) IAdminRoleUserDo
	Select(conds ...field.Expr) IAdminRoleUserDo
	Where(conds ...gen.Condition) IAdminRoleUserDo
	Order(conds ...field.Expr) IAdminRoleUserDo
	Distinct(cols ...field.Expr) IAdminRoleUserDo
	Omit(cols ...field.Expr) IAdminRoleUserDo
	Join(table schema.Tabler, on ...field.Expr) IAdminRoleUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminRoleUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminRoleUserDo
	Group(cols ...field.Expr) IAdminRoleUserDo
	Having(conds ...gen.Condition) IAdminRoleUserDo
	Limit(limit int) IAdminRoleUserDo
	Offset(offset int) IAdminRoleUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminRoleUserDo
	Unscoped() IAdminRoleUserDo
	Create(values ...*model.AdminRoleUser) error
	CreateInBatches(values []*model.AdminRoleUser, batchSize int) error
	Save(values ...*model.AdminRoleUser) error
	First() (*model.AdminRoleUser, error)
	Take() (*model.AdminRoleUser, error)
	Last() (*model.AdminRoleUser, error)
	Find() ([]*model.AdminRoleUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminRoleUser, err error)
	FindInBatches(result *[]*model.AdminRoleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminRoleUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminRoleUserDo
	Assign(attrs ...field.AssignExpr) IAdminRoleUserDo
	Joins(fields ...field.RelationField) IAdminRoleUserDo
	Preload(fields ...field.RelationField) IAdminRoleUserDo
	FirstOrInit() (*model.AdminRoleUser, error)
	FirstOrCreate() (*model.AdminRoleUser, error)
	FindByPage(offset int, limit int) (result []*model.AdminRoleUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminRoleUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminRoleUserDo) Debug() IAdminRoleUserDo {
	return a.withDO(a.DO.Debug())
}

func (a adminRoleUserDo) WithContext(ctx context.Context) IAdminRoleUserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminRoleUserDo) ReadDB() IAdminRoleUserDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminRoleUserDo) WriteDB() IAdminRoleUserDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminRoleUserDo) Session(config *gorm.Session) IAdminRoleUserDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminRoleUserDo) Clauses(conds ...clause.Expression) IAdminRoleUserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminRoleUserDo) Returning(value interface{}, columns ...string) IAdminRoleUserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminRoleUserDo) Not(conds ...gen.Condition) IAdminRoleUserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminRoleUserDo) Or(conds ...gen.Condition) IAdminRoleUserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminRoleUserDo) Select(conds ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminRoleUserDo) Where(conds ...gen.Condition) IAdminRoleUserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminRoleUserDo) Order(conds ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminRoleUserDo) Distinct(cols ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminRoleUserDo) Omit(cols ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminRoleUserDo) Join(table schema.Tabler, on ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminRoleUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminRoleUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminRoleUserDo) Group(cols ...field.Expr) IAdminRoleUserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminRoleUserDo) Having(conds ...gen.Condition) IAdminRoleUserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminRoleUserDo) Limit(limit int) IAdminRoleUserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminRoleUserDo) Offset(offset int) IAdminRoleUserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminRoleUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminRoleUserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminRoleUserDo) Unscoped() IAdminRoleUserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminRoleUserDo) Create(values ...*model.AdminRoleUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminRoleUserDo) CreateInBatches(values []*model.AdminRoleUser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminRoleUserDo) Save(values ...*model.AdminRoleUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminRoleUserDo) First() (*model.AdminRoleUser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleUser), nil
	}
}

func (a adminRoleUserDo) Take() (*model.AdminRoleUser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleUser), nil
	}
}

func (a adminRoleUserDo) Last() (*model.AdminRoleUser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleUser), nil
	}
}

func (a adminRoleUserDo) Find() ([]*model.AdminRoleUser, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminRoleUser), err
}

func (a adminRoleUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminRoleUser, err error) {
	buf := make([]*model.AdminRoleUser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminRoleUserDo) FindInBatches(result *[]*model.AdminRoleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminRoleUserDo) Attrs(attrs ...field.AssignExpr) IAdminRoleUserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminRoleUserDo) Assign(attrs ...field.AssignExpr) IAdminRoleUserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminRoleUserDo) Joins(fields ...field.RelationField) IAdminRoleUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminRoleUserDo) Preload(fields ...field.RelationField) IAdminRoleUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminRoleUserDo) FirstOrInit() (*model.AdminRoleUser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleUser), nil
	}
}

func (a adminRoleUserDo) FirstOrCreate() (*model.AdminRoleUser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleUser), nil
	}
}

func (a adminRoleUserDo) FindByPage(offset int, limit int) (result []*model.AdminRoleUser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminRoleUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminRoleUserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminRoleUserDo) Delete(models ...*model.AdminRoleUser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminRoleUserDo) withDO(do gen.Dao) *adminRoleUserDo {
	a.DO = *do.(*gen.DO)
	return a
}
