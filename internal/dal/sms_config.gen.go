// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsConfig(db *gorm.DB, opts ...gen.DOOption) smsConfig {
	_smsConfig := smsConfig{}

	_smsConfig.smsConfigDo.UseDB(db, opts...)
	_smsConfig.smsConfigDo.UseModel(&model.SmsConfig{})

	tableName := _smsConfig.smsConfigDo.TableName()
	_smsConfig.ALL = field.NewAsterisk(tableName)
	_smsConfig.ID = field.NewInt(tableName, "id")
	_smsConfig.Name = field.NewString(tableName, "name")
	_smsConfig.Value = field.NewString(tableName, "value")
	_smsConfig.Desc = field.NewString(tableName, "desc")
	_smsConfig.CreateBy = field.NewInt(tableName, "create_by")
	_smsConfig.UpdateBy = field.NewInt(tableName, "update_by")
	_smsConfig.CreatedAt = field.NewInt(tableName, "created_at")
	_smsConfig.UpdatedAt = field.NewInt(tableName, "updated_at")

	_smsConfig.fillFieldMap()

	return _smsConfig
}

type smsConfig struct {
	smsConfigDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	Name      field.String // 配置键
	Value     field.String // 配置值
	Desc      field.String // 描述
	CreateBy  field.Int    // 创建者
	UpdateBy  field.Int    // 更新者
	CreatedAt field.Int    // 创建时间
	UpdatedAt field.Int    // 更新时间

	fieldMap map[string]field.Expr
}

func (s smsConfig) Table(newTableName string) *smsConfig {
	s.smsConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsConfig) As(alias string) *smsConfig {
	s.smsConfigDo.DO = *(s.smsConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsConfig) updateTableName(table string) *smsConfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Name = field.NewString(table, "name")
	s.Value = field.NewString(table, "value")
	s.Desc = field.NewString(table, "desc")
	s.CreateBy = field.NewInt(table, "create_by")
	s.UpdateBy = field.NewInt(table, "update_by")
	s.CreatedAt = field.NewInt(table, "created_at")
	s.UpdatedAt = field.NewInt(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *smsConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["value"] = s.Value
	s.fieldMap["desc"] = s.Desc
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s smsConfig) clone(db *gorm.DB) smsConfig {
	s.smsConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsConfig) replaceDB(db *gorm.DB) smsConfig {
	s.smsConfigDo.ReplaceDB(db)
	return s
}

type smsConfigDo struct{ gen.DO }

type ISmsConfigDo interface {
	gen.SubQuery
	Debug() ISmsConfigDo
	WithContext(ctx context.Context) ISmsConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsConfigDo
	WriteDB() ISmsConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsConfigDo
	Not(conds ...gen.Condition) ISmsConfigDo
	Or(conds ...gen.Condition) ISmsConfigDo
	Select(conds ...field.Expr) ISmsConfigDo
	Where(conds ...gen.Condition) ISmsConfigDo
	Order(conds ...field.Expr) ISmsConfigDo
	Distinct(cols ...field.Expr) ISmsConfigDo
	Omit(cols ...field.Expr) ISmsConfigDo
	Join(table schema.Tabler, on ...field.Expr) ISmsConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsConfigDo
	Group(cols ...field.Expr) ISmsConfigDo
	Having(conds ...gen.Condition) ISmsConfigDo
	Limit(limit int) ISmsConfigDo
	Offset(offset int) ISmsConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsConfigDo
	Unscoped() ISmsConfigDo
	Create(values ...*model.SmsConfig) error
	CreateInBatches(values []*model.SmsConfig, batchSize int) error
	Save(values ...*model.SmsConfig) error
	First() (*model.SmsConfig, error)
	Take() (*model.SmsConfig, error)
	Last() (*model.SmsConfig, error)
	Find() ([]*model.SmsConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsConfig, err error)
	FindInBatches(result *[]*model.SmsConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsConfigDo
	Assign(attrs ...field.AssignExpr) ISmsConfigDo
	Joins(fields ...field.RelationField) ISmsConfigDo
	Preload(fields ...field.RelationField) ISmsConfigDo
	FirstOrInit() (*model.SmsConfig, error)
	FirstOrCreate() (*model.SmsConfig, error)
	FindByPage(offset int, limit int) (result []*model.SmsConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsConfigDo) Debug() ISmsConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s smsConfigDo) WithContext(ctx context.Context) ISmsConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsConfigDo) ReadDB() ISmsConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsConfigDo) WriteDB() ISmsConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsConfigDo) Session(config *gorm.Session) ISmsConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsConfigDo) Clauses(conds ...clause.Expression) ISmsConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsConfigDo) Returning(value interface{}, columns ...string) ISmsConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsConfigDo) Not(conds ...gen.Condition) ISmsConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsConfigDo) Or(conds ...gen.Condition) ISmsConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsConfigDo) Select(conds ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsConfigDo) Where(conds ...gen.Condition) ISmsConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsConfigDo) Order(conds ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsConfigDo) Distinct(cols ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsConfigDo) Omit(cols ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsConfigDo) Join(table schema.Tabler, on ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsConfigDo) Group(cols ...field.Expr) ISmsConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsConfigDo) Having(conds ...gen.Condition) ISmsConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsConfigDo) Limit(limit int) ISmsConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsConfigDo) Offset(offset int) ISmsConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsConfigDo) Unscoped() ISmsConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsConfigDo) Create(values ...*model.SmsConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsConfigDo) CreateInBatches(values []*model.SmsConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsConfigDo) Save(values ...*model.SmsConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsConfigDo) First() (*model.SmsConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsConfig), nil
	}
}

func (s smsConfigDo) Take() (*model.SmsConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsConfig), nil
	}
}

func (s smsConfigDo) Last() (*model.SmsConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsConfig), nil
	}
}

func (s smsConfigDo) Find() ([]*model.SmsConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsConfig), err
}

func (s smsConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsConfig, err error) {
	buf := make([]*model.SmsConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsConfigDo) FindInBatches(result *[]*model.SmsConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsConfigDo) Attrs(attrs ...field.AssignExpr) ISmsConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsConfigDo) Assign(attrs ...field.AssignExpr) ISmsConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsConfigDo) Joins(fields ...field.RelationField) ISmsConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsConfigDo) Preload(fields ...field.RelationField) ISmsConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsConfigDo) FirstOrInit() (*model.SmsConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsConfig), nil
	}
}

func (s smsConfigDo) FirstOrCreate() (*model.SmsConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsConfig), nil
	}
}

func (s smsConfigDo) FindByPage(offset int, limit int) (result []*model.SmsConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsConfigDo) Delete(models ...*model.SmsConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsConfigDo) withDO(do gen.Dao) *smsConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
