// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newUmsGrowthLog(db *gorm.DB, opts ...gen.DOOption) umsGrowthLog {
	_umsGrowthLog := umsGrowthLog{}

	_umsGrowthLog.umsGrowthLogDo.UseDB(db, opts...)
	_umsGrowthLog.umsGrowthLogDo.UseModel(&model.UmsGrowthLog{})

	tableName := _umsGrowthLog.umsGrowthLogDo.TableName()
	_umsGrowthLog.ALL = field.NewAsterisk(tableName)
	_umsGrowthLog.ID = field.NewInt(tableName, "id")
	_umsGrowthLog.MemberID = field.NewInt(tableName, "member_id")
	_umsGrowthLog.ChangeCount = field.NewInt64(tableName, "change_count")
	_umsGrowthLog.Note = field.NewString(tableName, "note")
	_umsGrowthLog.SourceType = field.NewInt8(tableName, "source_type")
	_umsGrowthLog.CreatedAt = field.NewInt(tableName, "created_at")

	_umsGrowthLog.fillFieldMap()

	return _umsGrowthLog
}

type umsGrowthLog struct {
	umsGrowthLogDo

	ALL         field.Asterisk
	ID          field.Int    // ID
	MemberID    field.Int    // 用户id
	ChangeCount field.Int64  // 改变的值（正负计数）
	Note        field.String // 备注
	SourceType  field.Int8   // 积分来源[0-购物，1-管理员修改]
	CreatedAt   field.Int    // 创建时间

	fieldMap map[string]field.Expr
}

func (u umsGrowthLog) Table(newTableName string) *umsGrowthLog {
	u.umsGrowthLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsGrowthLog) As(alias string) *umsGrowthLog {
	u.umsGrowthLogDo.DO = *(u.umsGrowthLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsGrowthLog) updateTableName(table string) *umsGrowthLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.MemberID = field.NewInt(table, "member_id")
	u.ChangeCount = field.NewInt64(table, "change_count")
	u.Note = field.NewString(table, "note")
	u.SourceType = field.NewInt8(table, "source_type")
	u.CreatedAt = field.NewInt(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *umsGrowthLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsGrowthLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["change_count"] = u.ChangeCount
	u.fieldMap["note"] = u.Note
	u.fieldMap["source_type"] = u.SourceType
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u umsGrowthLog) clone(db *gorm.DB) umsGrowthLog {
	u.umsGrowthLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsGrowthLog) replaceDB(db *gorm.DB) umsGrowthLog {
	u.umsGrowthLogDo.ReplaceDB(db)
	return u
}

type umsGrowthLogDo struct{ gen.DO }

type IUmsGrowthLogDo interface {
	gen.SubQuery
	Debug() IUmsGrowthLogDo
	WithContext(ctx context.Context) IUmsGrowthLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsGrowthLogDo
	WriteDB() IUmsGrowthLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsGrowthLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsGrowthLogDo
	Not(conds ...gen.Condition) IUmsGrowthLogDo
	Or(conds ...gen.Condition) IUmsGrowthLogDo
	Select(conds ...field.Expr) IUmsGrowthLogDo
	Where(conds ...gen.Condition) IUmsGrowthLogDo
	Order(conds ...field.Expr) IUmsGrowthLogDo
	Distinct(cols ...field.Expr) IUmsGrowthLogDo
	Omit(cols ...field.Expr) IUmsGrowthLogDo
	Join(table schema.Tabler, on ...field.Expr) IUmsGrowthLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthLogDo
	Group(cols ...field.Expr) IUmsGrowthLogDo
	Having(conds ...gen.Condition) IUmsGrowthLogDo
	Limit(limit int) IUmsGrowthLogDo
	Offset(offset int) IUmsGrowthLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsGrowthLogDo
	Unscoped() IUmsGrowthLogDo
	Create(values ...*model.UmsGrowthLog) error
	CreateInBatches(values []*model.UmsGrowthLog, batchSize int) error
	Save(values ...*model.UmsGrowthLog) error
	First() (*model.UmsGrowthLog, error)
	Take() (*model.UmsGrowthLog, error)
	Last() (*model.UmsGrowthLog, error)
	Find() ([]*model.UmsGrowthLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsGrowthLog, err error)
	FindInBatches(result *[]*model.UmsGrowthLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsGrowthLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsGrowthLogDo
	Assign(attrs ...field.AssignExpr) IUmsGrowthLogDo
	Joins(fields ...field.RelationField) IUmsGrowthLogDo
	Preload(fields ...field.RelationField) IUmsGrowthLogDo
	FirstOrInit() (*model.UmsGrowthLog, error)
	FirstOrCreate() (*model.UmsGrowthLog, error)
	FindByPage(offset int, limit int) (result []*model.UmsGrowthLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsGrowthLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsGrowthLogDo) Debug() IUmsGrowthLogDo {
	return u.withDO(u.DO.Debug())
}

func (u umsGrowthLogDo) WithContext(ctx context.Context) IUmsGrowthLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsGrowthLogDo) ReadDB() IUmsGrowthLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsGrowthLogDo) WriteDB() IUmsGrowthLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsGrowthLogDo) Session(config *gorm.Session) IUmsGrowthLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsGrowthLogDo) Clauses(conds ...clause.Expression) IUmsGrowthLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsGrowthLogDo) Returning(value interface{}, columns ...string) IUmsGrowthLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsGrowthLogDo) Not(conds ...gen.Condition) IUmsGrowthLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsGrowthLogDo) Or(conds ...gen.Condition) IUmsGrowthLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsGrowthLogDo) Select(conds ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsGrowthLogDo) Where(conds ...gen.Condition) IUmsGrowthLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsGrowthLogDo) Order(conds ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsGrowthLogDo) Distinct(cols ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsGrowthLogDo) Omit(cols ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsGrowthLogDo) Join(table schema.Tabler, on ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsGrowthLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsGrowthLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsGrowthLogDo) Group(cols ...field.Expr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsGrowthLogDo) Having(conds ...gen.Condition) IUmsGrowthLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsGrowthLogDo) Limit(limit int) IUmsGrowthLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsGrowthLogDo) Offset(offset int) IUmsGrowthLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsGrowthLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsGrowthLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsGrowthLogDo) Unscoped() IUmsGrowthLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsGrowthLogDo) Create(values ...*model.UmsGrowthLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsGrowthLogDo) CreateInBatches(values []*model.UmsGrowthLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsGrowthLogDo) Save(values ...*model.UmsGrowthLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsGrowthLogDo) First() (*model.UmsGrowthLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthLog), nil
	}
}

func (u umsGrowthLogDo) Take() (*model.UmsGrowthLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthLog), nil
	}
}

func (u umsGrowthLogDo) Last() (*model.UmsGrowthLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthLog), nil
	}
}

func (u umsGrowthLogDo) Find() ([]*model.UmsGrowthLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsGrowthLog), err
}

func (u umsGrowthLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsGrowthLog, err error) {
	buf := make([]*model.UmsGrowthLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsGrowthLogDo) FindInBatches(result *[]*model.UmsGrowthLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsGrowthLogDo) Attrs(attrs ...field.AssignExpr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsGrowthLogDo) Assign(attrs ...field.AssignExpr) IUmsGrowthLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsGrowthLogDo) Joins(fields ...field.RelationField) IUmsGrowthLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsGrowthLogDo) Preload(fields ...field.RelationField) IUmsGrowthLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsGrowthLogDo) FirstOrInit() (*model.UmsGrowthLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthLog), nil
	}
}

func (u umsGrowthLogDo) FirstOrCreate() (*model.UmsGrowthLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthLog), nil
	}
}

func (u umsGrowthLogDo) FindByPage(offset int, limit int) (result []*model.UmsGrowthLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsGrowthLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsGrowthLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsGrowthLogDo) Delete(models ...*model.UmsGrowthLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsGrowthLogDo) withDO(do gen.Dao) *umsGrowthLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
