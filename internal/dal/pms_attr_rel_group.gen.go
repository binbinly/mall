// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsAttrRelGroup(db *gorm.DB, opts ...gen.DOOption) pmsAttrRelGroup {
	_pmsAttrRelGroup := pmsAttrRelGroup{}

	_pmsAttrRelGroup.pmsAttrRelGroupDo.UseDB(db, opts...)
	_pmsAttrRelGroup.pmsAttrRelGroupDo.UseModel(&model.PmsAttrRelGroup{})

	tableName := _pmsAttrRelGroup.pmsAttrRelGroupDo.TableName()
	_pmsAttrRelGroup.ALL = field.NewAsterisk(tableName)
	_pmsAttrRelGroup.ID = field.NewInt(tableName, "id")
	_pmsAttrRelGroup.AttrID = field.NewInt(tableName, "attr_id")
	_pmsAttrRelGroup.GroupID = field.NewInt(tableName, "group_id")

	_pmsAttrRelGroup.fillFieldMap()

	return _pmsAttrRelGroup
}

type pmsAttrRelGroup struct {
	pmsAttrRelGroupDo

	ALL     field.Asterisk
	ID      field.Int // ID
	AttrID  field.Int // 属性id
	GroupID field.Int // 属性分组id

	fieldMap map[string]field.Expr
}

func (p pmsAttrRelGroup) Table(newTableName string) *pmsAttrRelGroup {
	p.pmsAttrRelGroupDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsAttrRelGroup) As(alias string) *pmsAttrRelGroup {
	p.pmsAttrRelGroupDo.DO = *(p.pmsAttrRelGroupDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsAttrRelGroup) updateTableName(table string) *pmsAttrRelGroup {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.AttrID = field.NewInt(table, "attr_id")
	p.GroupID = field.NewInt(table, "group_id")

	p.fillFieldMap()

	return p
}

func (p *pmsAttrRelGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsAttrRelGroup) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["attr_id"] = p.AttrID
	p.fieldMap["group_id"] = p.GroupID
}

func (p pmsAttrRelGroup) clone(db *gorm.DB) pmsAttrRelGroup {
	p.pmsAttrRelGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsAttrRelGroup) replaceDB(db *gorm.DB) pmsAttrRelGroup {
	p.pmsAttrRelGroupDo.ReplaceDB(db)
	return p
}

type pmsAttrRelGroupDo struct{ gen.DO }

type IPmsAttrRelGroupDo interface {
	gen.SubQuery
	Debug() IPmsAttrRelGroupDo
	WithContext(ctx context.Context) IPmsAttrRelGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsAttrRelGroupDo
	WriteDB() IPmsAttrRelGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsAttrRelGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsAttrRelGroupDo
	Not(conds ...gen.Condition) IPmsAttrRelGroupDo
	Or(conds ...gen.Condition) IPmsAttrRelGroupDo
	Select(conds ...field.Expr) IPmsAttrRelGroupDo
	Where(conds ...gen.Condition) IPmsAttrRelGroupDo
	Order(conds ...field.Expr) IPmsAttrRelGroupDo
	Distinct(cols ...field.Expr) IPmsAttrRelGroupDo
	Omit(cols ...field.Expr) IPmsAttrRelGroupDo
	Join(table schema.Tabler, on ...field.Expr) IPmsAttrRelGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsAttrRelGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsAttrRelGroupDo
	Group(cols ...field.Expr) IPmsAttrRelGroupDo
	Having(conds ...gen.Condition) IPmsAttrRelGroupDo
	Limit(limit int) IPmsAttrRelGroupDo
	Offset(offset int) IPmsAttrRelGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsAttrRelGroupDo
	Unscoped() IPmsAttrRelGroupDo
	Create(values ...*model.PmsAttrRelGroup) error
	CreateInBatches(values []*model.PmsAttrRelGroup, batchSize int) error
	Save(values ...*model.PmsAttrRelGroup) error
	First() (*model.PmsAttrRelGroup, error)
	Take() (*model.PmsAttrRelGroup, error)
	Last() (*model.PmsAttrRelGroup, error)
	Find() ([]*model.PmsAttrRelGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttrRelGroup, err error)
	FindInBatches(result *[]*model.PmsAttrRelGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsAttrRelGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsAttrRelGroupDo
	Assign(attrs ...field.AssignExpr) IPmsAttrRelGroupDo
	Joins(fields ...field.RelationField) IPmsAttrRelGroupDo
	Preload(fields ...field.RelationField) IPmsAttrRelGroupDo
	FirstOrInit() (*model.PmsAttrRelGroup, error)
	FirstOrCreate() (*model.PmsAttrRelGroup, error)
	FindByPage(offset int, limit int) (result []*model.PmsAttrRelGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsAttrRelGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsAttrRelGroupDo) Debug() IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsAttrRelGroupDo) WithContext(ctx context.Context) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsAttrRelGroupDo) ReadDB() IPmsAttrRelGroupDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsAttrRelGroupDo) WriteDB() IPmsAttrRelGroupDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsAttrRelGroupDo) Session(config *gorm.Session) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsAttrRelGroupDo) Clauses(conds ...clause.Expression) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsAttrRelGroupDo) Returning(value interface{}, columns ...string) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsAttrRelGroupDo) Not(conds ...gen.Condition) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsAttrRelGroupDo) Or(conds ...gen.Condition) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsAttrRelGroupDo) Select(conds ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsAttrRelGroupDo) Where(conds ...gen.Condition) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsAttrRelGroupDo) Order(conds ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsAttrRelGroupDo) Distinct(cols ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsAttrRelGroupDo) Omit(cols ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsAttrRelGroupDo) Join(table schema.Tabler, on ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsAttrRelGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsAttrRelGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsAttrRelGroupDo) Group(cols ...field.Expr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsAttrRelGroupDo) Having(conds ...gen.Condition) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsAttrRelGroupDo) Limit(limit int) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsAttrRelGroupDo) Offset(offset int) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsAttrRelGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsAttrRelGroupDo) Unscoped() IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsAttrRelGroupDo) Create(values ...*model.PmsAttrRelGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsAttrRelGroupDo) CreateInBatches(values []*model.PmsAttrRelGroup, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsAttrRelGroupDo) Save(values ...*model.PmsAttrRelGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsAttrRelGroupDo) First() (*model.PmsAttrRelGroup, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrRelGroup), nil
	}
}

func (p pmsAttrRelGroupDo) Take() (*model.PmsAttrRelGroup, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrRelGroup), nil
	}
}

func (p pmsAttrRelGroupDo) Last() (*model.PmsAttrRelGroup, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrRelGroup), nil
	}
}

func (p pmsAttrRelGroupDo) Find() ([]*model.PmsAttrRelGroup, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsAttrRelGroup), err
}

func (p pmsAttrRelGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttrRelGroup, err error) {
	buf := make([]*model.PmsAttrRelGroup, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsAttrRelGroupDo) FindInBatches(result *[]*model.PmsAttrRelGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsAttrRelGroupDo) Attrs(attrs ...field.AssignExpr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsAttrRelGroupDo) Assign(attrs ...field.AssignExpr) IPmsAttrRelGroupDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsAttrRelGroupDo) Joins(fields ...field.RelationField) IPmsAttrRelGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsAttrRelGroupDo) Preload(fields ...field.RelationField) IPmsAttrRelGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsAttrRelGroupDo) FirstOrInit() (*model.PmsAttrRelGroup, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrRelGroup), nil
	}
}

func (p pmsAttrRelGroupDo) FirstOrCreate() (*model.PmsAttrRelGroup, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrRelGroup), nil
	}
}

func (p pmsAttrRelGroupDo) FindByPage(offset int, limit int) (result []*model.PmsAttrRelGroup, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsAttrRelGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsAttrRelGroupDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsAttrRelGroupDo) Delete(models ...*model.PmsAttrRelGroup) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsAttrRelGroupDo) withDO(do gen.Dao) *pmsAttrRelGroupDo {
	p.DO = *do.(*gen.DO)
	return p
}
