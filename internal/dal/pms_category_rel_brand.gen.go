// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsCategoryRelBrand(db *gorm.DB, opts ...gen.DOOption) pmsCategoryRelBrand {
	_pmsCategoryRelBrand := pmsCategoryRelBrand{}

	_pmsCategoryRelBrand.pmsCategoryRelBrandDo.UseDB(db, opts...)
	_pmsCategoryRelBrand.pmsCategoryRelBrandDo.UseModel(&model.PmsCategoryRelBrand{})

	tableName := _pmsCategoryRelBrand.pmsCategoryRelBrandDo.TableName()
	_pmsCategoryRelBrand.ALL = field.NewAsterisk(tableName)
	_pmsCategoryRelBrand.ID = field.NewInt(tableName, "id")
	_pmsCategoryRelBrand.CatID = field.NewInt(tableName, "cat_id")
	_pmsCategoryRelBrand.BrandID = field.NewInt(tableName, "brand_id")

	_pmsCategoryRelBrand.fillFieldMap()

	return _pmsCategoryRelBrand
}

type pmsCategoryRelBrand struct {
	pmsCategoryRelBrandDo

	ALL     field.Asterisk
	ID      field.Int // ID
	CatID   field.Int // 产品分类
	BrandID field.Int // 品牌id

	fieldMap map[string]field.Expr
}

func (p pmsCategoryRelBrand) Table(newTableName string) *pmsCategoryRelBrand {
	p.pmsCategoryRelBrandDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsCategoryRelBrand) As(alias string) *pmsCategoryRelBrand {
	p.pmsCategoryRelBrandDo.DO = *(p.pmsCategoryRelBrandDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsCategoryRelBrand) updateTableName(table string) *pmsCategoryRelBrand {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.CatID = field.NewInt(table, "cat_id")
	p.BrandID = field.NewInt(table, "brand_id")

	p.fillFieldMap()

	return p
}

func (p *pmsCategoryRelBrand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsCategoryRelBrand) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["cat_id"] = p.CatID
	p.fieldMap["brand_id"] = p.BrandID
}

func (p pmsCategoryRelBrand) clone(db *gorm.DB) pmsCategoryRelBrand {
	p.pmsCategoryRelBrandDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsCategoryRelBrand) replaceDB(db *gorm.DB) pmsCategoryRelBrand {
	p.pmsCategoryRelBrandDo.ReplaceDB(db)
	return p
}

type pmsCategoryRelBrandDo struct{ gen.DO }

type IPmsCategoryRelBrandDo interface {
	gen.SubQuery
	Debug() IPmsCategoryRelBrandDo
	WithContext(ctx context.Context) IPmsCategoryRelBrandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsCategoryRelBrandDo
	WriteDB() IPmsCategoryRelBrandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsCategoryRelBrandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsCategoryRelBrandDo
	Not(conds ...gen.Condition) IPmsCategoryRelBrandDo
	Or(conds ...gen.Condition) IPmsCategoryRelBrandDo
	Select(conds ...field.Expr) IPmsCategoryRelBrandDo
	Where(conds ...gen.Condition) IPmsCategoryRelBrandDo
	Order(conds ...field.Expr) IPmsCategoryRelBrandDo
	Distinct(cols ...field.Expr) IPmsCategoryRelBrandDo
	Omit(cols ...field.Expr) IPmsCategoryRelBrandDo
	Join(table schema.Tabler, on ...field.Expr) IPmsCategoryRelBrandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryRelBrandDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryRelBrandDo
	Group(cols ...field.Expr) IPmsCategoryRelBrandDo
	Having(conds ...gen.Condition) IPmsCategoryRelBrandDo
	Limit(limit int) IPmsCategoryRelBrandDo
	Offset(offset int) IPmsCategoryRelBrandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCategoryRelBrandDo
	Unscoped() IPmsCategoryRelBrandDo
	Create(values ...*model.PmsCategoryRelBrand) error
	CreateInBatches(values []*model.PmsCategoryRelBrand, batchSize int) error
	Save(values ...*model.PmsCategoryRelBrand) error
	First() (*model.PmsCategoryRelBrand, error)
	Take() (*model.PmsCategoryRelBrand, error)
	Last() (*model.PmsCategoryRelBrand, error)
	Find() ([]*model.PmsCategoryRelBrand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsCategoryRelBrand, err error)
	FindInBatches(result *[]*model.PmsCategoryRelBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsCategoryRelBrand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsCategoryRelBrandDo
	Assign(attrs ...field.AssignExpr) IPmsCategoryRelBrandDo
	Joins(fields ...field.RelationField) IPmsCategoryRelBrandDo
	Preload(fields ...field.RelationField) IPmsCategoryRelBrandDo
	FirstOrInit() (*model.PmsCategoryRelBrand, error)
	FirstOrCreate() (*model.PmsCategoryRelBrand, error)
	FindByPage(offset int, limit int) (result []*model.PmsCategoryRelBrand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsCategoryRelBrandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsCategoryRelBrandDo) Debug() IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsCategoryRelBrandDo) WithContext(ctx context.Context) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsCategoryRelBrandDo) ReadDB() IPmsCategoryRelBrandDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsCategoryRelBrandDo) WriteDB() IPmsCategoryRelBrandDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsCategoryRelBrandDo) Session(config *gorm.Session) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsCategoryRelBrandDo) Clauses(conds ...clause.Expression) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsCategoryRelBrandDo) Returning(value interface{}, columns ...string) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsCategoryRelBrandDo) Not(conds ...gen.Condition) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsCategoryRelBrandDo) Or(conds ...gen.Condition) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsCategoryRelBrandDo) Select(conds ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsCategoryRelBrandDo) Where(conds ...gen.Condition) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsCategoryRelBrandDo) Order(conds ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsCategoryRelBrandDo) Distinct(cols ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsCategoryRelBrandDo) Omit(cols ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsCategoryRelBrandDo) Join(table schema.Tabler, on ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsCategoryRelBrandDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsCategoryRelBrandDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsCategoryRelBrandDo) Group(cols ...field.Expr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsCategoryRelBrandDo) Having(conds ...gen.Condition) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsCategoryRelBrandDo) Limit(limit int) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsCategoryRelBrandDo) Offset(offset int) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsCategoryRelBrandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsCategoryRelBrandDo) Unscoped() IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsCategoryRelBrandDo) Create(values ...*model.PmsCategoryRelBrand) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsCategoryRelBrandDo) CreateInBatches(values []*model.PmsCategoryRelBrand, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsCategoryRelBrandDo) Save(values ...*model.PmsCategoryRelBrand) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsCategoryRelBrandDo) First() (*model.PmsCategoryRelBrand, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryRelBrand), nil
	}
}

func (p pmsCategoryRelBrandDo) Take() (*model.PmsCategoryRelBrand, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryRelBrand), nil
	}
}

func (p pmsCategoryRelBrandDo) Last() (*model.PmsCategoryRelBrand, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryRelBrand), nil
	}
}

func (p pmsCategoryRelBrandDo) Find() ([]*model.PmsCategoryRelBrand, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsCategoryRelBrand), err
}

func (p pmsCategoryRelBrandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsCategoryRelBrand, err error) {
	buf := make([]*model.PmsCategoryRelBrand, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsCategoryRelBrandDo) FindInBatches(result *[]*model.PmsCategoryRelBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsCategoryRelBrandDo) Attrs(attrs ...field.AssignExpr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsCategoryRelBrandDo) Assign(attrs ...field.AssignExpr) IPmsCategoryRelBrandDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsCategoryRelBrandDo) Joins(fields ...field.RelationField) IPmsCategoryRelBrandDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsCategoryRelBrandDo) Preload(fields ...field.RelationField) IPmsCategoryRelBrandDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsCategoryRelBrandDo) FirstOrInit() (*model.PmsCategoryRelBrand, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryRelBrand), nil
	}
}

func (p pmsCategoryRelBrandDo) FirstOrCreate() (*model.PmsCategoryRelBrand, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryRelBrand), nil
	}
}

func (p pmsCategoryRelBrandDo) FindByPage(offset int, limit int) (result []*model.PmsCategoryRelBrand, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsCategoryRelBrandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsCategoryRelBrandDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsCategoryRelBrandDo) Delete(models ...*model.PmsCategoryRelBrand) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsCategoryRelBrandDo) withDO(do gen.Dao) *pmsCategoryRelBrandDo {
	p.DO = *do.(*gen.DO)
	return p
}
