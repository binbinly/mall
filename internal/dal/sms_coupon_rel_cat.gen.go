// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsCouponRelCat(db *gorm.DB, opts ...gen.DOOption) smsCouponRelCat {
	_smsCouponRelCat := smsCouponRelCat{}

	_smsCouponRelCat.smsCouponRelCatDo.UseDB(db, opts...)
	_smsCouponRelCat.smsCouponRelCatDo.UseModel(&model.SmsCouponRelCat{})

	tableName := _smsCouponRelCat.smsCouponRelCatDo.TableName()
	_smsCouponRelCat.ALL = field.NewAsterisk(tableName)
	_smsCouponRelCat.ID = field.NewInt(tableName, "id")
	_smsCouponRelCat.CouponID = field.NewInt(tableName, "coupon_id")
	_smsCouponRelCat.CatID = field.NewInt(tableName, "cat_id")
	_smsCouponRelCat.CatName = field.NewString(tableName, "cat_name")

	_smsCouponRelCat.fillFieldMap()

	return _smsCouponRelCat
}

type smsCouponRelCat struct {
	smsCouponRelCatDo

	ALL      field.Asterisk
	ID       field.Int    // ID
	CouponID field.Int    // 优惠券id
	CatID    field.Int    // 产品分类
	CatName  field.String // 产品分类名

	fieldMap map[string]field.Expr
}

func (s smsCouponRelCat) Table(newTableName string) *smsCouponRelCat {
	s.smsCouponRelCatDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponRelCat) As(alias string) *smsCouponRelCat {
	s.smsCouponRelCatDo.DO = *(s.smsCouponRelCatDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponRelCat) updateTableName(table string) *smsCouponRelCat {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.CouponID = field.NewInt(table, "coupon_id")
	s.CatID = field.NewInt(table, "cat_id")
	s.CatName = field.NewString(table, "cat_name")

	s.fillFieldMap()

	return s
}

func (s *smsCouponRelCat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponRelCat) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["cat_id"] = s.CatID
	s.fieldMap["cat_name"] = s.CatName
}

func (s smsCouponRelCat) clone(db *gorm.DB) smsCouponRelCat {
	s.smsCouponRelCatDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponRelCat) replaceDB(db *gorm.DB) smsCouponRelCat {
	s.smsCouponRelCatDo.ReplaceDB(db)
	return s
}

type smsCouponRelCatDo struct{ gen.DO }

type ISmsCouponRelCatDo interface {
	gen.SubQuery
	Debug() ISmsCouponRelCatDo
	WithContext(ctx context.Context) ISmsCouponRelCatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponRelCatDo
	WriteDB() ISmsCouponRelCatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponRelCatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponRelCatDo
	Not(conds ...gen.Condition) ISmsCouponRelCatDo
	Or(conds ...gen.Condition) ISmsCouponRelCatDo
	Select(conds ...field.Expr) ISmsCouponRelCatDo
	Where(conds ...gen.Condition) ISmsCouponRelCatDo
	Order(conds ...field.Expr) ISmsCouponRelCatDo
	Distinct(cols ...field.Expr) ISmsCouponRelCatDo
	Omit(cols ...field.Expr) ISmsCouponRelCatDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponRelCatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelCatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelCatDo
	Group(cols ...field.Expr) ISmsCouponRelCatDo
	Having(conds ...gen.Condition) ISmsCouponRelCatDo
	Limit(limit int) ISmsCouponRelCatDo
	Offset(offset int) ISmsCouponRelCatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponRelCatDo
	Unscoped() ISmsCouponRelCatDo
	Create(values ...*model.SmsCouponRelCat) error
	CreateInBatches(values []*model.SmsCouponRelCat, batchSize int) error
	Save(values ...*model.SmsCouponRelCat) error
	First() (*model.SmsCouponRelCat, error)
	Take() (*model.SmsCouponRelCat, error)
	Last() (*model.SmsCouponRelCat, error)
	Find() ([]*model.SmsCouponRelCat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponRelCat, err error)
	FindInBatches(result *[]*model.SmsCouponRelCat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponRelCat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponRelCatDo
	Assign(attrs ...field.AssignExpr) ISmsCouponRelCatDo
	Joins(fields ...field.RelationField) ISmsCouponRelCatDo
	Preload(fields ...field.RelationField) ISmsCouponRelCatDo
	FirstOrInit() (*model.SmsCouponRelCat, error)
	FirstOrCreate() (*model.SmsCouponRelCat, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponRelCat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponRelCatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponRelCatDo) Debug() ISmsCouponRelCatDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponRelCatDo) WithContext(ctx context.Context) ISmsCouponRelCatDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponRelCatDo) ReadDB() ISmsCouponRelCatDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponRelCatDo) WriteDB() ISmsCouponRelCatDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponRelCatDo) Session(config *gorm.Session) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponRelCatDo) Clauses(conds ...clause.Expression) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponRelCatDo) Returning(value interface{}, columns ...string) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponRelCatDo) Not(conds ...gen.Condition) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponRelCatDo) Or(conds ...gen.Condition) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponRelCatDo) Select(conds ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponRelCatDo) Where(conds ...gen.Condition) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponRelCatDo) Order(conds ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponRelCatDo) Distinct(cols ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponRelCatDo) Omit(cols ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponRelCatDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponRelCatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponRelCatDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponRelCatDo) Group(cols ...field.Expr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponRelCatDo) Having(conds ...gen.Condition) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponRelCatDo) Limit(limit int) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponRelCatDo) Offset(offset int) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponRelCatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponRelCatDo) Unscoped() ISmsCouponRelCatDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponRelCatDo) Create(values ...*model.SmsCouponRelCat) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponRelCatDo) CreateInBatches(values []*model.SmsCouponRelCat, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponRelCatDo) Save(values ...*model.SmsCouponRelCat) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponRelCatDo) First() (*model.SmsCouponRelCat, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelCat), nil
	}
}

func (s smsCouponRelCatDo) Take() (*model.SmsCouponRelCat, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelCat), nil
	}
}

func (s smsCouponRelCatDo) Last() (*model.SmsCouponRelCat, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelCat), nil
	}
}

func (s smsCouponRelCatDo) Find() ([]*model.SmsCouponRelCat, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponRelCat), err
}

func (s smsCouponRelCatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponRelCat, err error) {
	buf := make([]*model.SmsCouponRelCat, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponRelCatDo) FindInBatches(result *[]*model.SmsCouponRelCat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponRelCatDo) Attrs(attrs ...field.AssignExpr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponRelCatDo) Assign(attrs ...field.AssignExpr) ISmsCouponRelCatDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponRelCatDo) Joins(fields ...field.RelationField) ISmsCouponRelCatDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponRelCatDo) Preload(fields ...field.RelationField) ISmsCouponRelCatDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponRelCatDo) FirstOrInit() (*model.SmsCouponRelCat, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelCat), nil
	}
}

func (s smsCouponRelCatDo) FirstOrCreate() (*model.SmsCouponRelCat, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRelCat), nil
	}
}

func (s smsCouponRelCatDo) FindByPage(offset int, limit int) (result []*model.SmsCouponRelCat, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponRelCatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponRelCatDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponRelCatDo) Delete(models ...*model.SmsCouponRelCat) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponRelCatDo) withDO(do gen.Dao) *smsCouponRelCatDo {
	s.DO = *do.(*gen.DO)
	return s
}
