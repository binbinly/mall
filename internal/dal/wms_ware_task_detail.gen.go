// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newWmsWareTaskDetail(db *gorm.DB, opts ...gen.DOOption) wmsWareTaskDetail {
	_wmsWareTaskDetail := wmsWareTaskDetail{}

	_wmsWareTaskDetail.wmsWareTaskDetailDo.UseDB(db, opts...)
	_wmsWareTaskDetail.wmsWareTaskDetailDo.UseModel(&model.WmsWareTaskDetail{})

	tableName := _wmsWareTaskDetail.wmsWareTaskDetailDo.TableName()
	_wmsWareTaskDetail.ALL = field.NewAsterisk(tableName)
	_wmsWareTaskDetail.ID = field.NewInt(tableName, "id")
	_wmsWareTaskDetail.TaskID = field.NewInt(tableName, "task_id")
	_wmsWareTaskDetail.WareID = field.NewInt(tableName, "ware_id")
	_wmsWareTaskDetail.SkuID = field.NewInt(tableName, "sku_id")
	_wmsWareTaskDetail.SkuName = field.NewString(tableName, "sku_name")
	_wmsWareTaskDetail.SkuNum = field.NewInt(tableName, "sku_num")
	_wmsWareTaskDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_wmsWareTaskDetail.UpdatedAt = field.NewTime(tableName, "updated_at")

	_wmsWareTaskDetail.fillFieldMap()

	return _wmsWareTaskDetail
}

type wmsWareTaskDetail struct {
	wmsWareTaskDetailDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	TaskID    field.Int    // 工作单id
	WareID    field.Int    // 仓库id
	SkuID     field.Int    // sku_id
	SkuName   field.String // 采购商品名
	SkuNum    field.Int    // 采购数量
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (w wmsWareTaskDetail) Table(newTableName string) *wmsWareTaskDetail {
	w.wmsWareTaskDetailDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wmsWareTaskDetail) As(alias string) *wmsWareTaskDetail {
	w.wmsWareTaskDetailDo.DO = *(w.wmsWareTaskDetailDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wmsWareTaskDetail) updateTableName(table string) *wmsWareTaskDetail {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt(table, "id")
	w.TaskID = field.NewInt(table, "task_id")
	w.WareID = field.NewInt(table, "ware_id")
	w.SkuID = field.NewInt(table, "sku_id")
	w.SkuName = field.NewString(table, "sku_name")
	w.SkuNum = field.NewInt(table, "sku_num")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *wmsWareTaskDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wmsWareTaskDetail) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["task_id"] = w.TaskID
	w.fieldMap["ware_id"] = w.WareID
	w.fieldMap["sku_id"] = w.SkuID
	w.fieldMap["sku_name"] = w.SkuName
	w.fieldMap["sku_num"] = w.SkuNum
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w wmsWareTaskDetail) clone(db *gorm.DB) wmsWareTaskDetail {
	w.wmsWareTaskDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wmsWareTaskDetail) replaceDB(db *gorm.DB) wmsWareTaskDetail {
	w.wmsWareTaskDetailDo.ReplaceDB(db)
	return w
}

type wmsWareTaskDetailDo struct{ gen.DO }

type IWmsWareTaskDetailDo interface {
	gen.SubQuery
	Debug() IWmsWareTaskDetailDo
	WithContext(ctx context.Context) IWmsWareTaskDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWmsWareTaskDetailDo
	WriteDB() IWmsWareTaskDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWmsWareTaskDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWmsWareTaskDetailDo
	Not(conds ...gen.Condition) IWmsWareTaskDetailDo
	Or(conds ...gen.Condition) IWmsWareTaskDetailDo
	Select(conds ...field.Expr) IWmsWareTaskDetailDo
	Where(conds ...gen.Condition) IWmsWareTaskDetailDo
	Order(conds ...field.Expr) IWmsWareTaskDetailDo
	Distinct(cols ...field.Expr) IWmsWareTaskDetailDo
	Omit(cols ...field.Expr) IWmsWareTaskDetailDo
	Join(table schema.Tabler, on ...field.Expr) IWmsWareTaskDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDetailDo
	Group(cols ...field.Expr) IWmsWareTaskDetailDo
	Having(conds ...gen.Condition) IWmsWareTaskDetailDo
	Limit(limit int) IWmsWareTaskDetailDo
	Offset(offset int) IWmsWareTaskDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareTaskDetailDo
	Unscoped() IWmsWareTaskDetailDo
	Create(values ...*model.WmsWareTaskDetail) error
	CreateInBatches(values []*model.WmsWareTaskDetail, batchSize int) error
	Save(values ...*model.WmsWareTaskDetail) error
	First() (*model.WmsWareTaskDetail, error)
	Take() (*model.WmsWareTaskDetail, error)
	Last() (*model.WmsWareTaskDetail, error)
	Find() ([]*model.WmsWareTaskDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWareTaskDetail, err error)
	FindInBatches(result *[]*model.WmsWareTaskDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WmsWareTaskDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWmsWareTaskDetailDo
	Assign(attrs ...field.AssignExpr) IWmsWareTaskDetailDo
	Joins(fields ...field.RelationField) IWmsWareTaskDetailDo
	Preload(fields ...field.RelationField) IWmsWareTaskDetailDo
	FirstOrInit() (*model.WmsWareTaskDetail, error)
	FirstOrCreate() (*model.WmsWareTaskDetail, error)
	FindByPage(offset int, limit int) (result []*model.WmsWareTaskDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWmsWareTaskDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wmsWareTaskDetailDo) Debug() IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Debug())
}

func (w wmsWareTaskDetailDo) WithContext(ctx context.Context) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wmsWareTaskDetailDo) ReadDB() IWmsWareTaskDetailDo {
	return w.Clauses(dbresolver.Read)
}

func (w wmsWareTaskDetailDo) WriteDB() IWmsWareTaskDetailDo {
	return w.Clauses(dbresolver.Write)
}

func (w wmsWareTaskDetailDo) Session(config *gorm.Session) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Session(config))
}

func (w wmsWareTaskDetailDo) Clauses(conds ...clause.Expression) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wmsWareTaskDetailDo) Returning(value interface{}, columns ...string) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wmsWareTaskDetailDo) Not(conds ...gen.Condition) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wmsWareTaskDetailDo) Or(conds ...gen.Condition) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wmsWareTaskDetailDo) Select(conds ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wmsWareTaskDetailDo) Where(conds ...gen.Condition) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wmsWareTaskDetailDo) Order(conds ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wmsWareTaskDetailDo) Distinct(cols ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wmsWareTaskDetailDo) Omit(cols ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wmsWareTaskDetailDo) Join(table schema.Tabler, on ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wmsWareTaskDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wmsWareTaskDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wmsWareTaskDetailDo) Group(cols ...field.Expr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wmsWareTaskDetailDo) Having(conds ...gen.Condition) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wmsWareTaskDetailDo) Limit(limit int) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wmsWareTaskDetailDo) Offset(offset int) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wmsWareTaskDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wmsWareTaskDetailDo) Unscoped() IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wmsWareTaskDetailDo) Create(values ...*model.WmsWareTaskDetail) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wmsWareTaskDetailDo) CreateInBatches(values []*model.WmsWareTaskDetail, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wmsWareTaskDetailDo) Save(values ...*model.WmsWareTaskDetail) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wmsWareTaskDetailDo) First() (*model.WmsWareTaskDetail, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTaskDetail), nil
	}
}

func (w wmsWareTaskDetailDo) Take() (*model.WmsWareTaskDetail, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTaskDetail), nil
	}
}

func (w wmsWareTaskDetailDo) Last() (*model.WmsWareTaskDetail, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTaskDetail), nil
	}
}

func (w wmsWareTaskDetailDo) Find() ([]*model.WmsWareTaskDetail, error) {
	result, err := w.DO.Find()
	return result.([]*model.WmsWareTaskDetail), err
}

func (w wmsWareTaskDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WmsWareTaskDetail, err error) {
	buf := make([]*model.WmsWareTaskDetail, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wmsWareTaskDetailDo) FindInBatches(result *[]*model.WmsWareTaskDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wmsWareTaskDetailDo) Attrs(attrs ...field.AssignExpr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wmsWareTaskDetailDo) Assign(attrs ...field.AssignExpr) IWmsWareTaskDetailDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wmsWareTaskDetailDo) Joins(fields ...field.RelationField) IWmsWareTaskDetailDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wmsWareTaskDetailDo) Preload(fields ...field.RelationField) IWmsWareTaskDetailDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wmsWareTaskDetailDo) FirstOrInit() (*model.WmsWareTaskDetail, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTaskDetail), nil
	}
}

func (w wmsWareTaskDetailDo) FirstOrCreate() (*model.WmsWareTaskDetail, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WmsWareTaskDetail), nil
	}
}

func (w wmsWareTaskDetailDo) FindByPage(offset int, limit int) (result []*model.WmsWareTaskDetail, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wmsWareTaskDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wmsWareTaskDetailDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wmsWareTaskDetailDo) Delete(models ...*model.WmsWareTaskDetail) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wmsWareTaskDetailDo) withDO(do gen.Dao) *wmsWareTaskDetailDo {
	w.DO = *do.(*gen.DO)
	return w
}
