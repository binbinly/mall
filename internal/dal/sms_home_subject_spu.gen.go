// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsHomeSubjectSpu(db *gorm.DB, opts ...gen.DOOption) smsHomeSubjectSpu {
	_smsHomeSubjectSpu := smsHomeSubjectSpu{}

	_smsHomeSubjectSpu.smsHomeSubjectSpuDo.UseDB(db, opts...)
	_smsHomeSubjectSpu.smsHomeSubjectSpuDo.UseModel(&model.SmsHomeSubjectSpu{})

	tableName := _smsHomeSubjectSpu.smsHomeSubjectSpuDo.TableName()
	_smsHomeSubjectSpu.ALL = field.NewAsterisk(tableName)
	_smsHomeSubjectSpu.ID = field.NewInt(tableName, "id")
	_smsHomeSubjectSpu.Name = field.NewString(tableName, "name")
	_smsHomeSubjectSpu.SubjectID = field.NewInt64(tableName, "subject_id")
	_smsHomeSubjectSpu.SpuID = field.NewInt64(tableName, "spu_id")
	_smsHomeSubjectSpu.Sort = field.NewInt(tableName, "sort")

	_smsHomeSubjectSpu.fillFieldMap()

	return _smsHomeSubjectSpu
}

type smsHomeSubjectSpu struct {
	smsHomeSubjectSpuDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	Name      field.String // 名称
	SubjectID field.Int64  // 专题id
	SpuID     field.Int64  // spu_id
	Sort      field.Int    // 排序

	fieldMap map[string]field.Expr
}

func (s smsHomeSubjectSpu) Table(newTableName string) *smsHomeSubjectSpu {
	s.smsHomeSubjectSpuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsHomeSubjectSpu) As(alias string) *smsHomeSubjectSpu {
	s.smsHomeSubjectSpuDo.DO = *(s.smsHomeSubjectSpuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsHomeSubjectSpu) updateTableName(table string) *smsHomeSubjectSpu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Name = field.NewString(table, "name")
	s.SubjectID = field.NewInt64(table, "subject_id")
	s.SpuID = field.NewInt64(table, "spu_id")
	s.Sort = field.NewInt(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsHomeSubjectSpu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsHomeSubjectSpu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["subject_id"] = s.SubjectID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["sort"] = s.Sort
}

func (s smsHomeSubjectSpu) clone(db *gorm.DB) smsHomeSubjectSpu {
	s.smsHomeSubjectSpuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsHomeSubjectSpu) replaceDB(db *gorm.DB) smsHomeSubjectSpu {
	s.smsHomeSubjectSpuDo.ReplaceDB(db)
	return s
}

type smsHomeSubjectSpuDo struct{ gen.DO }

type ISmsHomeSubjectSpuDo interface {
	gen.SubQuery
	Debug() ISmsHomeSubjectSpuDo
	WithContext(ctx context.Context) ISmsHomeSubjectSpuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsHomeSubjectSpuDo
	WriteDB() ISmsHomeSubjectSpuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsHomeSubjectSpuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsHomeSubjectSpuDo
	Not(conds ...gen.Condition) ISmsHomeSubjectSpuDo
	Or(conds ...gen.Condition) ISmsHomeSubjectSpuDo
	Select(conds ...field.Expr) ISmsHomeSubjectSpuDo
	Where(conds ...gen.Condition) ISmsHomeSubjectSpuDo
	Order(conds ...field.Expr) ISmsHomeSubjectSpuDo
	Distinct(cols ...field.Expr) ISmsHomeSubjectSpuDo
	Omit(cols ...field.Expr) ISmsHomeSubjectSpuDo
	Join(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectSpuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectSpuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectSpuDo
	Group(cols ...field.Expr) ISmsHomeSubjectSpuDo
	Having(conds ...gen.Condition) ISmsHomeSubjectSpuDo
	Limit(limit int) ISmsHomeSubjectSpuDo
	Offset(offset int) ISmsHomeSubjectSpuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeSubjectSpuDo
	Unscoped() ISmsHomeSubjectSpuDo
	Create(values ...*model.SmsHomeSubjectSpu) error
	CreateInBatches(values []*model.SmsHomeSubjectSpu, batchSize int) error
	Save(values ...*model.SmsHomeSubjectSpu) error
	First() (*model.SmsHomeSubjectSpu, error)
	Take() (*model.SmsHomeSubjectSpu, error)
	Last() (*model.SmsHomeSubjectSpu, error)
	Find() ([]*model.SmsHomeSubjectSpu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeSubjectSpu, err error)
	FindInBatches(result *[]*model.SmsHomeSubjectSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsHomeSubjectSpu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsHomeSubjectSpuDo
	Assign(attrs ...field.AssignExpr) ISmsHomeSubjectSpuDo
	Joins(fields ...field.RelationField) ISmsHomeSubjectSpuDo
	Preload(fields ...field.RelationField) ISmsHomeSubjectSpuDo
	FirstOrInit() (*model.SmsHomeSubjectSpu, error)
	FirstOrCreate() (*model.SmsHomeSubjectSpu, error)
	FindByPage(offset int, limit int) (result []*model.SmsHomeSubjectSpu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsHomeSubjectSpuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsHomeSubjectSpuDo) Debug() ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Debug())
}

func (s smsHomeSubjectSpuDo) WithContext(ctx context.Context) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsHomeSubjectSpuDo) ReadDB() ISmsHomeSubjectSpuDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsHomeSubjectSpuDo) WriteDB() ISmsHomeSubjectSpuDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsHomeSubjectSpuDo) Session(config *gorm.Session) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsHomeSubjectSpuDo) Clauses(conds ...clause.Expression) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsHomeSubjectSpuDo) Returning(value interface{}, columns ...string) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsHomeSubjectSpuDo) Not(conds ...gen.Condition) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsHomeSubjectSpuDo) Or(conds ...gen.Condition) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsHomeSubjectSpuDo) Select(conds ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsHomeSubjectSpuDo) Where(conds ...gen.Condition) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsHomeSubjectSpuDo) Order(conds ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsHomeSubjectSpuDo) Distinct(cols ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsHomeSubjectSpuDo) Omit(cols ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsHomeSubjectSpuDo) Join(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsHomeSubjectSpuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsHomeSubjectSpuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsHomeSubjectSpuDo) Group(cols ...field.Expr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsHomeSubjectSpuDo) Having(conds ...gen.Condition) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsHomeSubjectSpuDo) Limit(limit int) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsHomeSubjectSpuDo) Offset(offset int) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsHomeSubjectSpuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsHomeSubjectSpuDo) Unscoped() ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsHomeSubjectSpuDo) Create(values ...*model.SmsHomeSubjectSpu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsHomeSubjectSpuDo) CreateInBatches(values []*model.SmsHomeSubjectSpu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsHomeSubjectSpuDo) Save(values ...*model.SmsHomeSubjectSpu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsHomeSubjectSpuDo) First() (*model.SmsHomeSubjectSpu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubjectSpu), nil
	}
}

func (s smsHomeSubjectSpuDo) Take() (*model.SmsHomeSubjectSpu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubjectSpu), nil
	}
}

func (s smsHomeSubjectSpuDo) Last() (*model.SmsHomeSubjectSpu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubjectSpu), nil
	}
}

func (s smsHomeSubjectSpuDo) Find() ([]*model.SmsHomeSubjectSpu, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsHomeSubjectSpu), err
}

func (s smsHomeSubjectSpuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsHomeSubjectSpu, err error) {
	buf := make([]*model.SmsHomeSubjectSpu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsHomeSubjectSpuDo) FindInBatches(result *[]*model.SmsHomeSubjectSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsHomeSubjectSpuDo) Attrs(attrs ...field.AssignExpr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsHomeSubjectSpuDo) Assign(attrs ...field.AssignExpr) ISmsHomeSubjectSpuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsHomeSubjectSpuDo) Joins(fields ...field.RelationField) ISmsHomeSubjectSpuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsHomeSubjectSpuDo) Preload(fields ...field.RelationField) ISmsHomeSubjectSpuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsHomeSubjectSpuDo) FirstOrInit() (*model.SmsHomeSubjectSpu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubjectSpu), nil
	}
}

func (s smsHomeSubjectSpuDo) FirstOrCreate() (*model.SmsHomeSubjectSpu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsHomeSubjectSpu), nil
	}
}

func (s smsHomeSubjectSpuDo) FindByPage(offset int, limit int) (result []*model.SmsHomeSubjectSpu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsHomeSubjectSpuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsHomeSubjectSpuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsHomeSubjectSpuDo) Delete(models ...*model.SmsHomeSubjectSpu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsHomeSubjectSpuDo) withDO(do gen.Dao) *smsHomeSubjectSpuDo {
	s.DO = *do.(*gen.DO)
	return s
}
