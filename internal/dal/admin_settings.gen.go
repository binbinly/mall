// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newAdminSetting(db *gorm.DB, opts ...gen.DOOption) adminSetting {
	_adminSetting := adminSetting{}

	_adminSetting.adminSettingDo.UseDB(db, opts...)
	_adminSetting.adminSettingDo.UseModel(&model.AdminSetting{})

	tableName := _adminSetting.adminSettingDo.TableName()
	_adminSetting.ALL = field.NewAsterisk(tableName)
	_adminSetting.Slug = field.NewString(tableName, "slug")
	_adminSetting.Value = field.NewString(tableName, "value")
	_adminSetting.CreatedAt = field.NewTime(tableName, "created_at")
	_adminSetting.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminSetting.fillFieldMap()

	return _adminSetting
}

type adminSetting struct {
	adminSettingDo

	ALL       field.Asterisk
	Slug      field.String
	Value     field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminSetting) Table(newTableName string) *adminSetting {
	a.adminSettingDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminSetting) As(alias string) *adminSetting {
	a.adminSettingDo.DO = *(a.adminSettingDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminSetting) updateTableName(table string) *adminSetting {
	a.ALL = field.NewAsterisk(table)
	a.Slug = field.NewString(table, "slug")
	a.Value = field.NewString(table, "value")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminSetting) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["slug"] = a.Slug
	a.fieldMap["value"] = a.Value
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminSetting) clone(db *gorm.DB) adminSetting {
	a.adminSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminSetting) replaceDB(db *gorm.DB) adminSetting {
	a.adminSettingDo.ReplaceDB(db)
	return a
}

type adminSettingDo struct{ gen.DO }

type IAdminSettingDo interface {
	gen.SubQuery
	Debug() IAdminSettingDo
	WithContext(ctx context.Context) IAdminSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminSettingDo
	WriteDB() IAdminSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminSettingDo
	Not(conds ...gen.Condition) IAdminSettingDo
	Or(conds ...gen.Condition) IAdminSettingDo
	Select(conds ...field.Expr) IAdminSettingDo
	Where(conds ...gen.Condition) IAdminSettingDo
	Order(conds ...field.Expr) IAdminSettingDo
	Distinct(cols ...field.Expr) IAdminSettingDo
	Omit(cols ...field.Expr) IAdminSettingDo
	Join(table schema.Tabler, on ...field.Expr) IAdminSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminSettingDo
	Group(cols ...field.Expr) IAdminSettingDo
	Having(conds ...gen.Condition) IAdminSettingDo
	Limit(limit int) IAdminSettingDo
	Offset(offset int) IAdminSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminSettingDo
	Unscoped() IAdminSettingDo
	Create(values ...*model.AdminSetting) error
	CreateInBatches(values []*model.AdminSetting, batchSize int) error
	Save(values ...*model.AdminSetting) error
	First() (*model.AdminSetting, error)
	Take() (*model.AdminSetting, error)
	Last() (*model.AdminSetting, error)
	Find() ([]*model.AdminSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminSetting, err error)
	FindInBatches(result *[]*model.AdminSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminSettingDo
	Assign(attrs ...field.AssignExpr) IAdminSettingDo
	Joins(fields ...field.RelationField) IAdminSettingDo
	Preload(fields ...field.RelationField) IAdminSettingDo
	FirstOrInit() (*model.AdminSetting, error)
	FirstOrCreate() (*model.AdminSetting, error)
	FindByPage(offset int, limit int) (result []*model.AdminSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminSettingDo) Debug() IAdminSettingDo {
	return a.withDO(a.DO.Debug())
}

func (a adminSettingDo) WithContext(ctx context.Context) IAdminSettingDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminSettingDo) ReadDB() IAdminSettingDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminSettingDo) WriteDB() IAdminSettingDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminSettingDo) Session(config *gorm.Session) IAdminSettingDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminSettingDo) Clauses(conds ...clause.Expression) IAdminSettingDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminSettingDo) Returning(value interface{}, columns ...string) IAdminSettingDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminSettingDo) Not(conds ...gen.Condition) IAdminSettingDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminSettingDo) Or(conds ...gen.Condition) IAdminSettingDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminSettingDo) Select(conds ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminSettingDo) Where(conds ...gen.Condition) IAdminSettingDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminSettingDo) Order(conds ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminSettingDo) Distinct(cols ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminSettingDo) Omit(cols ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminSettingDo) Join(table schema.Tabler, on ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminSettingDo) Group(cols ...field.Expr) IAdminSettingDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminSettingDo) Having(conds ...gen.Condition) IAdminSettingDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminSettingDo) Limit(limit int) IAdminSettingDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminSettingDo) Offset(offset int) IAdminSettingDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminSettingDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminSettingDo) Unscoped() IAdminSettingDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminSettingDo) Create(values ...*model.AdminSetting) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminSettingDo) CreateInBatches(values []*model.AdminSetting, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminSettingDo) Save(values ...*model.AdminSetting) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminSettingDo) First() (*model.AdminSetting, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSetting), nil
	}
}

func (a adminSettingDo) Take() (*model.AdminSetting, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSetting), nil
	}
}

func (a adminSettingDo) Last() (*model.AdminSetting, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSetting), nil
	}
}

func (a adminSettingDo) Find() ([]*model.AdminSetting, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminSetting), err
}

func (a adminSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminSetting, err error) {
	buf := make([]*model.AdminSetting, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminSettingDo) FindInBatches(result *[]*model.AdminSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminSettingDo) Attrs(attrs ...field.AssignExpr) IAdminSettingDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminSettingDo) Assign(attrs ...field.AssignExpr) IAdminSettingDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminSettingDo) Joins(fields ...field.RelationField) IAdminSettingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminSettingDo) Preload(fields ...field.RelationField) IAdminSettingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminSettingDo) FirstOrInit() (*model.AdminSetting, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSetting), nil
	}
}

func (a adminSettingDo) FirstOrCreate() (*model.AdminSetting, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSetting), nil
	}
}

func (a adminSettingDo) FindByPage(offset int, limit int) (result []*model.AdminSetting, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminSettingDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminSettingDo) Delete(models ...*model.AdminSetting) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminSettingDo) withDO(do gen.Dao) *adminSettingDo {
	a.DO = *do.(*gen.DO)
	return a
}
