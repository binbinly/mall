// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsSpu(db *gorm.DB, opts ...gen.DOOption) pmsSpu {
	_pmsSpu := pmsSpu{}

	_pmsSpu.pmsSpuDo.UseDB(db, opts...)
	_pmsSpu.pmsSpuDo.UseModel(&model.PmsSpu{})

	tableName := _pmsSpu.pmsSpuDo.TableName()
	_pmsSpu.ALL = field.NewAsterisk(tableName)
	_pmsSpu.ID = field.NewInt(tableName, "id")
	_pmsSpu.CatID = field.NewInt(tableName, "cat_id")
	_pmsSpu.BrandID = field.NewInt(tableName, "brand_id")
	_pmsSpu.Name = field.NewString(tableName, "name")
	_pmsSpu.Cover = field.NewString(tableName, "cover")
	_pmsSpu.OtPrice = field.NewInt(tableName, "ot_price")
	_pmsSpu.Price = field.NewInt(tableName, "price")
	_pmsSpu.Desc = field.NewString(tableName, "desc")
	_pmsSpu.BannerImages = field.NewString(tableName, "banner_images")
	_pmsSpu.Keyword = field.NewString(tableName, "keyword")
	_pmsSpu.UnitName = field.NewString(tableName, "unit_name")
	_pmsSpu.Video = field.NewString(tableName, "video")
	_pmsSpu.Postage = field.NewInt(tableName, "postage")
	_pmsSpu.SaleCount = field.NewInt(tableName, "sale_count")
	_pmsSpu.IsMany = field.NewInt8(tableName, "is_many")
	_pmsSpu.Status = field.NewInt8(tableName, "status")
	_pmsSpu.Sort = field.NewInt32(tableName, "sort")
	_pmsSpu.CreatedAt = field.NewTime(tableName, "created_at")
	_pmsSpu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pmsSpu.DeletedAt = field.NewField(tableName, "deleted_at")

	_pmsSpu.fillFieldMap()

	return _pmsSpu
}

type pmsSpu struct {
	pmsSpuDo

	ALL          field.Asterisk
	ID           field.Int    // ID
	CatID        field.Int    // 产品分类
	BrandID      field.Int    // 品牌id
	Name         field.String // 商品名
	Cover        field.String // 封面图
	OtPrice      field.Int    // 市场价
	Price        field.Int    // 销售价
	Desc         field.String // 商品描述
	BannerImages field.String // 轮播图
	Keyword      field.String // 商品关键词
	UnitName     field.String // 单位名
	Video        field.String // 视频地址
	Postage      field.Int    // 邮费
	SaleCount    field.Int    // 销量
	IsMany       field.Int8   // 是否多规格
	Status       field.Int8   // 状态
	Sort         field.Int32  // 排序
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p pmsSpu) Table(newTableName string) *pmsSpu {
	p.pmsSpuDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSpu) As(alias string) *pmsSpu {
	p.pmsSpuDo.DO = *(p.pmsSpuDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSpu) updateTableName(table string) *pmsSpu {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.CatID = field.NewInt(table, "cat_id")
	p.BrandID = field.NewInt(table, "brand_id")
	p.Name = field.NewString(table, "name")
	p.Cover = field.NewString(table, "cover")
	p.OtPrice = field.NewInt(table, "ot_price")
	p.Price = field.NewInt(table, "price")
	p.Desc = field.NewString(table, "desc")
	p.BannerImages = field.NewString(table, "banner_images")
	p.Keyword = field.NewString(table, "keyword")
	p.UnitName = field.NewString(table, "unit_name")
	p.Video = field.NewString(table, "video")
	p.Postage = field.NewInt(table, "postage")
	p.SaleCount = field.NewInt(table, "sale_count")
	p.IsMany = field.NewInt8(table, "is_many")
	p.Status = field.NewInt8(table, "status")
	p.Sort = field.NewInt32(table, "sort")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *pmsSpu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSpu) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 20)
	p.fieldMap["id"] = p.ID
	p.fieldMap["cat_id"] = p.CatID
	p.fieldMap["brand_id"] = p.BrandID
	p.fieldMap["name"] = p.Name
	p.fieldMap["cover"] = p.Cover
	p.fieldMap["ot_price"] = p.OtPrice
	p.fieldMap["price"] = p.Price
	p.fieldMap["desc"] = p.Desc
	p.fieldMap["banner_images"] = p.BannerImages
	p.fieldMap["keyword"] = p.Keyword
	p.fieldMap["unit_name"] = p.UnitName
	p.fieldMap["video"] = p.Video
	p.fieldMap["postage"] = p.Postage
	p.fieldMap["sale_count"] = p.SaleCount
	p.fieldMap["is_many"] = p.IsMany
	p.fieldMap["status"] = p.Status
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p pmsSpu) clone(db *gorm.DB) pmsSpu {
	p.pmsSpuDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSpu) replaceDB(db *gorm.DB) pmsSpu {
	p.pmsSpuDo.ReplaceDB(db)
	return p
}

type pmsSpuDo struct{ gen.DO }

type IPmsSpuDo interface {
	gen.SubQuery
	Debug() IPmsSpuDo
	WithContext(ctx context.Context) IPmsSpuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsSpuDo
	WriteDB() IPmsSpuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsSpuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsSpuDo
	Not(conds ...gen.Condition) IPmsSpuDo
	Or(conds ...gen.Condition) IPmsSpuDo
	Select(conds ...field.Expr) IPmsSpuDo
	Where(conds ...gen.Condition) IPmsSpuDo
	Order(conds ...field.Expr) IPmsSpuDo
	Distinct(cols ...field.Expr) IPmsSpuDo
	Omit(cols ...field.Expr) IPmsSpuDo
	Join(table schema.Tabler, on ...field.Expr) IPmsSpuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDo
	Group(cols ...field.Expr) IPmsSpuDo
	Having(conds ...gen.Condition) IPmsSpuDo
	Limit(limit int) IPmsSpuDo
	Offset(offset int) IPmsSpuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuDo
	Unscoped() IPmsSpuDo
	Create(values ...*model.PmsSpu) error
	CreateInBatches(values []*model.PmsSpu, batchSize int) error
	Save(values ...*model.PmsSpu) error
	First() (*model.PmsSpu, error)
	Take() (*model.PmsSpu, error)
	Last() (*model.PmsSpu, error)
	Find() ([]*model.PmsSpu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpu, err error)
	FindInBatches(result *[]*model.PmsSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsSpu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsSpuDo
	Assign(attrs ...field.AssignExpr) IPmsSpuDo
	Joins(fields ...field.RelationField) IPmsSpuDo
	Preload(fields ...field.RelationField) IPmsSpuDo
	FirstOrInit() (*model.PmsSpu, error)
	FirstOrCreate() (*model.PmsSpu, error)
	FindByPage(offset int, limit int) (result []*model.PmsSpu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsSpuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsSpuDo) Debug() IPmsSpuDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSpuDo) WithContext(ctx context.Context) IPmsSpuDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSpuDo) ReadDB() IPmsSpuDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSpuDo) WriteDB() IPmsSpuDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSpuDo) Session(config *gorm.Session) IPmsSpuDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSpuDo) Clauses(conds ...clause.Expression) IPmsSpuDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSpuDo) Returning(value interface{}, columns ...string) IPmsSpuDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSpuDo) Not(conds ...gen.Condition) IPmsSpuDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSpuDo) Or(conds ...gen.Condition) IPmsSpuDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSpuDo) Select(conds ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSpuDo) Where(conds ...gen.Condition) IPmsSpuDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSpuDo) Order(conds ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSpuDo) Distinct(cols ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSpuDo) Omit(cols ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSpuDo) Join(table schema.Tabler, on ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSpuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSpuDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSpuDo) Group(cols ...field.Expr) IPmsSpuDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSpuDo) Having(conds ...gen.Condition) IPmsSpuDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSpuDo) Limit(limit int) IPmsSpuDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSpuDo) Offset(offset int) IPmsSpuDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSpuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSpuDo) Unscoped() IPmsSpuDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSpuDo) Create(values ...*model.PmsSpu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSpuDo) CreateInBatches(values []*model.PmsSpu, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSpuDo) Save(values ...*model.PmsSpu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSpuDo) First() (*model.PmsSpu, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpu), nil
	}
}

func (p pmsSpuDo) Take() (*model.PmsSpu, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpu), nil
	}
}

func (p pmsSpuDo) Last() (*model.PmsSpu, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpu), nil
	}
}

func (p pmsSpuDo) Find() ([]*model.PmsSpu, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSpu), err
}

func (p pmsSpuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpu, err error) {
	buf := make([]*model.PmsSpu, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSpuDo) FindInBatches(result *[]*model.PmsSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSpuDo) Attrs(attrs ...field.AssignExpr) IPmsSpuDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSpuDo) Assign(attrs ...field.AssignExpr) IPmsSpuDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSpuDo) Joins(fields ...field.RelationField) IPmsSpuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSpuDo) Preload(fields ...field.RelationField) IPmsSpuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSpuDo) FirstOrInit() (*model.PmsSpu, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpu), nil
	}
}

func (p pmsSpuDo) FirstOrCreate() (*model.PmsSpu, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpu), nil
	}
}

func (p pmsSpuDo) FindByPage(offset int, limit int) (result []*model.PmsSpu, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSpuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSpuDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSpuDo) Delete(models ...*model.PmsSpu) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSpuDo) withDO(do gen.Dao) *pmsSpuDo {
	p.DO = *do.(*gen.DO)
	return p
}
