// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsAppVersion(db *gorm.DB, opts ...gen.DOOption) smsAppVersion {
	_smsAppVersion := smsAppVersion{}

	_smsAppVersion.smsAppVersionDo.UseDB(db, opts...)
	_smsAppVersion.smsAppVersionDo.UseModel(&model.SmsAppVersion{})

	tableName := _smsAppVersion.smsAppVersionDo.TableName()
	_smsAppVersion.ALL = field.NewAsterisk(tableName)
	_smsAppVersion.ID = field.NewInt(tableName, "id")
	_smsAppVersion.Version = field.NewString(tableName, "version")
	_smsAppVersion.Platform = field.NewBool(tableName, "platform")
	_smsAppVersion.Info = field.NewString(tableName, "info")
	_smsAppVersion.URL = field.NewString(tableName, "url")
	_smsAppVersion.IsForce = field.NewBool(tableName, "is_force")
	_smsAppVersion.IsNew = field.NewBool(tableName, "is_new")
	_smsAppVersion.CreatedAt = field.NewInt64(tableName, "created_at")

	_smsAppVersion.fillFieldMap()

	return _smsAppVersion
}

// smsAppVersion APP版本表
type smsAppVersion struct {
	smsAppVersionDo

	ALL       field.Asterisk
	ID        field.Int    // 自增ID
	Version   field.String // 版本号
	Platform  field.Bool   // 平台类型:1.安卓 2.IOS
	Info      field.String // 升级信息
	URL       field.String // 下载链接
	IsForce   field.Bool   // 是否强制升级
	IsNew     field.Bool   // 是否最新
	CreatedAt field.Int64  // 添加时间

	fieldMap map[string]field.Expr
}

func (s smsAppVersion) Table(newTableName string) *smsAppVersion {
	s.smsAppVersionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsAppVersion) As(alias string) *smsAppVersion {
	s.smsAppVersionDo.DO = *(s.smsAppVersionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsAppVersion) updateTableName(table string) *smsAppVersion {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.Version = field.NewString(table, "version")
	s.Platform = field.NewBool(table, "platform")
	s.Info = field.NewString(table, "info")
	s.URL = field.NewString(table, "url")
	s.IsForce = field.NewBool(table, "is_force")
	s.IsNew = field.NewBool(table, "is_new")
	s.CreatedAt = field.NewInt64(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *smsAppVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsAppVersion) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["version"] = s.Version
	s.fieldMap["platform"] = s.Platform
	s.fieldMap["info"] = s.Info
	s.fieldMap["url"] = s.URL
	s.fieldMap["is_force"] = s.IsForce
	s.fieldMap["is_new"] = s.IsNew
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s smsAppVersion) clone(db *gorm.DB) smsAppVersion {
	s.smsAppVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsAppVersion) replaceDB(db *gorm.DB) smsAppVersion {
	s.smsAppVersionDo.ReplaceDB(db)
	return s
}

type smsAppVersionDo struct{ gen.DO }

type ISmsAppVersionDo interface {
	gen.SubQuery
	Debug() ISmsAppVersionDo
	WithContext(ctx context.Context) ISmsAppVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsAppVersionDo
	WriteDB() ISmsAppVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsAppVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsAppVersionDo
	Not(conds ...gen.Condition) ISmsAppVersionDo
	Or(conds ...gen.Condition) ISmsAppVersionDo
	Select(conds ...field.Expr) ISmsAppVersionDo
	Where(conds ...gen.Condition) ISmsAppVersionDo
	Order(conds ...field.Expr) ISmsAppVersionDo
	Distinct(cols ...field.Expr) ISmsAppVersionDo
	Omit(cols ...field.Expr) ISmsAppVersionDo
	Join(table schema.Tabler, on ...field.Expr) ISmsAppVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsAppVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsAppVersionDo
	Group(cols ...field.Expr) ISmsAppVersionDo
	Having(conds ...gen.Condition) ISmsAppVersionDo
	Limit(limit int) ISmsAppVersionDo
	Offset(offset int) ISmsAppVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsAppVersionDo
	Unscoped() ISmsAppVersionDo
	Create(values ...*model.SmsAppVersion) error
	CreateInBatches(values []*model.SmsAppVersion, batchSize int) error
	Save(values ...*model.SmsAppVersion) error
	First() (*model.SmsAppVersion, error)
	Take() (*model.SmsAppVersion, error)
	Last() (*model.SmsAppVersion, error)
	Find() ([]*model.SmsAppVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsAppVersion, err error)
	FindInBatches(result *[]*model.SmsAppVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsAppVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsAppVersionDo
	Assign(attrs ...field.AssignExpr) ISmsAppVersionDo
	Joins(fields ...field.RelationField) ISmsAppVersionDo
	Preload(fields ...field.RelationField) ISmsAppVersionDo
	FirstOrInit() (*model.SmsAppVersion, error)
	FirstOrCreate() (*model.SmsAppVersion, error)
	FindByPage(offset int, limit int) (result []*model.SmsAppVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsAppVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsAppVersionDo) Debug() ISmsAppVersionDo {
	return s.withDO(s.DO.Debug())
}

func (s smsAppVersionDo) WithContext(ctx context.Context) ISmsAppVersionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsAppVersionDo) ReadDB() ISmsAppVersionDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsAppVersionDo) WriteDB() ISmsAppVersionDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsAppVersionDo) Session(config *gorm.Session) ISmsAppVersionDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsAppVersionDo) Clauses(conds ...clause.Expression) ISmsAppVersionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsAppVersionDo) Returning(value interface{}, columns ...string) ISmsAppVersionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsAppVersionDo) Not(conds ...gen.Condition) ISmsAppVersionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsAppVersionDo) Or(conds ...gen.Condition) ISmsAppVersionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsAppVersionDo) Select(conds ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsAppVersionDo) Where(conds ...gen.Condition) ISmsAppVersionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsAppVersionDo) Order(conds ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsAppVersionDo) Distinct(cols ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsAppVersionDo) Omit(cols ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsAppVersionDo) Join(table schema.Tabler, on ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsAppVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsAppVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsAppVersionDo) Group(cols ...field.Expr) ISmsAppVersionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsAppVersionDo) Having(conds ...gen.Condition) ISmsAppVersionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsAppVersionDo) Limit(limit int) ISmsAppVersionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsAppVersionDo) Offset(offset int) ISmsAppVersionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsAppVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsAppVersionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsAppVersionDo) Unscoped() ISmsAppVersionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsAppVersionDo) Create(values ...*model.SmsAppVersion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsAppVersionDo) CreateInBatches(values []*model.SmsAppVersion, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsAppVersionDo) Save(values ...*model.SmsAppVersion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsAppVersionDo) First() (*model.SmsAppVersion, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppVersion), nil
	}
}

func (s smsAppVersionDo) Take() (*model.SmsAppVersion, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppVersion), nil
	}
}

func (s smsAppVersionDo) Last() (*model.SmsAppVersion, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppVersion), nil
	}
}

func (s smsAppVersionDo) Find() ([]*model.SmsAppVersion, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsAppVersion), err
}

func (s smsAppVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsAppVersion, err error) {
	buf := make([]*model.SmsAppVersion, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsAppVersionDo) FindInBatches(result *[]*model.SmsAppVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsAppVersionDo) Attrs(attrs ...field.AssignExpr) ISmsAppVersionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsAppVersionDo) Assign(attrs ...field.AssignExpr) ISmsAppVersionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsAppVersionDo) Joins(fields ...field.RelationField) ISmsAppVersionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsAppVersionDo) Preload(fields ...field.RelationField) ISmsAppVersionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsAppVersionDo) FirstOrInit() (*model.SmsAppVersion, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppVersion), nil
	}
}

func (s smsAppVersionDo) FirstOrCreate() (*model.SmsAppVersion, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsAppVersion), nil
	}
}

func (s smsAppVersionDo) FindByPage(offset int, limit int) (result []*model.SmsAppVersion, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsAppVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsAppVersionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsAppVersionDo) Delete(models ...*model.SmsAppVersion) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsAppVersionDo) withDO(do gen.Dao) *smsAppVersionDo {
	s.DO = *do.(*gen.DO)
	return s
}
