// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newUmsMemberLog(db *gorm.DB, opts ...gen.DOOption) umsMemberLog {
	_umsMemberLog := umsMemberLog{}

	_umsMemberLog.umsMemberLogDo.UseDB(db, opts...)
	_umsMemberLog.umsMemberLogDo.UseModel(&model.UmsMemberLog{})

	tableName := _umsMemberLog.umsMemberLogDo.TableName()
	_umsMemberLog.ALL = field.NewAsterisk(tableName)
	_umsMemberLog.ID = field.NewInt(tableName, "id")
	_umsMemberLog.MemberID = field.NewInt(tableName, "member_id")
	_umsMemberLog.IP = field.NewString(tableName, "ip")
	_umsMemberLog.City = field.NewString(tableName, "city")
	_umsMemberLog.Type = field.NewInt8(tableName, "type")
	_umsMemberLog.CreatedAt = field.NewInt(tableName, "created_at")

	_umsMemberLog.fillFieldMap()

	return _umsMemberLog
}

type umsMemberLog struct {
	umsMemberLogDo

	ALL       field.Asterisk
	ID        field.Int    // ID
	MemberID  field.Int    // 用户id
	IP        field.String // ip地址
	City      field.String // 城市
	Type      field.Int8   // 登录类型[1-web，2-app]
	CreatedAt field.Int    // 创建时间

	fieldMap map[string]field.Expr
}

func (u umsMemberLog) Table(newTableName string) *umsMemberLog {
	u.umsMemberLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberLog) As(alias string) *umsMemberLog {
	u.umsMemberLogDo.DO = *(u.umsMemberLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberLog) updateTableName(table string) *umsMemberLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.MemberID = field.NewInt(table, "member_id")
	u.IP = field.NewString(table, "ip")
	u.City = field.NewString(table, "city")
	u.Type = field.NewInt8(table, "type")
	u.CreatedAt = field.NewInt(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *umsMemberLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["ip"] = u.IP
	u.fieldMap["city"] = u.City
	u.fieldMap["type"] = u.Type
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u umsMemberLog) clone(db *gorm.DB) umsMemberLog {
	u.umsMemberLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberLog) replaceDB(db *gorm.DB) umsMemberLog {
	u.umsMemberLogDo.ReplaceDB(db)
	return u
}

type umsMemberLogDo struct{ gen.DO }

type IUmsMemberLogDo interface {
	gen.SubQuery
	Debug() IUmsMemberLogDo
	WithContext(ctx context.Context) IUmsMemberLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberLogDo
	WriteDB() IUmsMemberLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberLogDo
	Not(conds ...gen.Condition) IUmsMemberLogDo
	Or(conds ...gen.Condition) IUmsMemberLogDo
	Select(conds ...field.Expr) IUmsMemberLogDo
	Where(conds ...gen.Condition) IUmsMemberLogDo
	Order(conds ...field.Expr) IUmsMemberLogDo
	Distinct(cols ...field.Expr) IUmsMemberLogDo
	Omit(cols ...field.Expr) IUmsMemberLogDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLogDo
	Group(cols ...field.Expr) IUmsMemberLogDo
	Having(conds ...gen.Condition) IUmsMemberLogDo
	Limit(limit int) IUmsMemberLogDo
	Offset(offset int) IUmsMemberLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberLogDo
	Unscoped() IUmsMemberLogDo
	Create(values ...*model.UmsMemberLog) error
	CreateInBatches(values []*model.UmsMemberLog, batchSize int) error
	Save(values ...*model.UmsMemberLog) error
	First() (*model.UmsMemberLog, error)
	Take() (*model.UmsMemberLog, error)
	Last() (*model.UmsMemberLog, error)
	Find() ([]*model.UmsMemberLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberLog, err error)
	FindInBatches(result *[]*model.UmsMemberLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberLogDo
	Assign(attrs ...field.AssignExpr) IUmsMemberLogDo
	Joins(fields ...field.RelationField) IUmsMemberLogDo
	Preload(fields ...field.RelationField) IUmsMemberLogDo
	FirstOrInit() (*model.UmsMemberLog, error)
	FirstOrCreate() (*model.UmsMemberLog, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberLogDo) Debug() IUmsMemberLogDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberLogDo) WithContext(ctx context.Context) IUmsMemberLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberLogDo) ReadDB() IUmsMemberLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberLogDo) WriteDB() IUmsMemberLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberLogDo) Session(config *gorm.Session) IUmsMemberLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberLogDo) Clauses(conds ...clause.Expression) IUmsMemberLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberLogDo) Returning(value interface{}, columns ...string) IUmsMemberLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberLogDo) Not(conds ...gen.Condition) IUmsMemberLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberLogDo) Or(conds ...gen.Condition) IUmsMemberLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberLogDo) Select(conds ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberLogDo) Where(conds ...gen.Condition) IUmsMemberLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberLogDo) Order(conds ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberLogDo) Distinct(cols ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberLogDo) Omit(cols ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberLogDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberLogDo) Group(cols ...field.Expr) IUmsMemberLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberLogDo) Having(conds ...gen.Condition) IUmsMemberLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberLogDo) Limit(limit int) IUmsMemberLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberLogDo) Offset(offset int) IUmsMemberLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberLogDo) Unscoped() IUmsMemberLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberLogDo) Create(values ...*model.UmsMemberLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberLogDo) CreateInBatches(values []*model.UmsMemberLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberLogDo) Save(values ...*model.UmsMemberLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberLogDo) First() (*model.UmsMemberLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLog), nil
	}
}

func (u umsMemberLogDo) Take() (*model.UmsMemberLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLog), nil
	}
}

func (u umsMemberLogDo) Last() (*model.UmsMemberLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLog), nil
	}
}

func (u umsMemberLogDo) Find() ([]*model.UmsMemberLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberLog), err
}

func (u umsMemberLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberLog, err error) {
	buf := make([]*model.UmsMemberLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberLogDo) FindInBatches(result *[]*model.UmsMemberLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberLogDo) Attrs(attrs ...field.AssignExpr) IUmsMemberLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberLogDo) Assign(attrs ...field.AssignExpr) IUmsMemberLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberLogDo) Joins(fields ...field.RelationField) IUmsMemberLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberLogDo) Preload(fields ...field.RelationField) IUmsMemberLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberLogDo) FirstOrInit() (*model.UmsMemberLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLog), nil
	}
}

func (u umsMemberLogDo) FirstOrCreate() (*model.UmsMemberLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLog), nil
	}
}

func (u umsMemberLogDo) FindByPage(offset int, limit int) (result []*model.UmsMemberLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberLogDo) Delete(models ...*model.UmsMemberLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberLogDo) withDO(do gen.Dao) *umsMemberLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
