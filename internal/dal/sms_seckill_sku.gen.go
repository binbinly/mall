// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newSmsSeckillSku(db *gorm.DB, opts ...gen.DOOption) smsSeckillSku {
	_smsSeckillSku := smsSeckillSku{}

	_smsSeckillSku.smsSeckillSkuDo.UseDB(db, opts...)
	_smsSeckillSku.smsSeckillSkuDo.UseModel(&model.SmsSeckillSku{})

	tableName := _smsSeckillSku.smsSeckillSkuDo.TableName()
	_smsSeckillSku.ALL = field.NewAsterisk(tableName)
	_smsSeckillSku.ID = field.NewInt(tableName, "id")
	_smsSeckillSku.SkuID = field.NewInt(tableName, "sku_id")
	_smsSeckillSku.ActivityID = field.NewInt(tableName, "activity_id")
	_smsSeckillSku.SessionID = field.NewInt(tableName, "session_id")
	_smsSeckillSku.Price = field.NewInt(tableName, "price")
	_smsSeckillSku.Count_ = field.NewInt(tableName, "count")
	_smsSeckillSku.Limit_ = field.NewInt(tableName, "limit")
	_smsSeckillSku.Sort = field.NewInt(tableName, "sort")

	_smsSeckillSku.fillFieldMap()

	return _smsSeckillSku
}

type smsSeckillSku struct {
	smsSeckillSkuDo

	ALL        field.Asterisk
	ID         field.Int // ID
	SkuID      field.Int // sku_id
	ActivityID field.Int // 活动id
	SessionID  field.Int // 场次id
	Price      field.Int // 秒杀价格
	Count_     field.Int // 秒杀总量
	Limit_     field.Int // 每人限购数量
	Sort       field.Int // 排序

	fieldMap map[string]field.Expr
}

func (s smsSeckillSku) Table(newTableName string) *smsSeckillSku {
	s.smsSeckillSkuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSeckillSku) As(alias string) *smsSeckillSku {
	s.smsSeckillSkuDo.DO = *(s.smsSeckillSkuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSeckillSku) updateTableName(table string) *smsSeckillSku {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt(table, "id")
	s.SkuID = field.NewInt(table, "sku_id")
	s.ActivityID = field.NewInt(table, "activity_id")
	s.SessionID = field.NewInt(table, "session_id")
	s.Price = field.NewInt(table, "price")
	s.Count_ = field.NewInt(table, "count")
	s.Limit_ = field.NewInt(table, "limit")
	s.Sort = field.NewInt(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsSeckillSku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSeckillSku) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sku_id"] = s.SkuID
	s.fieldMap["activity_id"] = s.ActivityID
	s.fieldMap["session_id"] = s.SessionID
	s.fieldMap["price"] = s.Price
	s.fieldMap["count"] = s.Count_
	s.fieldMap["limit"] = s.Limit_
	s.fieldMap["sort"] = s.Sort
}

func (s smsSeckillSku) clone(db *gorm.DB) smsSeckillSku {
	s.smsSeckillSkuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSeckillSku) replaceDB(db *gorm.DB) smsSeckillSku {
	s.smsSeckillSkuDo.ReplaceDB(db)
	return s
}

type smsSeckillSkuDo struct{ gen.DO }

type ISmsSeckillSkuDo interface {
	gen.SubQuery
	Debug() ISmsSeckillSkuDo
	WithContext(ctx context.Context) ISmsSeckillSkuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSeckillSkuDo
	WriteDB() ISmsSeckillSkuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSeckillSkuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSeckillSkuDo
	Not(conds ...gen.Condition) ISmsSeckillSkuDo
	Or(conds ...gen.Condition) ISmsSeckillSkuDo
	Select(conds ...field.Expr) ISmsSeckillSkuDo
	Where(conds ...gen.Condition) ISmsSeckillSkuDo
	Order(conds ...field.Expr) ISmsSeckillSkuDo
	Distinct(cols ...field.Expr) ISmsSeckillSkuDo
	Omit(cols ...field.Expr) ISmsSeckillSkuDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuDo
	Group(cols ...field.Expr) ISmsSeckillSkuDo
	Having(conds ...gen.Condition) ISmsSeckillSkuDo
	Limit(limit int) ISmsSeckillSkuDo
	Offset(offset int) ISmsSeckillSkuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillSkuDo
	Unscoped() ISmsSeckillSkuDo
	Create(values ...*model.SmsSeckillSku) error
	CreateInBatches(values []*model.SmsSeckillSku, batchSize int) error
	Save(values ...*model.SmsSeckillSku) error
	First() (*model.SmsSeckillSku, error)
	Take() (*model.SmsSeckillSku, error)
	Last() (*model.SmsSeckillSku, error)
	Find() ([]*model.SmsSeckillSku, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillSku, err error)
	FindInBatches(result *[]*model.SmsSeckillSku, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSeckillSku) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSeckillSkuDo
	Assign(attrs ...field.AssignExpr) ISmsSeckillSkuDo
	Joins(fields ...field.RelationField) ISmsSeckillSkuDo
	Preload(fields ...field.RelationField) ISmsSeckillSkuDo
	FirstOrInit() (*model.SmsSeckillSku, error)
	FirstOrCreate() (*model.SmsSeckillSku, error)
	FindByPage(offset int, limit int) (result []*model.SmsSeckillSku, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSeckillSkuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSeckillSkuDo) Debug() ISmsSeckillSkuDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSeckillSkuDo) WithContext(ctx context.Context) ISmsSeckillSkuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSeckillSkuDo) ReadDB() ISmsSeckillSkuDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSeckillSkuDo) WriteDB() ISmsSeckillSkuDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSeckillSkuDo) Session(config *gorm.Session) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSeckillSkuDo) Clauses(conds ...clause.Expression) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSeckillSkuDo) Returning(value interface{}, columns ...string) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSeckillSkuDo) Not(conds ...gen.Condition) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSeckillSkuDo) Or(conds ...gen.Condition) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSeckillSkuDo) Select(conds ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSeckillSkuDo) Where(conds ...gen.Condition) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSeckillSkuDo) Order(conds ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSeckillSkuDo) Distinct(cols ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSeckillSkuDo) Omit(cols ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSeckillSkuDo) Join(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSeckillSkuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSeckillSkuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSeckillSkuDo) Group(cols ...field.Expr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSeckillSkuDo) Having(conds ...gen.Condition) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSeckillSkuDo) Limit(limit int) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSeckillSkuDo) Offset(offset int) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSeckillSkuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSeckillSkuDo) Unscoped() ISmsSeckillSkuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSeckillSkuDo) Create(values ...*model.SmsSeckillSku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSeckillSkuDo) CreateInBatches(values []*model.SmsSeckillSku, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSeckillSkuDo) Save(values ...*model.SmsSeckillSku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSeckillSkuDo) First() (*model.SmsSeckillSku, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSku), nil
	}
}

func (s smsSeckillSkuDo) Take() (*model.SmsSeckillSku, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSku), nil
	}
}

func (s smsSeckillSkuDo) Last() (*model.SmsSeckillSku, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSku), nil
	}
}

func (s smsSeckillSkuDo) Find() ([]*model.SmsSeckillSku, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSeckillSku), err
}

func (s smsSeckillSkuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillSku, err error) {
	buf := make([]*model.SmsSeckillSku, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSeckillSkuDo) FindInBatches(result *[]*model.SmsSeckillSku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSeckillSkuDo) Attrs(attrs ...field.AssignExpr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSeckillSkuDo) Assign(attrs ...field.AssignExpr) ISmsSeckillSkuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSeckillSkuDo) Joins(fields ...field.RelationField) ISmsSeckillSkuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSeckillSkuDo) Preload(fields ...field.RelationField) ISmsSeckillSkuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSeckillSkuDo) FirstOrInit() (*model.SmsSeckillSku, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSku), nil
	}
}

func (s smsSeckillSkuDo) FirstOrCreate() (*model.SmsSeckillSku, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillSku), nil
	}
}

func (s smsSeckillSkuDo) FindByPage(offset int, limit int) (result []*model.SmsSeckillSku, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSeckillSkuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSeckillSkuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSeckillSkuDo) Delete(models ...*model.SmsSeckillSku) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSeckillSkuDo) withDO(do gen.Dao) *smsSeckillSkuDo {
	s.DO = *do.(*gen.DO)
	return s
}
