// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project-layout/internal/model"
)

func newPmsSpuComment(db *gorm.DB, opts ...gen.DOOption) pmsSpuComment {
	_pmsSpuComment := pmsSpuComment{}

	_pmsSpuComment.pmsSpuCommentDo.UseDB(db, opts...)
	_pmsSpuComment.pmsSpuCommentDo.UseModel(&model.PmsSpuComment{})

	tableName := _pmsSpuComment.pmsSpuCommentDo.TableName()
	_pmsSpuComment.ALL = field.NewAsterisk(tableName)
	_pmsSpuComment.ID = field.NewInt(tableName, "id")
	_pmsSpuComment.SpuID = field.NewInt(tableName, "spu_id")
	_pmsSpuComment.SkuID = field.NewInt(tableName, "sku_id")
	_pmsSpuComment.SkuName = field.NewString(tableName, "sku_name")
	_pmsSpuComment.MemberID = field.NewInt(tableName, "member_id")
	_pmsSpuComment.ReplyID = field.NewInt(tableName, "reply_id")
	_pmsSpuComment.OrderID = field.NewInt(tableName, "order_id")
	_pmsSpuComment.Star = field.NewInt8(tableName, "star")
	_pmsSpuComment.SkuAttrs = field.NewString(tableName, "sku_attrs")
	_pmsSpuComment.LikeCount = field.NewInt(tableName, "like_count")
	_pmsSpuComment.ReplyCount = field.NewInt(tableName, "reply_count")
	_pmsSpuComment.Resources = field.NewString(tableName, "resources")
	_pmsSpuComment.Content = field.NewString(tableName, "content")
	_pmsSpuComment.IsRelease = field.NewInt8(tableName, "is_release")
	_pmsSpuComment.CreatedAt = field.NewTime(tableName, "created_at")
	_pmsSpuComment.UpdatedAt = field.NewTime(tableName, "updated_at")

	_pmsSpuComment.fillFieldMap()

	return _pmsSpuComment
}

type pmsSpuComment struct {
	pmsSpuCommentDo

	ALL        field.Asterisk
	ID         field.Int    // ID
	SpuID      field.Int    // spu_id
	SkuID      field.Int    // sku_id
	SkuName    field.String // 商品名
	MemberID   field.Int    // 会员id
	ReplyID    field.Int    // 回复内容id
	OrderID    field.Int    // 订单id
	Star       field.Int8   // 星级
	SkuAttrs   field.String // 购买属性组合
	LikeCount  field.Int    // 点赞数
	ReplyCount field.Int    // 回复数
	Resources  field.String // 评论图片/视频[json数据；[{type:文件类型,url:资源路径}]]
	Content    field.String // 内容
	IsRelease  field.Int8   // 是否发布上线
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (p pmsSpuComment) Table(newTableName string) *pmsSpuComment {
	p.pmsSpuCommentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSpuComment) As(alias string) *pmsSpuComment {
	p.pmsSpuCommentDo.DO = *(p.pmsSpuCommentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSpuComment) updateTableName(table string) *pmsSpuComment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.SpuID = field.NewInt(table, "spu_id")
	p.SkuID = field.NewInt(table, "sku_id")
	p.SkuName = field.NewString(table, "sku_name")
	p.MemberID = field.NewInt(table, "member_id")
	p.ReplyID = field.NewInt(table, "reply_id")
	p.OrderID = field.NewInt(table, "order_id")
	p.Star = field.NewInt8(table, "star")
	p.SkuAttrs = field.NewString(table, "sku_attrs")
	p.LikeCount = field.NewInt(table, "like_count")
	p.ReplyCount = field.NewInt(table, "reply_count")
	p.Resources = field.NewString(table, "resources")
	p.Content = field.NewString(table, "content")
	p.IsRelease = field.NewInt8(table, "is_release")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *pmsSpuComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSpuComment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["id"] = p.ID
	p.fieldMap["spu_id"] = p.SpuID
	p.fieldMap["sku_id"] = p.SkuID
	p.fieldMap["sku_name"] = p.SkuName
	p.fieldMap["member_id"] = p.MemberID
	p.fieldMap["reply_id"] = p.ReplyID
	p.fieldMap["order_id"] = p.OrderID
	p.fieldMap["star"] = p.Star
	p.fieldMap["sku_attrs"] = p.SkuAttrs
	p.fieldMap["like_count"] = p.LikeCount
	p.fieldMap["reply_count"] = p.ReplyCount
	p.fieldMap["resources"] = p.Resources
	p.fieldMap["content"] = p.Content
	p.fieldMap["is_release"] = p.IsRelease
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p pmsSpuComment) clone(db *gorm.DB) pmsSpuComment {
	p.pmsSpuCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSpuComment) replaceDB(db *gorm.DB) pmsSpuComment {
	p.pmsSpuCommentDo.ReplaceDB(db)
	return p
}

type pmsSpuCommentDo struct{ gen.DO }

type IPmsSpuCommentDo interface {
	gen.SubQuery
	Debug() IPmsSpuCommentDo
	WithContext(ctx context.Context) IPmsSpuCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsSpuCommentDo
	WriteDB() IPmsSpuCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsSpuCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsSpuCommentDo
	Not(conds ...gen.Condition) IPmsSpuCommentDo
	Or(conds ...gen.Condition) IPmsSpuCommentDo
	Select(conds ...field.Expr) IPmsSpuCommentDo
	Where(conds ...gen.Condition) IPmsSpuCommentDo
	Order(conds ...field.Expr) IPmsSpuCommentDo
	Distinct(cols ...field.Expr) IPmsSpuCommentDo
	Omit(cols ...field.Expr) IPmsSpuCommentDo
	Join(table schema.Tabler, on ...field.Expr) IPmsSpuCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuCommentDo
	Group(cols ...field.Expr) IPmsSpuCommentDo
	Having(conds ...gen.Condition) IPmsSpuCommentDo
	Limit(limit int) IPmsSpuCommentDo
	Offset(offset int) IPmsSpuCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuCommentDo
	Unscoped() IPmsSpuCommentDo
	Create(values ...*model.PmsSpuComment) error
	CreateInBatches(values []*model.PmsSpuComment, batchSize int) error
	Save(values ...*model.PmsSpuComment) error
	First() (*model.PmsSpuComment, error)
	Take() (*model.PmsSpuComment, error)
	Last() (*model.PmsSpuComment, error)
	Find() ([]*model.PmsSpuComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuComment, err error)
	FindInBatches(result *[]*model.PmsSpuComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsSpuComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsSpuCommentDo
	Assign(attrs ...field.AssignExpr) IPmsSpuCommentDo
	Joins(fields ...field.RelationField) IPmsSpuCommentDo
	Preload(fields ...field.RelationField) IPmsSpuCommentDo
	FirstOrInit() (*model.PmsSpuComment, error)
	FirstOrCreate() (*model.PmsSpuComment, error)
	FindByPage(offset int, limit int) (result []*model.PmsSpuComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsSpuCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsSpuCommentDo) Debug() IPmsSpuCommentDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSpuCommentDo) WithContext(ctx context.Context) IPmsSpuCommentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSpuCommentDo) ReadDB() IPmsSpuCommentDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSpuCommentDo) WriteDB() IPmsSpuCommentDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSpuCommentDo) Session(config *gorm.Session) IPmsSpuCommentDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSpuCommentDo) Clauses(conds ...clause.Expression) IPmsSpuCommentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSpuCommentDo) Returning(value interface{}, columns ...string) IPmsSpuCommentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSpuCommentDo) Not(conds ...gen.Condition) IPmsSpuCommentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSpuCommentDo) Or(conds ...gen.Condition) IPmsSpuCommentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSpuCommentDo) Select(conds ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSpuCommentDo) Where(conds ...gen.Condition) IPmsSpuCommentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSpuCommentDo) Order(conds ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSpuCommentDo) Distinct(cols ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSpuCommentDo) Omit(cols ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSpuCommentDo) Join(table schema.Tabler, on ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSpuCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSpuCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSpuCommentDo) Group(cols ...field.Expr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSpuCommentDo) Having(conds ...gen.Condition) IPmsSpuCommentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSpuCommentDo) Limit(limit int) IPmsSpuCommentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSpuCommentDo) Offset(offset int) IPmsSpuCommentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSpuCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsSpuCommentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSpuCommentDo) Unscoped() IPmsSpuCommentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSpuCommentDo) Create(values ...*model.PmsSpuComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSpuCommentDo) CreateInBatches(values []*model.PmsSpuComment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSpuCommentDo) Save(values ...*model.PmsSpuComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSpuCommentDo) First() (*model.PmsSpuComment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) Take() (*model.PmsSpuComment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) Last() (*model.PmsSpuComment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) Find() ([]*model.PmsSpuComment, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSpuComment), err
}

func (p pmsSpuCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuComment, err error) {
	buf := make([]*model.PmsSpuComment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSpuCommentDo) FindInBatches(result *[]*model.PmsSpuComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSpuCommentDo) Attrs(attrs ...field.AssignExpr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSpuCommentDo) Assign(attrs ...field.AssignExpr) IPmsSpuCommentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSpuCommentDo) Joins(fields ...field.RelationField) IPmsSpuCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSpuCommentDo) Preload(fields ...field.RelationField) IPmsSpuCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSpuCommentDo) FirstOrInit() (*model.PmsSpuComment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) FirstOrCreate() (*model.PmsSpuComment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) FindByPage(offset int, limit int) (result []*model.PmsSpuComment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSpuCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSpuCommentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSpuCommentDo) Delete(models ...*model.PmsSpuComment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSpuCommentDo) withDO(do gen.Dao) *pmsSpuCommentDo {
	p.DO = *do.(*gen.DO)
	return p
}
